{"version":3,"file":"static/js/960.6aee1746.chunk.js","mappings":"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","sources":["../../core/src/asset-graph/AssetEdges.tsx","../../core/src/assets/LaunchAssetObservationButton.tsx","../../core/src/asset-graph/AssetGraphJobSidebar.tsx","../../core/src/assets/LastMaterializationMetadata.tsx","../../core/src/assets/AssetSidebarActivitySummary.tsx","../../core/src/asset-graph/SidebarAssetInfo.tsx","../../core/src/asset-graph/useFindAssetLocation.tsx","../../core/src/asset-graph/AssetGraphExplorer.tsx","../../core/src/asset-graph/AssetGroupNode.tsx","../../core/src/ui/markdownToPlaintext.ts","../../core/src/asset-graph/AssetNode.tsx","../../core/src/asset-graph/AssetRunLinking.tsx","../../core/src/asset-graph/ForeignNode.tsx","../../core/src/asset-graph/useAssetGraphData.tsx","../../core/src/asset-graph/useLiveDataForAssetKeys.tsx","../../core/src/assets/AssetConfig.tsx","../../core/src/assets/AssetDefinedInMultipleReposNotice.tsx","../../core/src/assets/AssetLineageElements.tsx","../../core/src/assets/AssetMaterializationGraphs.tsx","../../core/src/assets/AssetMetadata.tsx","../../core/src/assets/CurrentMinutesLateTag.tsx","../../core/src/assets/CurrentRunsBanner.tsx","../../core/src/assets/DependsOnSelfBanner.tsx","../../core/src/assets/FailedRunsSinceMaterializationBanner.tsx","../../core/src/assets/RunningBackfillsNotice.tsx","../../core/src/assets/LaunchAssetChoosePartitionsDialog.tsx","../../core/src/assets/LaunchAssetExecutionButton.tsx","../../core/src/assets/MultipartitioningSupport.tsx","../../core/src/assets/PartitionHealthSummary.tsx","../../core/src/assets/StaleTag.tsx","../../core/src/assets/groupByPartition.tsx","../../core/src/assets/usePartitionDimensionSelections.tsx","../../core/src/assets/usePartitionHealthData.tsx","../../core/src/assets/usePartitionNameForPipeline.tsx","../../core/src/assets/useRecentAssetEvents.tsx","../../core/src/launchpad/ConfigEditorConfigPicker.tsx","../../ui/src/components/ConfigEditorWithSchema.tsx","../../core/src/launchpad/LaunchpadTransientSessionContainer.tsx","../../core/src/launchpad/LaunchpadRoot.tsx","../../ui/src/components/configeditor/codemirror-yaml/lint.js","../../ui/src/components/ConfigEditor.tsx","../../ui/src/components/configeditor/isHelpContextEqual.ts","../../ui/src/components/configeditor/ConfigEditorHelp.tsx","../../core/src/configeditor/ConfigEditorUtils.tsx","../../core/src/launchpad/ConfigEditorModePicker.tsx","../../core/src/launchpad/OpSelector.tsx","../../core/src/launchpad/RunPreview.tsx","../../core/src/launchpad/scaffoldType.ts","../../core/src/launchpad/LaunchpadSession.tsx","../../core/src/launchpad/LaunchpadSessionError.tsx","../../core/src/launchpad/LaunchpadSessionLoading.tsx","../../core/src/launchpad/LoadingOverlay.tsx","../../core/src/launchpad/SessionSettingsBar.tsx","../../core/src/launchpad/TagEditor.tsx","../../core/src/partitions/BackfillSelector.tsx","../../core/src/partitions/DimensionRangeInput.tsx","../../core/src/partitions/DimensionRangeWizard.tsx","../../core/src/partitions/PartitionStateCheckboxes.tsx","../../core/src/pipelines/NonIdealPipelineQueryResult.tsx","../../core/src/pipelines/useJobTitle.tsx","../../core/src/ui/ClearButton.tsx","../../core/src/versions/Version.tsx"],"sourcesContent":["import {Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {buildSVGPath} from './Utils';\nimport {AssetLayoutEdge} from './layout';\n\nexport const AssetEdges: React.FC<{\n  edges: AssetLayoutEdge[];\n  highlighted: string | null;\n  strokeWidth?: number;\n  baseColor?: string;\n}> = ({edges, highlighted, strokeWidth = 4, baseColor = Colors.KeylineGray}) => {\n  // Note: we render the highlighted edges twice, but it's so that the first item with\n  // all the edges in it can remain memoized.\n  return (\n    <React.Fragment>\n      <AssetEdgeSet color={baseColor} edges={edges} strokeWidth={strokeWidth} />\n      <AssetEdgeSet\n        color={Colors.Blue500}\n        edges={edges.filter(({fromId, toId}) => highlighted === fromId || highlighted === toId)}\n        strokeWidth={strokeWidth}\n      />\n    </React.Fragment>\n  );\n};\n\nexport const AssetEdgeSet: React.FC<{\n  edges: AssetLayoutEdge[];\n  color: string;\n  strokeWidth: number;\n}> = React.memo(({edges, color, strokeWidth}) => (\n  <>\n    <defs>\n      <marker\n        id={`arrow${btoa(color)}`}\n        viewBox=\"0 0 8 10\"\n        refX=\"1\"\n        refY=\"5\"\n        markerUnits=\"strokeWidth\"\n        markerWidth={strokeWidth}\n        orient=\"auto\"\n      >\n        <path d=\"M 0 0 L 8 5 L 0 10 z\" fill={color} />\n      </marker>\n    </defs>\n    {edges.map((edge, idx) => (\n      <path\n        key={idx}\n        d={buildSVGPath({source: edge.from, target: edge.to})}\n        stroke={color}\n        strokeWidth={strokeWidth}\n        fill=\"none\"\n        markerEnd={`url(#arrow${btoa(color)})`}\n      />\n    ))}\n  </>\n));\n","import {ApolloClient, useApolloClient} from '@apollo/client';\nimport {Button, Spinner, Tooltip, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {usePermissionsDEPRECATED} from '../app/Permissions';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {LaunchPipelineExecutionMutationVariables} from '../runs/types/RunUtils.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nimport {\n  buildAssetCollisionsAlert,\n  executionParamsForAssetJob,\n  getCommonJob,\n  LAUNCH_ASSET_LOADER_QUERY,\n} from './LaunchAssetExecutionButton';\nimport {AssetKey} from './types';\nimport {\n  LaunchAssetExecutionAssetNodeFragment,\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n} from './types/LaunchAssetExecutionButton.types';\n\ntype ObserveAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionMutationVariables['executionParams'];\n    };\n\nexport const LaunchAssetObservationButton: React.FC<{\n  assetKeys: AssetKey[]; // Memoization not required\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({assetKeys, preferredJobName, intent = 'none'}) => {\n  const {canLaunchPipelineExecution} = usePermissionsDEPRECATED();\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const [state, setState] = React.useState<ObserveAssetsState>({type: 'none'});\n  const client = useApolloClient();\n\n  const count = assetKeys.length > 1 ? ` (${assetKeys.length})` : '';\n  const label = `Observe sources ${count}`;\n\n  if (!assetKeys.length) {\n    return <span />;\n  }\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return (\n      <Tooltip content=\"You do not have permission to observe source assets\">\n        <Button intent={intent} icon={<Icon name=\"observation\" />} disabled>\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  const onClick = async (e: React.MouseEvent<any>) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: assetKeys.map(({path}) => ({path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey;\n\n    const next = await stateForObservingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to observe',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  return (\n    <Button\n      intent={intent}\n      onClick={onClick}\n      icon={\n        state.type === 'loading' ? <Spinner purpose=\"body-text\" /> : <Icon name=\"observation\" />\n      }\n    >\n      {label}\n    </Button>\n  );\n};\n\nasync function stateForObservingAssets(\n  _client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  _forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<ObserveAssetsState> {\n  if (assets.some((x) => !x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more non-source assets are selected and cannot be observed.',\n    };\n  }\n\n  if (assets.some((x) => !x.isObservable)) {\n    return {\n      type: 'error',\n      error: 'One or more of the selected source assets are unversioned and cannot be observed.',\n    };\n  }\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (\n    !assets.every(\n      (a) =>\n        a.repository.name === repoAddress.name &&\n        a.repository.location.name === repoAddress.location,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: `Assets must be in ${repoName} to be materialized together.`,\n    };\n  }\n\n  const jobName = getCommonJob(assets, preferredJobName);\n  if (!jobName) {\n    return {\n      type: 'error',\n      error: 'Assets must be in the same job to be observed together.',\n    };\n  }\n\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PipelineSelector} from '../graphql/types';\nimport {NonIdealPipelineQueryResult} from '../pipelines/NonIdealPipelineQueryResult';\nimport {\n  SidebarContainerOverview,\n  SIDEBAR_ROOT_CONTAINER_FRAGMENT,\n} from '../pipelines/SidebarContainerOverview';\nimport {Loading} from '../ui/Loading';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {\n  AssetGraphSidebarQuery,\n  AssetGraphSidebarQueryVariables,\n} from './types/AssetGraphJobSidebar.types';\n\nexport const AssetGraphJobSidebar: React.FC<{\n  pipelineSelector: PipelineSelector;\n}> = ({pipelineSelector}) => {\n  const queryResult = useQuery<AssetGraphSidebarQuery, AssetGraphSidebarQueryVariables>(\n    ASSET_GRAPH_JOB_SIDEBAR,\n    {\n      partialRefetch: true,\n      variables: {pipelineSelector},\n    },\n  );\n\n  const {repositoryName, repositoryLocationName} = pipelineSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({pipelineSnapshotOrError}) => {\n        if (pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph\n              result={pipelineSnapshotOrError}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n        return (\n          <SidebarContainerOverview container={pipelineSnapshotOrError} repoAddress={repoAddress} />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst ASSET_GRAPH_JOB_SIDEBAR = gql`\n  query AssetGraphSidebarQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        ...SidebarRootContainerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${SIDEBAR_ROOT_CONTAINER_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Box, Colors, Group, Icon, Mono, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob, LiveDataForNode} from '../asset-graph/Utils';\nimport {StaleTag} from '../assets/StaleTag';\nimport {MetadataEntry, METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {linkToRunEvent, titleForRun} from '../runs/RunUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AssetLineageElements} from './AssetLineageElements';\nimport {LatestMaterializationMetadataFragment} from './types/LastMaterializationMetadata.types';\n\nexport const LatestMaterializationMetadata: React.FC<{\n  latest: LatestMaterializationMetadataFragment | undefined;\n  liveData: LiveDataForNode | undefined;\n}> = ({latest, liveData}) => {\n  const latestRun = latest?.runOrError.__typename === 'Run' ? latest?.runOrError : null;\n  const repositoryOrigin = latestRun?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n\n  if (!latest) {\n    return (\n      <Box padding={{top: 16, bottom: 32}}>\n        <NonIdealState\n          icon=\"materialization\"\n          title=\"No materializations\"\n          description=\"No materializations were found for this asset.\"\n        />\n      </Box>\n    );\n  }\n\n  const latestEvent = latest;\n  const latestAssetLineage = latestEvent?.assetLineage;\n\n  return (\n    <MetadataTable>\n      <tbody>\n        <tr>\n          <td>Run</td>\n          <td>\n            {latestRun ? (\n              <div>\n                <Box>\n                  {'Run '}\n                  <Link to={`/runs/${latestEvent.runId}?timestamp=${latestEvent.timestamp}`}>\n                    <Mono>{titleForRun({runId: latestEvent.runId})}</Mono>\n                  </Link>\n                </Box>\n                {!isHiddenAssetGroupJob(latestRun.pipelineName) && (\n                  <>\n                    <Box padding={{left: 8, top: 4}}>\n                      <PipelineReference\n                        showIcon\n                        pipelineName={latestRun.pipelineName}\n                        pipelineHrefContext={repoAddress || 'repo-unknown'}\n                        snapshotId={latestRun.pipelineSnapshotId}\n                        isJob={isThisThingAJob(repo, latestRun.pipelineName)}\n                      />\n                    </Box>\n                    <Group direction=\"row\" padding={{left: 8}} spacing={8} alignItems=\"center\">\n                      <Icon name=\"linear_scale\" color={Colors.Gray400} />\n                      <Link to={linkToRunEvent(latestRun, latestEvent)}>{latestEvent.stepKey}</Link>\n                    </Group>\n                  </>\n                )}\n              </div>\n            ) : (\n              'No materialization events'\n            )}\n          </td>\n        </tr>\n        {latest?.partition ? (\n          <tr>\n            <td>Latest partition</td>\n            <td>{latest ? latest.partition : 'No materialization events'}</td>\n          </tr>\n        ) : null}\n        <tr>\n          <td>Timestamp</td>\n          <td>\n            <Box flex={{gap: 8, alignItems: 'center'}}>\n              {latestEvent ? (\n                <Timestamp timestamp={{ms: Number(latestEvent.timestamp)}} />\n              ) : (\n                'No materialization events'\n              )}\n              {liveData && <StaleTag liveData={liveData} />}\n            </Box>\n          </td>\n        </tr>\n        {latestAssetLineage?.length ? (\n          <tr>\n            <td>Parent assets</td>\n            <td>\n              <AssetLineageElements\n                elements={latestAssetLineage}\n                timestamp={latestEvent.timestamp}\n              />\n            </td>\n          </tr>\n        ) : null}\n        {latestEvent?.metadataEntries.map((entry) => (\n          <tr key={`metadata-${entry.label}`}>\n            <td>{entry.label}</td>\n            <td>\n              <MetadataEntry\n                entry={entry}\n                expandSmallValues={true}\n                repoLocation={repoAddress?.location}\n              />\n            </td>\n            <td>{entry.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </MetadataTable>\n  );\n};\n\nconst MetadataTable = styled(Table)`\n  td:first-child {\n    white-space: nowrap;\n    width: 1px;\n    max-width: 400px;\n    word-break: break-word;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\nexport const LATEST_MATERIALIZATION_METADATA_FRAGMENT = gql`\n  fragment LatestMaterializationMetadataFragment on MaterializationEvent {\n    partition\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        pipelineName\n        pipelineSnapshotId\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    assetLineage {\n      assetKey {\n        path\n      }\n      partitions\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n","import {Body, Box, Colors, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\n\nimport {AssetMaterializationGraphs} from './AssetMaterializationGraphs';\nimport {CurrentMinutesLateTag, freshnessPolicyDescription} from './CurrentMinutesLateTag';\nimport {CurrentRunsBanner} from './CurrentRunsBanner';\nimport {FailedRunsSinceMaterializationBanner} from './FailedRunsSinceMaterializationBanner';\nimport {LatestMaterializationMetadata} from './LastMaterializationMetadata';\nimport {useGroupedEvents} from './groupByPartition';\nimport {AssetKey} from './types';\nimport {useRecentAssetEvents} from './useRecentAssetEvents';\n\ninterface Props {\n  assetKey: AssetKey;\n  liveData?: LiveDataForNode;\n\n  // This timestamp is a \"hint\", when it changes this component will refetch\n  // to retrieve new data. Just don't want to poll the entire table query.\n  assetLastMaterializedAt: string | undefined;\n\n  // This is passed in because we need to know whether to default to partition\n  // grouping /before/ loading all the data.\n  assetHasDefinedPartitions: boolean;\n}\n\nexport const AssetSidebarActivitySummary: React.FC<Props> = ({\n  assetKey,\n  assetLastMaterializedAt,\n  assetHasDefinedPartitions,\n  liveData,\n}) => {\n  const {\n    materializations,\n    observations,\n    loadedPartitionKeys,\n    loading,\n    refetch,\n    xAxis,\n  } = useRecentAssetEvents(assetKey, {}, {assetHasDefinedPartitions});\n\n  const grouped = useGroupedEvents(xAxis, materializations, observations, loadedPartitionKeys);\n\n  React.useEffect(() => {\n    refetch();\n  }, [assetLastMaterializedAt, refetch]);\n\n  if (loading) {\n    return (\n      <Box padding={{vertical: 20}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n  return (\n    <>\n      <FailedRunsSinceMaterializationBanner\n        liveData={liveData}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      />\n      <CurrentRunsBanner\n        liveData={liveData}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      />\n\n      {liveData?.freshnessPolicy && (\n        <SidebarSection title=\"Freshness Policy\">\n          <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12, alignItems: 'center'}}>\n            <CurrentMinutesLateTag liveData={liveData} />\n            <Body>{freshnessPolicyDescription(liveData.freshnessPolicy)}</Body>\n          </Box>\n        </SidebarSection>\n      )}\n\n      <SidebarSection title=\"Materialization in Last Run\">\n        {materializations[0] ? (\n          <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n            <LatestMaterializationMetadata latest={materializations[0]} liveData={liveData} />\n          </div>\n        ) : (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            No materializations found\n          </Box>\n        )}\n      </SidebarSection>\n      <SidebarSection title=\"Metadata Plots\">\n        <AssetMaterializationGraphs\n          xAxis={xAxis}\n          asSidebarSection\n          groups={grouped}\n          columnCount={1}\n        />\n      </SidebarSection>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, ConfigTypeSchema, Icon, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from '../assets/AssetConfig';\nimport {AssetDefinedInMultipleReposNotice} from '../assets/AssetDefinedInMultipleReposNotice';\nimport {\n  AssetMetadataTable,\n  ASSET_NODE_OP_METADATA_FRAGMENT,\n  metadataForAssetNode,\n} from '../assets/AssetMetadata';\nimport {AssetSidebarActivitySummary} from '../assets/AssetSidebarActivitySummary';\nimport {DependsOnSelfBanner} from '../assets/DependsOnSelfBanner';\nimport {PartitionHealthSummary} from '../assets/PartitionHealthSummary';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetKey} from '../assets/types';\nimport {usePartitionHealthData} from '../assets/usePartitionHealthData';\nimport {DagsterTypeSummary} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Description} from '../pipelines/Description';\nimport {SidebarSection, SidebarTitle} from '../pipelines/SidebarComponents';\nimport {pluginForMetadata} from '../plugins';\nimport {Version} from '../versions/Version';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {LiveDataForNode, displayNameForAssetKey, GraphNode, nodeDependsOnSelf} from './Utils';\nimport {SidebarAssetQuery, SidebarAssetQueryVariables} from './types/SidebarAssetInfo.types';\n\nexport const SidebarAssetInfo: React.FC<{\n  assetNode: GraphNode;\n  liveData: LiveDataForNode;\n}> = ({assetNode, liveData}) => {\n  const assetKey = assetNode.assetKey;\n  const partitionHealthData = usePartitionHealthData([assetKey]);\n  const {data} = useQuery<SidebarAssetQuery, SidebarAssetQueryVariables>(SIDEBAR_ASSET_QUERY, {\n    variables: {assetKey: {path: assetKey.path}},\n  });\n\n  const {lastMaterialization} = liveData || {};\n  const asset = data?.assetNodeOrError.__typename === 'AssetNode' ? data.assetNodeOrError : null;\n  if (!asset) {\n    return (\n      <>\n        <Header assetKey={assetKey} />\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  const repoAddress = buildRepoAddress(asset.repository.name, asset.repository.location.name);\n  const {assetMetadata, assetType} = metadataForAssetNode(asset);\n  const hasAssetMetadata = assetType || assetMetadata.length > 0;\n  const assetConfigSchema = asset.configField?.configType;\n\n  const OpMetadataPlugin = asset.op?.metadata && pluginForMetadata(asset.op.metadata);\n\n  return (\n    <>\n      <Header assetKey={assetKey} opName={asset.op?.name} />\n\n      <AssetDefinedInMultipleReposNotice\n        assetKey={assetKey}\n        loadedFromRepo={repoAddress}\n        padded={false}\n      />\n\n      <AssetSidebarActivitySummary\n        assetKey={assetKey}\n        assetLastMaterializedAt={lastMaterialization?.timestamp}\n        assetHasDefinedPartitions={!!asset.partitionDefinition}\n        liveData={liveData}\n      />\n\n      <div style={{borderBottom: `2px solid ${Colors.Gray300}`}} />\n\n      {nodeDependsOnSelf(assetNode) && <DependsOnSelfBanner />}\n\n      {(asset.description || OpMetadataPlugin?.SidebarComponent || !hasAssetMetadata) && (\n        <SidebarSection title=\"Description\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Description description={asset.description || 'No description provided.'} />\n          </Box>\n          {asset.op && OpMetadataPlugin?.SidebarComponent && (\n            <Box padding={{bottom: 16, horizontal: 24}}>\n              <OpMetadataPlugin.SidebarComponent definition={asset.op} repoAddress={repoAddress} />\n            </Box>\n          )}\n        </SidebarSection>\n      )}\n\n      {asset.opVersion && (\n        <SidebarSection title=\"Code Version\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Version>{asset.opVersion}</Version>\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetConfigSchema && (\n        <SidebarSection title=\"Config\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <ConfigTypeSchema\n              type={assetConfigSchema}\n              typesInScope={assetConfigSchema.recursiveConfigTypes}\n            />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetMetadata.length > 0 && (\n        <SidebarSection title=\"Metadata\">\n          <AssetMetadataTable assetMetadata={assetMetadata} repoLocation={repoAddress?.location} />\n        </SidebarSection>\n      )}\n\n      {assetType && <TypeSidebarSection assetType={assetType} />}\n\n      {asset.partitionDefinition && (\n        <SidebarSection title=\"Partitions\">\n          <Box padding={{vertical: 16, horizontal: 24}} flex={{direction: 'column', gap: 16}}>\n            <p>{asset.partitionDefinition.description}</p>\n            <PartitionHealthSummary assetKey={asset.assetKey} data={partitionHealthData} />\n          </Box>\n        </SidebarSection>\n      )}\n    </>\n  );\n};\n\nconst TypeSidebarSection: React.FC<{\n  assetType: DagsterTypeFragment;\n}> = ({assetType}) => {\n  return (\n    <SidebarSection title=\"Type\">\n      <DagsterTypeSummary type={assetType} />\n    </SidebarSection>\n  );\n};\n\nconst Header: React.FC<{assetKey: AssetKey; opName?: string}> = ({assetKey, opName}) => {\n  const displayName = displayNameForAssetKey(assetKey);\n\n  return (\n    <Box flex={{gap: 4, direction: 'column'}} margin={{left: 24, right: 12, vertical: 16}}>\n      <SidebarTitle\n        style={{\n          marginBottom: 0,\n          display: 'flex',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        <Box>{displayName}</Box>\n        {displayName !== opName ? (\n          <Box style={{opacity: 0.5}} flex={{gap: 6, alignItems: 'center'}}>\n            <Icon name=\"op\" size={16} />\n            {opName}\n          </Box>\n        ) : undefined}\n      </SidebarTitle>\n      <AssetCatalogLink to={assetDetailsPathForKey(assetKey)}>\n        {'View in Asset Catalog '}\n        <Icon name=\"open_in_new\" color={Colors.Link} />\n      </AssetCatalogLink>\n    </Box>\n  );\n};\nconst AssetCatalogLink = styled(Link)`\n  display: flex;\n  gap: 5px;\n  padding: 6px;\n  margin: -6px;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nexport const SIDEBAR_ASSET_FRAGMENT = gql`\n  fragment SidebarAssetFragment on AssetNode {\n    id\n    description\n    ...AssetNodeConfigFragment\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    partitionDefinition {\n      description\n    }\n    assetKey {\n      path\n    }\n    op {\n      name\n      description\n      metadata {\n        key\n        value\n      }\n    }\n    opVersion\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n\n    ...AssetNodeOpMetadataFragment\n  }\n\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_NODE_OP_METADATA_FRAGMENT}\n`;\n\nconst SIDEBAR_ASSET_QUERY = gql`\n  query SidebarAssetQuery($assetKey: AssetKeyInput!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      __typename\n      ... on AssetNode {\n        id\n        ...SidebarAssetFragment\n      }\n    }\n  }\n\n  ${SIDEBAR_ASSET_FRAGMENT}\n`;\n","import {gql, useApolloClient} from '@apollo/client';\nimport React from 'react';\n\nimport {AssetKey} from '../assets/types';\nimport {AssetKeyInput} from '../graphql/types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\n\nimport {isHiddenAssetGroupJob} from './Utils';\nimport {\n  AssetForNavigationQuery,\n  AssetForNavigationQueryVariables,\n} from './types/useFindAssetLocation.types';\n\nexport interface AssetLocation {\n  assetKey: AssetKey;\n  opNames: string[];\n  jobName: string | null;\n  groupName: string | null;\n  repoAddress: RepoAddress | null;\n}\n\nexport function useFindAssetLocation() {\n  const apollo = useApolloClient();\n\n  return React.useCallback(\n    async (key: AssetKeyInput): Promise<AssetLocation> => {\n      const {data} = await apollo.query<AssetForNavigationQuery, AssetForNavigationQueryVariables>({\n        query: ASSET_FOR_NAVIGATION_QUERY,\n        variables: {key},\n      });\n      if (data?.assetOrError.__typename === 'Asset' && data?.assetOrError.definition) {\n        const def = data.assetOrError.definition;\n        return {\n          assetKey: key,\n          opNames: def.opNames,\n          jobName: def.jobNames.find((jobName) => !isHiddenAssetGroupJob(jobName)) || null,\n          groupName: def.groupName,\n          repoAddress: def.repository\n            ? buildRepoAddress(def.repository.name, def.repository.location.name)\n            : null,\n        };\n      }\n      return {assetKey: key, opNames: [], jobName: null, groupName: null, repoAddress: null};\n    },\n    [apollo],\n  );\n}\n\nconst ASSET_FOR_NAVIGATION_QUERY = gql`\n  query AssetForNavigationQuery($key: AssetKeyInput!) {\n    assetOrError(assetKey: $key) {\n      __typename\n      ... on Asset {\n        id\n        definition {\n          id\n          opNames\n          jobNames\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Box, Checkbox, Colors, NonIdealState, SplitPanelContainer} from '@dagster-io/ui';\nimport pickBy from 'lodash/pickBy';\nimport uniq from 'lodash/uniq';\nimport without from 'lodash/without';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {LaunchAssetObservationButton} from '../assets/LaunchAssetObservationButton';\nimport {AssetKey} from '../assets/types';\nimport {SVGViewport} from '../graph/SVGViewport';\nimport {useAssetLayout} from '../graph/asyncGraphLayout';\nimport {closestNodeInDirection} from '../graph/common';\nimport {\n  GraphExplorerOptions,\n  OptionsOverlay,\n  QueryOverlay,\n  RightInfoPanel,\n  RightInfoPanelContent,\n} from '../pipelines/GraphExplorer';\nimport {\n  EmptyDAGNotice,\n  EntirelyFilteredDAGNotice,\n  LargeDAGNotice,\n  LoadingNotice,\n} from '../pipelines/GraphNotices';\nimport {ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {Loading} from '../ui/Loading';\n\nimport {AssetEdges} from './AssetEdges';\nimport {AssetGraphJobSidebar} from './AssetGraphJobSidebar';\nimport {AssetGroupNode} from './AssetGroupNode';\nimport {AssetNode, AssetNodeMinimal} from './AssetNode';\nimport {AssetNodeLink} from './ForeignNode';\nimport {SidebarAssetInfo} from './SidebarAssetInfo';\nimport {GraphData, graphHasCycles, LiveData, GraphNode, tokenForAssetKey} from './Utils';\nimport {AssetGraphLayout} from './layout';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\nimport {AssetGraphFetchScope, AssetGraphQueryItem, useAssetGraphData} from './useAssetGraphData';\nimport {AssetLocation, useFindAssetLocation} from './useFindAssetLocation';\nimport {useLiveDataForAssetKeys} from './useLiveDataForAssetKeys';\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\ninterface Props {\n  options: GraphExplorerOptions;\n  setOptions?: (options: GraphExplorerOptions) => void;\n\n  fetchOptions: AssetGraphFetchScope;\n  fetchOptionFilters?: React.ReactNode;\n\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n}\n\nexport const MINIMAL_SCALE = 0.6;\nexport const GROUPS_ONLY_SCALE = 0.15;\n\nexport const AssetGraphExplorer: React.FC<Props> = (props) => {\n  const {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = useAssetGraphData(props.explorerPath.opsQuery, props.fetchOptions);\n\n  const {liveDataByNode, liveDataRefreshState, runWatchers} = useLiveDataForAssetKeys(\n    graphAssetKeys,\n  );\n\n  return (\n    <Loading allowStaleData queryResult={fetchResult}>\n      {() => {\n        if (!assetGraphData || !allAssetKeys) {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" />;\n        }\n\n        const hasCycles = graphHasCycles(assetGraphData);\n\n        if (hasCycles) {\n          return (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Cycle detected\"\n              description=\"Assets dependencies form a cycle\"\n            />\n          );\n        }\n        return (\n          <>\n            <AssetGraphExplorerWithData\n              key={props.explorerPath.pipelineName}\n              assetGraphData={assetGraphData}\n              allAssetKeys={allAssetKeys}\n              graphQueryItems={graphQueryItems}\n              applyingEmptyDefault={applyingEmptyDefault}\n              liveDataRefreshState={liveDataRefreshState}\n              liveDataByNode={liveDataByNode}\n              {...props}\n            />\n            {runWatchers}\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\ntype WithDataProps = {\n  allAssetKeys: AssetKey[];\n  assetGraphData: GraphData;\n  graphQueryItems: AssetGraphQueryItem[];\n  liveDataByNode: LiveData;\n  liveDataRefreshState: QueryRefreshState;\n  applyingEmptyDefault: boolean;\n} & Props;\n\nexport const AssetGraphExplorerWithData: React.FC<WithDataProps> = ({\n  options,\n  setOptions,\n  explorerPath,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode: onNavigateToSourceAssetNode,\n  liveDataRefreshState,\n  liveDataByNode,\n  assetGraphData,\n  graphQueryItems,\n  applyingEmptyDefault,\n  fetchOptions,\n  fetchOptionFilters,\n}) => {\n  const findAssetLocation = useFindAssetLocation();\n  const {layout, loading, async} = useAssetLayout(assetGraphData);\n  const viewportEl = React.useRef<SVGViewport>();\n\n  const [highlighted, setHighlighted] = React.useState<string | null>(null);\n\n  const selectedAssetValues = explorerPath.opNames[explorerPath.opNames.length - 1].split(',');\n  const selectedGraphNodes = Object.values(assetGraphData.nodes).filter((node) =>\n    selectedAssetValues.includes(tokenForAssetKey(node.definition.assetKey)),\n  );\n  const lastSelectedNode = selectedGraphNodes[selectedGraphNodes.length - 1];\n\n  const selectedDefinitions = selectedGraphNodes.map((a) => a.definition);\n  const allDefinitionsForMaterialize = applyingEmptyDefault\n    ? graphQueryItems.map((a) => a.node)\n    : Object.values(assetGraphData.nodes).map((a) => a.definition);\n\n  const onSelectNode = React.useCallback(\n    async (\n      e: React.MouseEvent<any> | React.KeyboardEvent<any>,\n      assetKey: {path: string[]},\n      node: GraphNode | null,\n    ) => {\n      e.stopPropagation();\n\n      const token = tokenForAssetKey(assetKey);\n      const nodeIsInDisplayedGraph = node?.definition;\n\n      if (!nodeIsInDisplayedGraph) {\n        // The asset's definition was not provided in our query for job.assetNodes. It's either\n        // in another job or asset group, or is a source asset not defined in any repository.\n        return onNavigateToSourceAssetNode(await findAssetLocation(assetKey));\n      }\n\n      // This asset is in a job and we can stay in the job graph explorer!\n      // If it's in our current job, allow shift / meta multi-selection.\n      let nextOpsNameSelection = token;\n\n      if (e.shiftKey || e.metaKey) {\n        let tokensToAdd = [token];\n        if (e.shiftKey && lastSelectedNode && node) {\n          const tokensInRange = opsInRange({\n            graph: assetGraphData,\n            from: lastSelectedNode,\n            to: node,\n          });\n          if (tokensInRange.length) {\n            tokensToAdd = tokensInRange;\n          }\n        }\n\n        const existing = explorerPath.opNames[0].split(',');\n        nextOpsNameSelection = (existing.includes(token)\n          ? without(existing, token)\n          : uniq([...existing, ...tokensToAdd])\n        ).join(',');\n      }\n\n      const nextCenter = layout?.nodes[nextOpsNameSelection[nextOpsNameSelection.length - 1]];\n      if (nextCenter) {\n        viewportEl.current?.zoomToSVGCoords(nextCenter.bounds.x, nextCenter.bounds.y, true);\n      }\n\n      onChangeExplorerPath(\n        {\n          ...explorerPath,\n          opNames: [nextOpsNameSelection],\n          opsQuery: nodeIsInDisplayedGraph\n            ? explorerPath.opsQuery\n            : `${explorerPath.opsQuery},++\"${token}\"++`,\n          pipelineName: explorerPath.pipelineName,\n        },\n        'replace',\n      );\n    },\n    [\n      explorerPath,\n      onChangeExplorerPath,\n      onNavigateToSourceAssetNode,\n      findAssetLocation,\n      lastSelectedNode,\n      assetGraphData,\n      layout,\n    ],\n  );\n\n  const [lastRenderedLayout, setLastRenderedLayout] = React.useState<AssetGraphLayout | null>(null);\n  const renderingNewLayout = lastRenderedLayout !== layout;\n\n  React.useEffect(() => {\n    if (!renderingNewLayout || !layout || !viewportEl.current) {\n      return;\n    }\n    // The first render where we have our layout and viewport, autocenter or\n    // focus on the selected node. (If selection was specified in the URL).\n    // Don't animate this change.\n    if (lastSelectedNode) {\n      // viewportEl.current.zoomToSVGBox(layout.nodes[lastSelectedNode.id].bounds, false);\n      viewportEl.current.focus();\n    } else {\n      viewportEl.current.autocenter(false);\n    }\n    setLastRenderedLayout(layout);\n  }, [renderingNewLayout, lastSelectedNode, layout, viewportEl]);\n\n  const onClickBackground = () =>\n    onChangeExplorerPath(\n      {...explorerPath, pipelineName: explorerPath.pipelineName, opNames: []},\n      'replace',\n    );\n\n  const onArrowKeyDown = (e: React.KeyboardEvent<any>, dir: string) => {\n    if (!layout) {\n      return;\n    }\n    const hasDefinition = (node: {id: string}) => !!assetGraphData.nodes[node.id]?.definition;\n    const layoutWithoutExternalLinks = {...layout, nodes: pickBy(layout.nodes, hasDefinition)};\n\n    const nextId = closestNodeInDirection(layoutWithoutExternalLinks, lastSelectedNode.id, dir);\n    const node = nextId && assetGraphData.nodes[nextId];\n    if (node && viewportEl.current) {\n      onSelectNode(e, node.assetKey, node);\n      viewportEl.current.zoomToSVGBox(layout.nodes[nextId].bounds, true);\n    }\n  };\n\n  const allowGroupsOnlyZoomLevel = !!(layout && Object.keys(layout.groups).length);\n\n  return (\n    <SplitPanelContainer\n      identifier=\"explorer\"\n      firstInitialPercent={70}\n      firstMinSize={400}\n      first={\n        <>\n          {graphQueryItems.length === 0 ? (\n            <EmptyDAGNotice nodeType=\"asset\" isGraph />\n          ) : applyingEmptyDefault ? (\n            <LargeDAGNotice nodeType=\"asset\" />\n          ) : Object.keys(assetGraphData.nodes).length === 0 ? (\n            <EntirelyFilteredDAGNotice nodeType=\"asset\" />\n          ) : undefined}\n          {loading || !layout ? (\n            <LoadingNotice async={async} nodeType=\"asset\" />\n          ) : (\n            <SVGViewport\n              ref={(r) => (viewportEl.current = r || undefined)}\n              interactor={SVGViewport.Interactors.PanAndZoom}\n              graphWidth={layout.width}\n              graphHeight={layout.height}\n              graphHasNoMinimumZoom={allowGroupsOnlyZoomLevel}\n              onClick={onClickBackground}\n              onArrowKeyDown={onArrowKeyDown}\n              onDoubleClick={(e) => {\n                viewportEl.current?.autocenter(true);\n                e.stopPropagation();\n              }}\n              maxZoom={1.2}\n              maxAutocenterZoom={1.0}\n            >\n              {({scale}) => (\n                <SVGContainer width={layout.width} height={layout.height}>\n                  <AssetEdges\n                    highlighted={highlighted}\n                    edges={layout.edges}\n                    strokeWidth={allowGroupsOnlyZoomLevel ? Math.max(4, 3 / scale) : 4}\n                    baseColor={\n                      allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE\n                        ? Colors.Gray400\n                        : Colors.KeylineGray\n                    }\n                  />\n\n                  {Object.values(layout.groups)\n                    .sort((a, b) => a.id.length - b.id.length)\n                    .map((group) => (\n                      <foreignObject\n                        key={group.id}\n                        {...group.bounds}\n                        onDoubleClick={(e) => {\n                          if (!viewportEl.current) {\n                            return;\n                          }\n                          const targetScale = viewportEl.current.scaleForSVGBounds(\n                            group.bounds.width,\n                            group.bounds.height,\n                          );\n                          viewportEl.current.zoomToSVGBox(group.bounds, true, targetScale * 0.9);\n                          e.stopPropagation();\n                        }}\n                      >\n                        <AssetGroupNode group={group} scale={scale} />\n                      </foreignObject>\n                    ))}\n\n                  {Object.values(layout.nodes).map(({id, bounds}) => {\n                    const graphNode = assetGraphData.nodes[id];\n                    const path = JSON.parse(id);\n                    if (allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE) {\n                      return;\n                    }\n                    return (\n                      <foreignObject\n                        {...bounds}\n                        key={id}\n                        onMouseEnter={() => setHighlighted(id)}\n                        onMouseLeave={() => setHighlighted(null)}\n                        onClick={(e) => onSelectNode(e, {path}, graphNode)}\n                        onDoubleClick={(e) => {\n                          viewportEl.current?.zoomToSVGBox(bounds, true, 1.2);\n                          e.stopPropagation();\n                        }}\n                        style={{overflow: 'visible'}}\n                      >\n                        {!graphNode ? (\n                          <AssetNodeLink assetKey={{path}} />\n                        ) : scale < MINIMAL_SCALE ? (\n                          <AssetNodeMinimal\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        ) : (\n                          <AssetNode\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        )}\n                      </foreignObject>\n                    );\n                  })}\n                </SVGContainer>\n              )}\n            </SVGViewport>\n          )}\n          {setOptions && (\n            <OptionsOverlay>\n              <Checkbox\n                format=\"switch\"\n                label=\"View as Asset Graph\"\n                checked={options.preferAssetRendering}\n                onChange={() => {\n                  onChangeExplorerPath(\n                    {...explorerPath, opNames: selectedDefinitions[0]?.opNames || []},\n                    'replace',\n                  );\n                  setOptions({\n                    ...options,\n                    preferAssetRendering: !options.preferAssetRendering,\n                  });\n                }}\n              />\n            </OptionsOverlay>\n          )}\n\n          <Box\n            flex={{direction: 'column', alignItems: 'flex-end', gap: 8}}\n            style={{position: 'absolute', right: 12, top: 8}}\n          >\n            <Box flex={{alignItems: 'center', gap: 12}}>\n              <QueryRefreshCountdown\n                refreshState={liveDataRefreshState}\n                dataDescription=\"materializations\"\n              />\n              <LaunchAssetObservationButton\n                preferredJobName={explorerPath.pipelineName}\n                assetKeys={(selectedDefinitions.length\n                  ? selectedDefinitions\n                  : allDefinitionsForMaterialize\n                )\n                  .filter((a) => a.isObservable)\n                  .map((n) => n.assetKey)}\n              />\n              <LaunchAssetExecutionButton\n                preferredJobName={explorerPath.pipelineName}\n                liveDataForStale={liveDataByNode}\n                scope={\n                  selectedDefinitions.length\n                    ? {selected: selectedDefinitions}\n                    : {all: allDefinitionsForMaterialize}\n                }\n              />\n            </Box>\n          </Box>\n          <QueryOverlay>\n            {fetchOptionFilters}\n\n            <GraphQueryInput\n              items={graphQueryItems}\n              value={explorerPath.opsQuery}\n              placeholder=\"Type an asset subset…\"\n              onChange={(opsQuery) => onChangeExplorerPath({...explorerPath, opsQuery}, 'replace')}\n              popoverPosition=\"bottom-left\"\n            />\n          </QueryOverlay>\n        </>\n      }\n      second={\n        selectedGraphNodes.length === 1 && selectedGraphNodes[0] ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <SidebarAssetInfo\n                assetNode={selectedGraphNodes[0]}\n                liveData={liveDataByNode[selectedGraphNodes[0].id]}\n              />\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : fetchOptions.pipelineSelector ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <AssetGraphJobSidebar pipelineSelector={fetchOptions.pipelineSelector} />\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : null\n      }\n    />\n  );\n};\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n`;\n\n// Helpers\n\nconst graphDirectionOf = ({\n  graph,\n  from,\n  to,\n}: {\n  graph: GraphData;\n  from: GraphNode;\n  to: GraphNode;\n}) => {\n  const stack = [from];\n  while (stack.length) {\n    const node = stack.pop()!;\n\n    const downstream = [...Object.keys(graph.downstream[node.id] || {})]\n      .map((n) => graph.nodes[n])\n      .filter(Boolean);\n    if (downstream.some((d) => d.id === to.id)) {\n      return 'downstream';\n    }\n    stack.push(...downstream);\n  }\n  return 'upstream';\n};\n\nconst opsInRange = (\n  {graph, from, to}: {graph: GraphData; from: GraphNode; to: GraphNode},\n  seen: string[] = [],\n) => {\n  if (!from) {\n    return [];\n  }\n  if (from.id === to.id) {\n    return [...to.definition.opNames];\n  }\n\n  if (seen.length === 0 && graphDirectionOf({graph, from, to}) === 'upstream') {\n    [from, to] = [to, from];\n  }\n\n  const downstream = [...Object.keys(graph.downstream[from.id] || {})]\n    .map((n) => graph.nodes[n])\n    .filter(Boolean);\n\n  const ledToTarget: string[] = [];\n\n  for (const node of downstream) {\n    if (seen.includes(node.id)) {\n      continue;\n    }\n    const result: string[] = opsInRange({graph, from: node, to}, [...seen, from.id]);\n    if (result.length) {\n      ledToTarget.push(...from.definition.opNames, ...result);\n    }\n  }\n  return uniq(ledToTarget);\n};\n","import {Box, Colors, FontFamily, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {workspacePath} from '../workspace/workspacePath';\n\nimport {MINIMAL_SCALE, GROUPS_ONLY_SCALE} from './AssetGraphExplorer';\nimport {GroupLayout} from './layout';\n\nexport const AssetGroupNode: React.FC<{group: GroupLayout; scale: number}> = ({group, scale}) => {\n  const {\n    repositoryLocationName,\n    repositoryDisambiguationRequired,\n    repositoryName,\n    groupName,\n  } = group;\n\n  return (\n    <div style={{position: 'relative', width: '100%', height: '100%'}}>\n      {scale > GROUPS_ONLY_SCALE && (\n        <Box flex={{alignItems: 'flex-end'}} style={{height: 70}}>\n          <Mono\n            style={{\n              fontWeight: 600,\n              userSelect: 'none',\n              fontSize: scale > MINIMAL_SCALE ? '16px' : '32px',\n              display: 'flex',\n              gap: 6,\n            }}\n          >\n            <Icon\n              name=\"asset_group\"\n              color={Colors.Gray400}\n              size={scale > MINIMAL_SCALE ? 20 : 48}\n            />\n            <Box flex={{direction: 'column'}}>\n              <Link\n                style={{color: Colors.Gray400}}\n                onClick={(e) => e.stopPropagation()}\n                to={workspacePath(\n                  repositoryName,\n                  repositoryLocationName,\n                  `/asset-groups/${groupName}`,\n                )}\n              >\n                {groupName}\n              </Link>\n              {repositoryDisambiguationRequired && (\n                <GroupRepoName style={{marginBottom: '0.5em'}}>\n                  {withMiddleTruncation(\n                    buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                    {\n                      maxLength: 45,\n                    },\n                  )}\n                </GroupRepoName>\n              )}\n            </Box>\n          </Mono>\n        </Box>\n      )}\n\n      <GroupOutline\n        style={{\n          inset: 0,\n          top: 75,\n          position: 'absolute',\n          background:\n            scale < GROUPS_ONLY_SCALE ? `rgba(234, 234, 234, 1)` : `rgba(217, 217, 217, 0.25)`,\n        }}\n      />\n\n      {scale < GROUPS_ONLY_SCALE ? (\n        <Box\n          flex={{justifyContent: 'center', alignItems: 'center'}}\n          style={{inset: 0, position: 'absolute', fontSize: `${12 / scale}px`, userSelect: 'none'}}\n        >\n          <Box\n            flex={{direction: 'column', alignItems: 'center'}}\n            style={{fontWeight: 600, fontFamily: FontFamily.monospace}}\n          >\n            {groupName}\n            {repositoryDisambiguationRequired && (\n              <GroupRepoName>\n                {withMiddleTruncation(\n                  buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                  {\n                    maxLength: 45,\n                  },\n                )}\n              </GroupRepoName>\n            )}\n          </Box>\n        </Box>\n      ) : undefined}\n    </div>\n  );\n};\n\nconst GroupOutline = styled.div`\n  width: 100%;\n  border-radius: 10px;\n  pointer-events: none;\n`;\n\nconst GroupRepoName = styled.div`\n  font-size: 0.8em;\n  line-height: 0.6em;\n  white-space: nowrap;\n  color: ${Colors.Gray400};\n`;\n","import LRUCache from 'lru-cache';\nimport remark from 'remark';\nimport gfm from 'remark-gfm';\nimport toPlainText from 'remark-plain-text';\n\nconst Remark = remark()\n  .use(gfm)\n  .use(toPlainText as any);\nconst markdownCache = new LRUCache<string, string>({max: 500});\nexport const markdownToPlaintext = (md: string) => {\n  // Compile the Markdown file to plain text:\n  const cached = markdownCache.get(md);\n  if (cached) {\n    return cached;\n  }\n\n  // Clean up escaping left behind.\n  const str = Remark.processSync(md).toString().replaceAll(/\\\\/g, '').trim();\n  markdownCache.set(md, str);\n\n  return str;\n};\n","import {gql} from '@apollo/client';\nimport {Colors, Icon, FontFamily, Box, Caption, Spinner} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {humanizedLateString, isAssetLate} from '../assets/CurrentMinutesLateTag';\nimport {isAssetStale} from '../assets/StaleTag';\nimport {AssetComputeKindTag} from '../graph/OpTags';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {markdownToPlaintext} from '../ui/markdownToPlaintext';\n\nimport {AssetLatestRunSpinner, AssetRunLink} from './AssetRunLinking';\nimport {LiveDataForNode} from './Utils';\nimport {ASSET_NODE_NAME_MAX_LENGTH} from './layout';\nimport {AssetNodeFragment} from './types/AssetNode.types';\n\nexport const AssetNode: React.FC<{\n  definition: AssetNodeFragment;\n  liveData?: LiveDataForNode;\n  selected: boolean;\n}> = React.memo(({definition, selected, liveData}) => {\n  const firstOp = definition.opNames.length ? definition.opNames[0] : null;\n\n  // Used for linking to the run with this step highlighted. We only support highlighting\n  // a single step, so just use the first one.\n  const stepKey = firstOp || '';\n\n  const displayName = definition.assetKey.path[definition.assetKey.path.length - 1];\n  const isSource = definition.isSource;\n\n  return (\n    <AssetInsetForHoverEffect>\n      <AssetNodeContainer $selected={selected}>\n        <AssetNodeBox $selected={selected} $isSource={isSource}>\n          <Name $isSource={isSource}>\n            <span style={{marginTop: 1}}>\n              <Icon name={isSource ? 'source_asset' : 'asset'} />\n            </span>\n            <div style={{overflow: 'hidden', textOverflow: 'ellipsis'}}>\n              {withMiddleTruncation(displayName, {\n                maxLength: ASSET_NODE_NAME_MAX_LENGTH,\n              })}\n            </div>\n            <div style={{flex: 1}} />\n          </Name>\n          {definition.description ? (\n            <Description $color={Colors.Gray800}>\n              {markdownToPlaintext(definition.description).split('\\n')[0]}\n            </Description>\n          ) : (\n            <Description $color={Colors.Gray400}>No description</Description>\n          )}\n          {definition.isObservable && isSource ? (\n            <Stats>\n              <StatsRow>\n                <span>Observed</span>\n                {liveData?.lastObservation ? (\n                  <Caption style={{textAlign: 'right'}}>\n                    <AssetRunLink\n                      runId={liveData.lastObservation.runId}\n                      event={{stepKey, timestamp: liveData.lastObservation.timestamp}}\n                    >\n                      <TimestampDisplay\n                        timestamp={Number(liveData.lastObservation.timestamp) / 1000}\n                        timeFormat={{showSeconds: false, showTimezone: false}}\n                      />\n                    </AssetRunLink>\n                  </Caption>\n                ) : (\n                  <span>–</span>\n                )}\n              </StatsRow>\n            </Stats>\n          ) : isSource ? null : (\n            <AssetNodeStatusRow definition={definition} liveData={liveData} stepKey={stepKey} />\n          )}\n          <AssetComputeKindTag definition={definition} style={{right: -2, paddingTop: 7}} />\n        </AssetNodeBox>\n      </AssetNodeContainer>\n    </AssetInsetForHoverEffect>\n  );\n}, isEqual);\n\nexport const AssetNodeStatusBox: React.FC<{background: string}> = ({background, children}) => (\n  <Box\n    padding={{horizontal: 8}}\n    style={{\n      borderBottomLeftRadius: 6,\n      borderBottomRightRadius: 6,\n      whiteSpace: 'nowrap',\n      lineHeight: '12px',\n      height: 24,\n    }}\n    flex={{justifyContent: 'space-between', alignItems: 'center', gap: 6}}\n    background={background}\n  >\n    {children}\n  </Box>\n);\n\nexport const AssetNodeStatusRow: React.FC<{\n  definition: AssetNodeFragment;\n  liveData: LiveDataForNode | undefined;\n  stepKey: string;\n}> = ({definition, liveData, stepKey}) => {\n  if (definition.isSource) {\n    return <span />;\n  }\n\n  if (!liveData) {\n    return (\n      <AssetNodeStatusBox background={Colors.Gray100}>\n        <Spinner purpose=\"caption-text\" />\n        <Caption style={{flex: 1}} color={Colors.Gray800}>\n          Loading...\n        </Caption>\n      </AssetNodeStatusBox>\n    );\n  }\n\n  const {\n    lastMaterialization,\n    runWhichFailedToMaterialize,\n    inProgressRunIds,\n    unstartedRunIds,\n  } = liveData;\n\n  const materializingRunId = inProgressRunIds[0] || unstartedRunIds[0];\n  const late = isAssetLate(liveData);\n\n  if (materializingRunId) {\n    return (\n      <AssetNodeStatusBox background={Colors.Blue50}>\n        <AssetLatestRunSpinner liveData={liveData} />\n        <Caption style={{flex: 1}} color={Colors.Gray800}>\n          Materializing...\n        </Caption>\n        <AssetRunLink runId={materializingRunId} />\n      </AssetNodeStatusBox>\n    );\n  }\n\n  const lastMaterializationLink = lastMaterialization ? (\n    <Caption>\n      <AssetRunLink\n        runId={lastMaterialization.runId}\n        event={{stepKey, timestamp: lastMaterialization.timestamp}}\n      >\n        <TimestampDisplay\n          timestamp={Number(lastMaterialization.timestamp) / 1000}\n          timeFormat={{showSeconds: false, showTimezone: false}}\n        />\n      </AssetRunLink>\n    </Caption>\n  ) : undefined;\n\n  if (runWhichFailedToMaterialize || late) {\n    return (\n      <AssetNodeStatusBox background={Colors.Red50}>\n        <Caption color={Colors.Red700}>\n          {runWhichFailedToMaterialize && late\n            ? `Failed (Late)`\n            : late\n            ? humanizedLateString(liveData.freshnessInfo.currentMinutesLate)\n            : 'Failed'}\n        </Caption>\n\n        {runWhichFailedToMaterialize ? (\n          <Caption>\n            <AssetRunLink runId={runWhichFailedToMaterialize.id}>\n              <TimestampDisplay\n                timestamp={Number(runWhichFailedToMaterialize.endTime)}\n                timeFormat={{showSeconds: false, showTimezone: false}}\n              />\n            </AssetRunLink>\n          </Caption>\n        ) : (\n          lastMaterializationLink\n        )}\n      </AssetNodeStatusBox>\n    );\n  }\n\n  if (!lastMaterialization) {\n    return (\n      <AssetNodeStatusBox background={Colors.Yellow50}>\n        <Caption color={Colors.Yellow700}>Never materialized</Caption>\n      </AssetNodeStatusBox>\n    );\n  }\n\n  if (!liveData.freshnessPolicy && isAssetStale(liveData)) {\n    return (\n      <AssetNodeStatusBox background={Colors.Yellow50}>\n        <Caption color={Colors.Yellow700}>Stale</Caption>\n        {lastMaterializationLink}\n      </AssetNodeStatusBox>\n    );\n  }\n\n  return (\n    <AssetNodeStatusBox background={Colors.Green50}>\n      <Caption color={Colors.Green700}>Materialized</Caption>\n      {lastMaterializationLink}\n    </AssetNodeStatusBox>\n  );\n};\n\nexport const AssetNodeMinimal: React.FC<{\n  selected: boolean;\n  liveData?: LiveDataForNode;\n  definition: AssetNodeFragment;\n}> = ({selected, definition, liveData}) => {\n  const {isSource, assetKey} = definition;\n  const displayName = assetKey.path[assetKey.path.length - 1];\n  const materializingRunId = liveData?.inProgressRunIds?.[0] || liveData?.unstartedRunIds?.[0];\n\n  const [background, border] =\n    !liveData || definition.isSource\n      ? [Colors.Gray100, Colors.Gray300]\n      : materializingRunId\n      ? [Colors.Blue50, Colors.Blue500]\n      : liveData?.runWhichFailedToMaterialize || isAssetLate(liveData)\n      ? [Colors.Red50, Colors.Red500]\n      : !liveData?.lastMaterialization || (!liveData.freshnessPolicy && isAssetStale(liveData))\n      ? [Colors.Yellow50, Colors.Yellow500]\n      : [Colors.Green50, Colors.Green500];\n\n  return (\n    <AssetInsetForHoverEffect>\n      <MinimalAssetNodeContainer $selected={selected}>\n        <MinimalAssetNodeBox\n          $selected={selected}\n          $isSource={isSource}\n          $background={background}\n          $border={border}\n        >\n          <div style={{position: 'absolute', bottom: 6, left: 6}}>\n            <AssetLatestRunSpinner liveData={liveData} purpose=\"section\" />\n          </div>\n\n          <MinimalName style={{fontSize: 30}} $isSource={isSource}>\n            {withMiddleTruncation(displayName, {maxLength: 14})}\n          </MinimalName>\n        </MinimalAssetNodeBox>\n      </MinimalAssetNodeContainer>\n    </AssetInsetForHoverEffect>\n  );\n};\n\nexport const ASSET_NODE_LIVE_FRAGMENT = gql`\n  fragment AssetNodeLiveFragment on AssetNode {\n    id\n    opNames\n    repository {\n      id\n    }\n    assetKey {\n      path\n    }\n    assetMaterializations(limit: 1) {\n      ...AssetNodeLiveMaterialization\n    }\n    freshnessPolicy {\n      ...AssetNodeLiveFreshnessPolicy\n    }\n    freshnessInfo {\n      ...AssetNodeLiveFreshnessInfo\n    }\n    assetObservations(limit: 1) {\n      ...AssetNodeLiveObservation\n    }\n    currentLogicalVersion\n    projectedLogicalVersion\n  }\n\n  fragment AssetNodeLiveFreshnessPolicy on FreshnessPolicy {\n    maximumLagMinutes\n    cronSchedule\n  }\n\n  fragment AssetNodeLiveFreshnessInfo on AssetFreshnessInfo {\n    currentMinutesLate\n  }\n\n  fragment AssetNodeLiveMaterialization on MaterializationEvent {\n    timestamp\n    runId\n  }\n\n  fragment AssetNodeLiveObservation on ObservationEvent {\n    timestamp\n    runId\n  }\n`;\n\n// Note: This fragment should only contain fields that are needed for\n// useAssetGraphData and the Asset DAG. Some pages of Dagit request this\n// fragment for every AssetNode on the instance. Add fields with care!\n//\nexport const ASSET_NODE_FRAGMENT = gql`\n  fragment AssetNodeFragment on AssetNode {\n    id\n    graphName\n    jobNames\n    opNames\n    opVersion\n    description\n    computeKind\n    isPartitioned\n    isObservable\n    isSource\n    assetKey {\n      ...AssetNodeKey\n    }\n  }\n\n  fragment AssetNodeKey on AssetKey {\n    path\n  }\n`;\n\nconst AssetInsetForHoverEffect = styled.div`\n  padding: 10px 4px 2px 4px;\n  height: 100%;\n`;\n\nexport const AssetNodeContainer = styled.div<{$selected: boolean}>`\n  user-select: none;\n  cursor: default;\n  padding: 4px;\n`;\n\nconst AssetNodeShowOnHover = styled.span`\n  display: none;\n`;\n\nexport const AssetNodeBox = styled.div<{$isSource: boolean; $selected: boolean}>`\n  ${(p) =>\n    p.$isSource\n      ? `border: 2px dashed ${p.$selected ? Colors.Gray600 : Colors.Gray300}`\n      : `border: 2px solid ${p.$selected ? Colors.Blue500 : Colors.Blue200}`};\n\n  ${(p) =>\n    p.$isSource\n      ? `outline: 3px solid ${p.$selected ? Colors.Gray300 : 'transparent'}`\n      : `outline: 3px solid ${p.$selected ? Colors.Blue200 : 'transparent'}`};\n\n  background: ${Colors.White};\n  border-radius: 8px;\n  position: relative;\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 2px 12px 0px;\n    ${AssetNodeShowOnHover} {\n      display: initial;\n    }\n  }\n`;\nconst Name = styled.div<{$isSource: boolean}>`\n  /** Keep in sync with DISPLAY_NAME_PX_PER_CHAR */\n  display: flex;\n  padding: 3px 6px;\n  background: ${(p) => (p.$isSource ? Colors.Gray100 : Colors.Blue50)};\n  font-family: ${FontFamily.monospace};\n  border-top-left-radius: 7px;\n  border-top-right-radius: 7px;\n  font-weight: 600;\n  gap: 4px;\n`;\n\nconst MinimalAssetNodeContainer = styled(AssetNodeContainer)`\n  height: 100%;\n`;\n\nconst MinimalAssetNodeBox = styled.div<{\n  $isSource: boolean;\n  $selected: boolean;\n  $background: string;\n  $border: string;\n}>`\n  background: ${(p) => p.$background};\n  ${(p) =>\n    p.$isSource\n      ? `border: 4px dashed ${p.$selected ? Colors.Gray500 : p.$border}`\n      : `border: 4px solid ${p.$selected ? Colors.Blue500 : p.$border}`};\n\n  ${(p) =>\n    p.$isSource\n      ? `outline: 8px solid ${p.$selected ? Colors.Gray300 : 'transparent'}`\n      : `outline: 8px solid ${p.$selected ? Colors.Blue200 : 'transparent'}`};\n\n  border-radius: 10px;\n  position: relative;\n  padding: 4px;\n  height: 100%;\n  min-height: 46px;\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 2px 12px 0px;\n  }\n`;\n\nconst MinimalName = styled(Name)`\n  font-weight: 600;\n  white-space: nowrap;\n  position: absolute;\n  background: none;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nconst Description = styled.div<{$color: string}>`\n  padding: 6px 8px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: ${(p) => p.$color};\n  border-top: 1px solid ${Colors.Blue50};\n  background: ${Colors.White};\n  font-size: 12px;\n`;\n\nconst Stats = styled.div`\n  padding: 4px 8px;\n  border-top: 1px solid ${Colors.Blue50};\n  background: ${Colors.White};\n  font-size: 12px;\n  line-height: 20px;\n`;\n\nconst StatsRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  min-height: 18px;\n  & > span {\n    color: ${Colors.Gray800};\n  }\n`;\n","import {Colors, Icon, Tooltip, Box, Spinner, Tag, CaptionMono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {CurrentMinutesLateTag} from '../assets/CurrentMinutesLateTag';\nimport {titleForRun, linkToRunEvent} from '../runs/RunUtils';\n\nimport {LiveDataForNode, MISSING_LIVE_DATA} from './Utils';\n\nexport const AssetLatestRunSpinner: React.FC<{\n  liveData?: LiveDataForNode;\n  purpose?: 'caption-text' | 'body-text' | 'section';\n}> = ({liveData, purpose = 'body-text'}) => {\n  if (liveData?.inProgressRunIds?.length) {\n    return (\n      <Tooltip content=\"A run is currently rematerializing this asset.\">\n        <Spinner purpose={purpose} />\n      </Tooltip>\n    );\n  }\n  if (liveData?.unstartedRunIds?.length) {\n    return (\n      <Tooltip content=\"A run has started that will rematerialize this asset soon.\">\n        <Spinner purpose={purpose} stopped />\n      </Tooltip>\n    );\n  }\n  return null;\n};\n\nexport const AssetLatestRunWithNotices: React.FC<{\n  liveData?: LiveDataForNode;\n  includeFreshness: boolean;\n  includeRunStatus: boolean;\n}> = ({liveData, includeFreshness, includeRunStatus}) => {\n  const {\n    lastMaterialization,\n    unstartedRunIds,\n    inProgressRunIds,\n    runWhichFailedToMaterialize,\n    stepKey,\n  } = liveData || MISSING_LIVE_DATA;\n\n  const buildRunTagContent = () => {\n    if (inProgressRunIds?.length > 0) {\n      return (\n        <Box flex={{gap: 4, alignItems: 'center'}}>\n          {includeRunStatus && <AssetLatestRunSpinner liveData={liveData} />}\n          <AssetRunLink runId={inProgressRunIds[0]} />\n        </Box>\n      );\n    }\n    if (unstartedRunIds?.length > 0) {\n      return (\n        <Box flex={{gap: 4, alignItems: 'center'}}>\n          {includeRunStatus && <AssetLatestRunSpinner liveData={liveData} />}\n          <AssetRunLink runId={unstartedRunIds[0]} />\n        </Box>\n      );\n    }\n    if (runWhichFailedToMaterialize?.__typename === 'Run') {\n      return (\n        <Box flex={{gap: 4, alignItems: 'center'}}>\n          {includeRunStatus && (\n            <Tooltip\n              content={`Run ${titleForRun({\n                runId: runWhichFailedToMaterialize.id,\n              })} failed to materialize this asset`}\n            >\n              <Icon name=\"warning\" color={Colors.Red500} />\n            </Tooltip>\n          )}\n          <AssetRunLink runId={runWhichFailedToMaterialize.id} />\n        </Box>\n      );\n    }\n    if (lastMaterialization) {\n      return (\n        <Box flex={{gap: 6, alignItems: 'center'}}>\n          <AssetRunLink\n            runId={lastMaterialization.runId}\n            event={{stepKey, timestamp: lastMaterialization.timestamp}}\n          />\n        </Box>\n      );\n    }\n    return undefined;\n  };\n\n  const runTagContent = buildRunTagContent();\n\n  if (!includeFreshness) {\n    return runTagContent || <span>–</span>;\n  }\n\n  return (\n    <Box flex={{direction: 'row', gap: 4}}>\n      {runTagContent ? <Tag>{runTagContent}</Tag> : <span>–</span>}\n      {liveData && <CurrentMinutesLateTag liveData={liveData} policyOnHover />}\n    </Box>\n  );\n};\n\nexport const AssetRunLink: React.FC<{\n  runId: string;\n  event?: Parameters<typeof linkToRunEvent>[1];\n}> = ({runId, children, event}) => (\n  <Link\n    to={event ? linkToRunEvent({runId}, event) : `/runs/${runId}`}\n    target=\"_blank\"\n    rel=\"noreferrer\"\n  >\n    {children || <CaptionMono>{titleForRun({runId})}</CaptionMono>}\n  </Link>\n);\n","import {Colors, Icon, FontFamily} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\n\nimport {displayNameForAssetKey} from './Utils';\nimport {ASSET_LINK_NAME_MAX_LENGTH} from './layout';\n\nexport const AssetNodeLink: React.FC<{\n  assetKey: {path: string[]};\n}> = React.memo(({assetKey}) => (\n  <AssetNodeLinkContainer>\n    <Icon name=\"open_in_new\" color={Colors.Link} />\n    <span className=\"label\">\n      {withMiddleTruncation(displayNameForAssetKey(assetKey), {\n        maxLength: ASSET_LINK_NAME_MAX_LENGTH,\n      })}\n    </span>\n  </AssetNodeLinkContainer>\n));\n\nconst AssetNodeLinkContainer = styled.div`\n  display: flex;\n  padding: 4px 8px 6px;\n  line-height: 30px;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Link};\n  align-items: center;\n  font-weight: 600;\n  gap: 4px;\n  &:hover .label {\n    color: ${Colors.Link};\n    text-decoration: underline;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport groupBy from 'lodash/groupBy';\nimport keyBy from 'lodash/keyBy';\nimport reject from 'lodash/reject';\nimport React from 'react';\n\nimport {filterByQuery, GraphQueryItem} from '../app/GraphQueryImpl';\nimport {AssetKey} from '../assets/types';\nimport {AssetGroupSelector, PipelineSelector} from '../graphql/types';\n\nimport {ASSET_NODE_FRAGMENT} from './AssetNode';\nimport {buildGraphData, GraphData, toGraphId, tokenForAssetKey} from './Utils';\nimport {AssetGraphQuery, AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\n\nexport interface AssetGraphFetchScope {\n  hideEdgesToNodesOutsideQuery?: boolean;\n  hideNodesMatching?: (node: AssetNodeForGraphQueryFragment) => boolean;\n  pipelineSelector?: PipelineSelector;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport type AssetGraphQueryItem = GraphQueryItem & {\n  node: AssetNode;\n};\n\n/** Fetches data for rendering an asset graph:\n *\n * @param pipelineSelector: Optionally scope to an asset job, or pass null for the global graph\n *\n * @param opsQuery: filter the returned graph using selector syntax string (eg: asset_name++)\n *\n * @param filterNodes: filter the returned graph using the provided function. The global graph\n * uses this option to implement the \"3 of 4 repositories\" picker.\n */\nexport function useAssetGraphData(opsQuery: string, options: AssetGraphFetchScope) {\n  const fetchResult = useQuery<AssetGraphQuery>(ASSET_GRAPH_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pipelineSelector: options.pipelineSelector,\n      groupSelector: options.groupSelector,\n    },\n  });\n\n  const nodes = fetchResult.data?.assetNodes;\n\n  const {\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = React.useMemo(() => {\n    if (nodes === undefined) {\n      return {\n        graphAssetKeys: [],\n        graphQueryItems: [],\n        assetGraphData: null,\n        applyingEmptyDefault: false,\n      };\n    }\n\n    // Apply any filters provided by the caller. This is where we do repo filtering\n    let matching = nodes;\n    if (options.hideNodesMatching) {\n      matching = reject(matching, options.hideNodesMatching);\n    }\n\n    // Filter the set of all AssetNodes down to those matching the `opsQuery`.\n    // In the future it might be ideal to move this server-side, but we currently\n    // get to leverage the useQuery cache almost 100% of the time above, making this\n    // super fast after the first load vs a network fetch on every page view.\n    const graphQueryItems = buildGraphQueryItems(matching);\n    const {all, applyingEmptyDefault} = filterByQuery(graphQueryItems, opsQuery);\n\n    // Assemble the response into the data structure used for layout, traversal, etc.\n    const assetGraphData = buildGraphData(all.map((n) => n.node));\n    if (options.hideEdgesToNodesOutsideQuery) {\n      removeEdgesToHiddenAssets(assetGraphData, nodes);\n    }\n\n    return {\n      allAssetKeys: matching.map((n) => n.assetKey),\n      graphAssetKeys: all.map((n) => ({path: n.node.assetKey.path})),\n      assetGraphData,\n      graphQueryItems,\n      applyingEmptyDefault,\n    };\n  }, [nodes, opsQuery, options.hideEdgesToNodesOutsideQuery, options.hideNodesMatching]);\n\n  return {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  };\n}\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\nconst buildGraphQueryItems = (nodes: AssetNode[]) => {\n  const items: {[name: string]: AssetGraphQueryItem} = {};\n\n  for (const node of nodes) {\n    const name = tokenForAssetKey(node.assetKey);\n    items[name] = {\n      node,\n      name,\n      inputs: node.dependencyKeys.map((key) => ({\n        dependsOn: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n      outputs: node.dependedByKeys.map((key) => ({\n        dependedBy: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n    };\n  }\n  return Object.values(items);\n};\n\nconst removeEdgesToHiddenAssets = (graphData: GraphData, allNodes: AssetNode[]) => {\n  const allNodesById = groupBy(allNodes, (n) => toGraphId(n.assetKey));\n  const notSourceAsset = (id: string) => !!allNodesById[id];\n\n  for (const node of Object.keys(graphData.upstream)) {\n    for (const edge of Object.keys(graphData.upstream[node])) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[node][edge];\n        delete graphData.downstream[edge][node];\n      }\n    }\n  }\n\n  for (const node of Object.keys(graphData.downstream)) {\n    for (const edge of Object.keys(graphData.downstream[node])) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[edge][node];\n        delete graphData.downstream[node][edge];\n      }\n    }\n  }\n};\n\nexport const calculateGraphDistances = (items: GraphQueryItem[], assetKey: AssetKey) => {\n  const map = keyBy(items, (g) => g.name);\n  const start = map[tokenForAssetKey(assetKey)];\n  if (!start) {\n    return {upstream: 0, downstream: 0};\n  }\n\n  const dfsUpstream = (name: string, depth: number): number => {\n    const next = map[name].inputs\n      .flatMap((i) => i.dependsOn.map((d) => d.solid.name))\n      .filter((dname) => dname !== name);\n\n    return Math.max(depth, ...next.map((dname) => dfsUpstream(dname, depth + 1)));\n  };\n  const dfsDownstream = (name: string, depth: number): number => {\n    const next = map[name].outputs\n      .flatMap((i) => i.dependedBy.map((d) => d.solid.name))\n      .filter((dname) => dname !== name);\n\n    return Math.max(depth, ...next.map((dname) => dfsDownstream(dname, depth + 1)));\n  };\n\n  return {\n    upstream: dfsUpstream(start.name, 0),\n    downstream: dfsDownstream(start.name, 0),\n  };\n};\n\nconst ASSET_GRAPH_QUERY = gql`\n  query AssetGraphQuery($pipelineSelector: PipelineSelector, $groupSelector: AssetGroupSelector) {\n    assetNodes(pipeline: $pipelineSelector, group: $groupSelector) {\n      id\n      ...AssetNodeForGraphQuery\n    }\n  }\n\n  fragment AssetNodeForGraphQuery on AssetNode {\n    id\n    groupName\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    dependencyKeys {\n      path\n    }\n    dependedByKeys {\n      path\n    }\n    ...AssetNodeFragment\n  }\n\n  ${ASSET_NODE_FRAGMENT}\n`;\n","import {gql, NetworkStatus, useQuery, useSubscription} from '@apollo/client';\nimport uniq from 'lodash/uniq';\nimport React from 'react';\n\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AssetKeyInput} from '../graphql/types';\nimport {useDidLaunchEvent} from '../runs/RunUtils';\n\nimport {ASSET_NODE_LIVE_FRAGMENT} from './AssetNode';\nimport {buildLiveData, tokenForAssetKey} from './Utils';\nimport {\n  AssetGraphLiveQuery,\n  AssetGraphLiveQueryVariables,\n  AssetLiveRunLogsSubscription,\n  AssetLiveRunLogsSubscriptionVariables,\n} from './types/useLiveDataForAssetKeys.types';\n\nconst SUBSCRIPTION_IDLE_POLL_RATE = 30 * 1000;\nconst SUBSCRIPTION_MAX_POLL_RATE = 2 * 1000;\n\n/** Fetches the last materialization, \"upstream changed\", and other live state\n * for the assets in the given pipeline or in the given set of asset keys (or both).\n *\n * Note: The \"upstream changed\" flag cascades, so it may not appear if the upstream\n * node that has changed is not in scope.\n */\nexport function useLiveDataForAssetKeys(assetKeys: AssetKeyInput[]) {\n  const liveResult = useQuery<AssetGraphLiveQuery, AssetGraphLiveQueryVariables>(\n    ASSETS_GRAPH_LIVE_QUERY,\n    {\n      skip: assetKeys.length === 0,\n      variables: {assetKeys},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const liveDataByNode = React.useMemo(() => {\n    return liveResult.data ? buildLiveData(liveResult.data) : {};\n  }, [liveResult.data]);\n\n  // Track whether the data is being refetched so incoming asset events don't trigger\n  // duplicate requests for live data.\n  const fetching = React.useRef(false);\n  fetching.current = [NetworkStatus.refetch, NetworkStatus.loading].includes(\n    liveResult.networkStatus,\n  );\n\n  const timerRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const onRefreshDebounced = React.useCallback(() => {\n    // This is a basic `throttle`, except that if it fires and finds the live\n    // query is already refreshing it debounces again.\n    const refetch = liveResult.refetch;\n    const fire = () => {\n      if (fetching.current) {\n        timerRef.current = setTimeout(fire, SUBSCRIPTION_MAX_POLL_RATE);\n      } else {\n        timerRef.current = null;\n        refetch();\n      }\n    };\n    if (!timerRef.current) {\n      timerRef.current = setTimeout(fire, SUBSCRIPTION_MAX_POLL_RATE);\n    }\n  }, [timerRef, liveResult.refetch]);\n\n  React.useEffect(() => {\n    return () => {\n      timerRef.current && clearTimeout(timerRef.current);\n    };\n  }, []);\n\n  // If the event log storage does not support streaming us asset events, fall back to\n  // a polling approach and trigger a single refresh when a run is launched for immediate feedback\n  const liveDataRefreshState = useQueryRefreshAtInterval(liveResult, SUBSCRIPTION_IDLE_POLL_RATE);\n\n  useDidLaunchEvent(liveResult.refetch, SUBSCRIPTION_MAX_POLL_RATE);\n\n  const assetKeyTokens = React.useMemo(() => new Set(assetKeys.map(tokenForAssetKey)), [assetKeys]);\n  const assetStepKeys = React.useMemo(\n    () => new Set(liveResult.data?.assetNodes.flatMap((n) => n.opNames) || []),\n    [liveResult],\n  );\n\n  const runInProgressId = uniq(\n    Object.values(liveDataByNode).flatMap((p) => [...p.unstartedRunIds, ...p.inProgressRunIds]),\n  )\n    .sort()\n    .slice(0, 3);\n\n  const runWatchers = (\n    <>\n      {runInProgressId.map((runId) => (\n        <RunLogObserver\n          runId={runId}\n          key={runId}\n          assetKeyTokens={assetKeyTokens}\n          assetStepKeys={assetStepKeys}\n          callback={onRefreshDebounced}\n        />\n      ))}\n    </>\n  );\n\n  return {\n    liveDataByNode,\n    liveDataRefreshState,\n    runWatchers,\n    assetKeys,\n  };\n}\n\nconst RunLogObserver: React.FC<{\n  runId: string;\n  assetKeyTokens: Set<string>;\n  assetStepKeys: Set<string>;\n  callback: () => void;\n}> = React.memo(({runId, assetKeyTokens, assetStepKeys, callback}) => {\n  // Useful for testing this component:\n  const counter = React.useRef(0);\n  React.useEffect(() => {\n    console.log(`Subscribed to ${runId}`);\n    return () => console.log(`Unsubscribed from ${runId} after ${counter.current} messages`);\n  }, [runId]);\n\n  useSubscription<AssetLiveRunLogsSubscription, AssetLiveRunLogsSubscriptionVariables>(\n    ASSET_LIVE_RUN_LOGS_SUBSCRIPTION,\n    {\n      fetchPolicy: 'no-cache',\n      variables: {runId},\n      onSubscriptionData: (data) => {\n        const logs = data.subscriptionData.data?.pipelineRunLogs;\n        if (logs?.__typename !== 'PipelineRunLogsSubscriptionSuccess') {\n          return;\n        }\n\n        counter.current += logs.messages.length;\n\n        if (\n          logs.messages.some((m) => {\n            if (\n              m.__typename === 'AssetMaterializationPlannedEvent' ||\n              m.__typename === 'MaterializationEvent' ||\n              m.__typename === 'ObservationEvent'\n            ) {\n              return m.assetKey && assetKeyTokens.has(tokenForAssetKey(m.assetKey));\n            }\n            if (\n              m.__typename === 'ExecutionStepFailureEvent' ||\n              m.__typename === 'ExecutionStepStartEvent'\n            ) {\n              return m.stepKey && assetStepKeys.has(m.stepKey);\n            }\n            return false;\n          })\n        ) {\n          callback();\n        }\n      },\n    },\n  );\n\n  return <span />;\n});\n\nexport const ASSET_LATEST_INFO_FRAGMENT = gql`\n  fragment AssetLatestInfoFragment on AssetLatestInfo {\n    assetKey {\n      path\n    }\n    unstartedRunIds\n    inProgressRunIds\n    latestRun {\n      id\n      ...AssetLatestInfoRun\n    }\n  }\n\n  fragment AssetLatestInfoRun on Run {\n    status\n    endTime\n    id\n  }\n`;\n\nconst ASSETS_GRAPH_LIVE_QUERY = gql`\n  query AssetGraphLiveQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys, loadMaterializations: true) {\n      id\n      ...AssetNodeLiveFragment\n    }\n    assetsLatestInfo(assetKeys: $assetKeys) {\n      ...AssetLatestInfoFragment\n    }\n  }\n\n  ${ASSET_NODE_LIVE_FRAGMENT}\n  ${ASSET_LATEST_INFO_FRAGMENT}\n`;\n\nconst ASSET_LIVE_RUN_LOGS_SUBSCRIPTION = gql`\n  subscription AssetLiveRunLogsSubscription($runId: ID!) {\n    pipelineRunLogs(runId: $runId, cursor: \"HEAD\") {\n      __typename\n      ... on PipelineRunLogsSubscriptionSuccess {\n        messages {\n          __typename\n          ... on AssetMaterializationPlannedEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on MaterializationEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on ObservationEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on ExecutionStepStartEvent {\n            stepKey\n          }\n          ... on ExecutionStepFailureEvent {\n            stepKey\n          }\n        }\n      }\n    }\n  }\n`;\n","import {gql} from '@apollo/client';\n\nimport {CONFIG_TYPE_SCHEMA_FRAGMENT} from '../typeexplorer/ConfigTypeSchema';\n\nexport const ASSET_NODE_CONFIG_FRAGMENT = gql`\n  fragment AssetNodeConfigFragment on AssetNode {\n    id\n    configField {\n      name\n      isRequired\n      configType {\n        ...ConfigTypeSchemaFragment\n        recursiveConfigTypes {\n          ...ConfigTypeSchemaFragment\n        }\n      }\n    }\n  }\n\n  ${CONFIG_TYPE_SCHEMA_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Alert, Box, ButtonLink, Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetKey} from './types';\nimport {\n  AssetDefinitionCollisionQuery,\n  AssetDefinitionCollisionQueryVariables,\n} from './types/AssetDefinedInMultipleReposNotice.types';\n\nexport const MULTIPLE_DEFINITIONS_WARNING = 'Multiple asset definitions found';\n\nexport const AssetDefinedInMultipleReposNotice: React.FC<{\n  assetKey: AssetKey;\n  loadedFromRepo: RepoAddress;\n  padded?: boolean;\n}> = ({assetKey, loadedFromRepo, padded}) => {\n  const {data} = useQuery<AssetDefinitionCollisionQuery, AssetDefinitionCollisionQueryVariables>(\n    ASSET_DEFINITION_COLLISION_QUERY,\n    {\n      variables: {assetKeys: [{path: assetKey.path}]},\n    },\n  );\n\n  const collision = data?.assetNodeDefinitionCollisions[0];\n  if (!collision) {\n    return <span />;\n  }\n\n  const allReposWithAsset = collision.repositories.map((r) =>\n    repoAddressAsHumanString({name: r.name, location: r.location.name}),\n  );\n\n  return (\n    <Box\n      padding={padded ? {vertical: 16, left: 24, right: 12} : {}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"warning\"\n        title={MULTIPLE_DEFINITIONS_WARNING}\n        description={\n          <>\n            This asset was loaded from{' '}\n            {buildRepoPathForHuman(loadedFromRepo.name, loadedFromRepo.location)}, but duplicate\n            definitions were found in{' '}\n            <ButtonLink\n              underline=\"always\"\n              color={Colors.Yellow700}\n              onClick={() =>\n                showCustomAlert({\n                  title: MULTIPLE_DEFINITIONS_WARNING,\n                  body: (\n                    <>\n                      Code locations containing an asset definition for{' '}\n                      <strong>{displayNameForAssetKey(assetKey)}</strong>:\n                      <ul>\n                        {allReposWithAsset.map((addr) => (\n                          <li key={addr}>{addr}</li>\n                        ))}\n                      </ul>\n                    </>\n                  ),\n                })\n              }\n            >\n              {allReposWithAsset.length - 1} other repo{allReposWithAsset.length === 2 ? '' : 's'}\n            </ButtonLink>\n            . You should rename these assets to avoid collisions.\n          </>\n        }\n      />\n    </Box>\n  );\n};\n\nconst ASSET_DEFINITION_COLLISION_QUERY = gql`\n  query AssetDefinitionCollisionQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodeDefinitionCollisions(assetKeys: $assetKeys) {\n      assetKey {\n        path\n      }\n      repositories {\n        id\n        name\n        location {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {Box, ButtonLink, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Timestamp} from '../app/time/Timestamp';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetLineageFragment} from './types/AssetLineageElements.types';\n\nconst AssetLineageInfoElement: React.FC<{\n  lineage_info: AssetLineageFragment;\n  timestamp: string;\n}> = ({lineage_info, timestamp}) => {\n  const partition_list_label = lineage_info.partitions.length === 1 ? 'Partition' : 'Partitions';\n  const partition_list_str = lineage_info.partitions\n    .map((partition) => `\"${partition}\"`)\n    .join(', ');\n  const to = assetDetailsPathForKey(lineage_info.assetKey, {asOf: timestamp});\n\n  return (\n    <Box margin={{bottom: 4}}>\n      {lineage_info.partitions.length > 0\n        ? `${partition_list_label} ${partition_list_str} of `\n        : ''}\n      <Tooltip\n        content={\n          <>\n            View snapshot as of{' '}\n            <Timestamp\n              timestamp={{ms: Number(timestamp)}}\n              timeFormat={{showSeconds: true, showTimezone: true}}\n            />\n          </>\n        }\n        modifiers={{offset: {enabled: true, options: {offset: [0, 16]}}}}\n        placement=\"right\"\n      >\n        <Link to={to}>\n          <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n            {lineage_info.assetKey.path\n              .map((p, i) => <span key={i}>{p}</span>)\n              .reduce(\n                (accum, curr, ii) => [\n                  ...accum,\n                  ii > 0 ? (\n                    <React.Fragment key={`${ii}-space`}>&nbsp;{'>'}&nbsp;</React.Fragment>\n                  ) : null,\n                  curr,\n                ],\n                [] as React.ReactNode[],\n              )}\n          </Box>\n        </Link>\n      </Tooltip>\n    </Box>\n  );\n};\n\nconst MAX_COLLAPSED = 5;\n\nexport const AssetLineageElements: React.FC<{\n  elements: AssetLineageFragment[];\n  timestamp: string;\n}> = ({elements, timestamp}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      {elements.length > MAX_COLLAPSED && (\n        <ButtonLink onClick={() => setCollapsed(!collapsed)}>\n          {collapsed ? 'Show More' : 'Show Less'}\n        </ButtonLink>\n      )}\n      {(collapsed ? elements.slice(elements.length - MAX_COLLAPSED) : elements).map((info, idx) => (\n        <AssetLineageInfoElement key={idx} lineage_info={info} timestamp={timestamp} />\n      ))}\n    </div>\n  );\n};\n\nexport const ASSET_LINEAGE_FRAGMENT = gql`\n  fragment AssetLineageFragment on AssetLineageInfo {\n    assetKey {\n      path\n    }\n    partitions\n  }\n`;\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Caption,\n  Subheading,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {AssetValueGraph, AssetValueGraphData} from './AssetValueGraph';\nimport {AssetEventGroup} from './groupByPartition';\n\nexport const AssetMaterializationGraphs: React.FC<{\n  groups: AssetEventGroup[];\n  xAxis: 'partition' | 'time';\n  asSidebarSection?: boolean;\n  columnCount?: number;\n}> = (props) => {\n  const [xHover, setXHover] = React.useState<string | number | null>(null);\n\n  const reversed = React.useMemo(() => {\n    return [...props.groups].reverse();\n  }, [props.groups]);\n\n  const graphDataByMetadataLabel = extractNumericData(reversed, props.xAxis);\n  const graphLabels = Object.keys(graphDataByMetadataLabel).slice(0, 20).sort();\n\n  if (process.env.NODE_ENV === 'test') {\n    return <span />; // chartjs and our useViewport hook don't play nicely with jest\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `1fr `.repeat(props.columnCount || 2),\n          justifyContent: 'stretch',\n        }}\n      >\n        {graphLabels.map((label) => (\n          <Box\n            key={label}\n            style={{width: '100%'}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n          >\n            <Box\n              style={{width: '100%'}}\n              border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n            >\n              {props.asSidebarSection ? (\n                <Box padding={{horizontal: 24, top: 8}} flex={{justifyContent: 'space-between'}}>\n                  <Caption style={{fontWeight: 700}}>{label}</Caption>\n                </Box>\n              ) : (\n                <Box\n                  padding={{horizontal: 24, vertical: 16}}\n                  border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n                  flex={{justifyContent: 'space-between'}}\n                >\n                  <Subheading>{label}</Subheading>\n                </Box>\n              )}\n              <Box padding={{horizontal: 24, vertical: 16}}>\n                <AssetValueGraph\n                  label={label}\n                  width=\"100%\"\n                  data={graphDataByMetadataLabel[label]}\n                  xHover={xHover}\n                  onHoverX={(x) => x !== xHover && setXHover(x)}\n                />\n              </Box>\n            </Box>\n          </Box>\n        ))}\n      </div>\n      {graphLabels.length === 0 ? (\n        props.asSidebarSection ? (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            No numeric metadata entries available to be graphed.\n          </Box>\n        ) : (\n          <Box padding={{horizontal: 24, top: 64}}>\n            <NonIdealState\n              shrinkable\n              icon=\"asset_plot\"\n              title=\"Asset plots are automatically generated by metadata\"\n              description=\"Include numeric metadata entries in your materializations and observations to see data graphed by time or partition.\"\n              action={\n                <ExternalAnchorButton href=\"https://docs.dagster.io/concepts/assets/software-defined-assets#recording-materialization-metadata\">\n                  View documentation\n                </ExternalAnchorButton>\n              }\n            />\n          </Box>\n        )\n      ) : (\n        props.xAxis === 'partition' && (\n          <Box padding={{vertical: 16, horizontal: 24}} style={{color: Colors.Gray400}}>\n            When graphing values by partition, the highest data point for each materialized event\n            label is displayed.\n          </Box>\n        )\n      )}\n    </>\n  );\n};\n\n/**\n * Helper function that iterates over the asset materializations and assembles time series data\n * and stats for all numeric metadata entries. This function makes the following guaruntees:\n *\n * - If a metadata entry is sparsely emitted, points are still included for missing x values\n *   with y = NaN. (For compatiblity with react-chartjs-2)\n * - If a metadata entry is generated many times for the same partition, and xAxis = partition,\n *   the MAX value emitted is used as the data point.\n *\n * Assumes that the data is pre-sorted in ascending partition order if using xAxis = partition.\n */\nconst extractNumericData = (datapoints: AssetEventGroup[], xAxis: 'time' | 'partition') => {\n  const series: {\n    [metadataEntryLabel: string]: AssetValueGraphData;\n  } = {};\n\n  // Build a set of the numeric metadata entry labels (note they may be sparsely emitted)\n  const numericMetadataLabels = uniq(\n    flatMap(datapoints, (e) =>\n      (e.latest?.metadataEntries || [])\n        .filter((k) => ['IntMetadataEntry', 'FloatMetadataEntry'].includes(k.__typename))\n        .map((k) => k.label),\n    ),\n  );\n\n  const append = (label: string, {x, y}: {x: number | string; y: number}) => {\n    series[label] = series[label] || {minX: 0, maxX: 0, minY: 0, maxY: 0, values: [], xAxis};\n\n    if (xAxis === 'partition') {\n      // If the xAxis is partition keys, the graph may only contain one value for each partition.\n      // If the existing sample for the partition was null, replace it. Otherwise take the\n      // most recent value.\n      const existingForPartition = series[label].values.find((v) => v.x === x);\n      if (existingForPartition) {\n        if (!isNaN(y)) {\n          existingForPartition.y = y;\n        }\n        return;\n      }\n    }\n    series[label].values.push({\n      xNumeric: typeof x === 'number' ? x : series[label].values.length,\n      x,\n      y,\n    });\n  };\n\n  for (const {partition, latest} of datapoints) {\n    const x = (xAxis === 'partition' ? partition : Number(latest?.timestamp)) || null;\n\n    if (x === null) {\n      // exclude materializations where partition = null from partitioned graphs\n      continue;\n    }\n\n    // Add an entry for every numeric metadata label\n    for (const label of numericMetadataLabels) {\n      const entry = latest?.metadataEntries.find((l) => l.label === label);\n      if (!entry) {\n        append(label, {x, y: NaN});\n        continue;\n      }\n\n      let y = NaN;\n      if (entry.__typename === 'IntMetadataEntry') {\n        if (entry.intValue !== null) {\n          y = entry.intValue;\n        } else {\n          // will incur precision loss here\n          y = parseInt(entry.intRepr);\n        }\n      }\n      if (entry.__typename === 'FloatMetadataEntry' && entry.floatValue !== null) {\n        y = entry.floatValue;\n      }\n      append(label, {x, y});\n    }\n  }\n\n  for (const serie of Object.values(series)) {\n    const xs = serie.values.map((v) => v.xNumeric);\n    const ys = serie.values.map((v) => v.y).filter((v) => !isNaN(v));\n    serie.minXNumeric = Math.min(...xs);\n    serie.maxXNumeric = Math.max(...xs);\n    serie.minY = Math.min(...ys);\n    serie.maxY = Math.max(...ys);\n  }\n  return series;\n};\n","import {gql} from '@apollo/client';\nimport {Box, MetadataTable} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DAGSTER_TYPE_FRAGMENT} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {MetadataEntry, METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {MetadataEntryFragment} from '../metadata/types/MetadataEntry.types';\n\nimport {AssetNodeOpMetadataFragment} from './types/AssetMetadata.types';\n\nexport const metadataForAssetNode = (\n  assetNode: AssetNodeOpMetadataFragment,\n): {assetType?: DagsterTypeFragment; assetMetadata: MetadataEntryFragment[]} => {\n  const assetType = assetNode.type ? assetNode.type : undefined;\n  const assetMetadata = assetNode.metadataEntries || [];\n  return {assetType, assetMetadata};\n};\n\nexport const AssetMetadataTable: React.FC<{\n  assetMetadata: MetadataEntryFragment[];\n  repoLocation: string;\n}> = ({assetMetadata, repoLocation}) => {\n  const rows = assetMetadata.map((entry) => {\n    return {\n      key: entry.label,\n      value: <MetadataEntry entry={entry} repoLocation={repoLocation} />,\n    };\n  });\n  return (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      <MetadataTable rows={rows} />\n    </Box>\n  );\n};\n\nexport const ASSET_NODE_OP_METADATA_FRAGMENT = gql`\n  fragment AssetNodeOpMetadataFragment on AssetNode {\n    id\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    type {\n      ...DagsterTypeFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${DAGSTER_TYPE_FRAGMENT}\n`;\n","import {Tooltip, Tag} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetNodeLiveFreshnessPolicyFragment} from '../asset-graph/types/AssetNode.types';\nimport {humanCronString} from '../schedules/humanCronString';\n\nconst STALE_OVERDUE_MSG = `A materialization incorporating more recent upstream data is overdue.`;\nconst STALE_UNMATERIALIZED_MSG = `This asset has never been materialized.`;\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\ntype LiveDataWithMinutesLate = LiveDataForNode & {\n  freshnessInfo: NonNullable<LiveDataForNode['freshnessInfo']> & {currentMinutesLate: number};\n};\n\nexport function isAssetLate(liveData?: LiveDataForNode): liveData is LiveDataWithMinutesLate {\n  return (\n    (liveData?.freshnessInfo && (liveData?.freshnessInfo.currentMinutesLate || 0) > 0) || false\n  );\n}\n\nexport const humanizedLateString = (minLate: number) =>\n  `${dayjs.duration(minLate, 'minutes').humanize(false)} late`;\n\nexport const CurrentMinutesLateTag: React.FC<{\n  liveData: LiveDataForNode;\n  policyOnHover?: boolean;\n}> = ({liveData, policyOnHover}) => {\n  const {freshnessInfo, freshnessPolicy} = liveData;\n  const description = policyOnHover ? freshnessPolicyDescription(freshnessPolicy) : '';\n\n  if (!freshnessInfo) {\n    return null;\n  }\n\n  if (freshnessInfo.currentMinutesLate === null) {\n    return (\n      <Tooltip\n        content={<div style={{maxWidth: 400}}>{`${STALE_UNMATERIALIZED_MSG} ${description}`}</div>}\n      >\n        <Tag intent=\"danger\" icon=\"warning\">\n          Late\n        </Tag>\n      </Tooltip>\n    );\n  }\n\n  if (freshnessInfo.currentMinutesLate === 0) {\n    return description ? (\n      <Tooltip content={freshnessPolicyDescription(freshnessPolicy)}>\n        <Tag intent=\"success\" icon=\"check_circle\" />\n      </Tooltip>\n    ) : (\n      <Tag intent=\"success\" icon=\"check_circle\" />\n    );\n  }\n\n  return (\n    <Tooltip content={<div style={{maxWidth: 400}}>{`${STALE_OVERDUE_MSG} ${description}`}</div>}>\n      <Tag intent=\"danger\" icon=\"warning\">\n        {humanizedLateString(freshnessInfo.currentMinutesLate)}\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport const freshnessPolicyDescription = (\n  freshnessPolicy: AssetNodeLiveFreshnessPolicyFragment | null,\n) => {\n  if (!freshnessPolicy) {\n    return '';\n  }\n\n  const {cronSchedule, maximumLagMinutes} = freshnessPolicy;\n  const nbsp = '\\xa0';\n  const cronDesc = cronSchedule ? humanCronString(cronSchedule, 'UTC').replace(/^At /, '') : '';\n  const lagDesc =\n    maximumLagMinutes % 30 === 0\n      ? `${maximumLagMinutes / 60} hour${maximumLagMinutes / 60 !== 1 ? 's' : ''}`\n      : `${maximumLagMinutes} min`;\n\n  if (cronDesc) {\n    return `By ${cronDesc}, this asset should incorporate all data up to ${lagDesc} before that${nbsp}time.`;\n  } else {\n    return `At any point in time, this asset should incorporate all data up to ${lagDesc} before that${nbsp}time.`;\n  }\n};\n","import {Alert, Box, Spinner} from '@dagster-io/ui';\nimport {BorderSetting} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const CurrentRunsBanner: React.FC<{liveData?: LiveDataForNode; border: BorderSetting}> = ({\n  liveData,\n  border,\n}) => {\n  const {inProgressRunIds = [], unstartedRunIds = []} = liveData || {};\n\n  if (inProgressRunIds.length === 0 && unstartedRunIds.length === 0) {\n    return null;\n  }\n  return (\n    <Box padding={{vertical: 16, left: 24, right: 12}} border={border}>\n      <Alert\n        intent=\"info\"\n        icon={<Spinner purpose=\"body-text\" />}\n        title={\n          <div style={{fontWeight: 400}}>\n            {inProgressRunIds.length > 0 && (\n              <>\n                {inProgressRunIds.map((runId) => (\n                  <React.Fragment key={runId}>\n                    Run{' '}\n                    <Link to={`/runs/${runId}`}>\n                      {titleForRun({\n                        runId,\n                      })}\n                    </Link>\n                  </React.Fragment>\n                ))}{' '}\n                {inProgressRunIds.length === 1 ? 'is' : 'are'} currently refreshing this asset.\n              </>\n            )}\n            {unstartedRunIds.length > 0 && (\n              <>\n                {unstartedRunIds.map((runId) => (\n                  <React.Fragment key={runId}>\n                    Run{' '}\n                    <Link to={`/runs/${runId}`}>\n                      {titleForRun({\n                        runId,\n                      })}\n                    </Link>\n                  </React.Fragment>\n                ))}{' '}\n                {unstartedRunIds.length === 1 ? 'has' : 'have'} started and will refresh this asset.\n              </>\n            )}\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const DependsOnSelfBanner: React.FC = () => {\n  return (\n    <Box\n      padding={{vertical: 16, left: 24, right: 12}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"info\"\n        icon={\n          <Icon name=\"history_toggle_off\" size={16} color={Colors.Blue700} style={{marginTop: 1}} />\n        }\n        title={\n          <div style={{fontWeight: 400}}>This asset depends on earlier partitions of itself. </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport {BorderSetting} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const FailedRunsSinceMaterializationBanner: React.FC<{\n  liveData?: LiveDataForNode;\n  border: BorderSetting;\n}> = ({liveData, border}) => {\n  const {runWhichFailedToMaterialize} = liveData || {};\n\n  if (runWhichFailedToMaterialize) {\n    return (\n      <Box padding={{vertical: 16, left: 24, right: 12}} border={border}>\n        <Alert\n          intent=\"error\"\n          title={\n            <div style={{fontWeight: 400}}>\n              Run{' '}\n              <Link to={`/runs/${runWhichFailedToMaterialize.id}`}>\n                {titleForRun({runId: runWhichFailedToMaterialize.id})}\n              </Link>{' '}\n              failed to materialize this asset.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n  return null;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  RunningBackfillsNoticeQuery,\n  RunningBackfillsNoticeQueryVariables,\n} from './types/RunningBackfillsNotice.types';\n\nexport const RunningBackfillsNotice: React.FC<{partitionSetName: string}> = ({\n  partitionSetName,\n}) => {\n  const {data} = useQuery<RunningBackfillsNoticeQuery, RunningBackfillsNoticeQueryVariables>(\n    RUNNING_BACKFILLS_NOTICE_QUERY,\n  );\n\n  const runningBackfills =\n    data?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n      ? data.partitionBackfillsOrError.results\n      : [];\n\n  const runningBackfillCount = runningBackfills.filter(\n    (r) => r.partitionSetName === partitionSetName,\n  ).length;\n\n  if (runningBackfillCount === 0) {\n    return <span />;\n  }\n  return (\n    <div style={{color: Colors.Gray400, maxWidth: 350}}>\n      {runningBackfillCount === 1\n        ? 'Note: A backfill has been requested for this job and may be refreshing displayed assets. '\n        : `Note: ${runningBackfillCount} backfills have been requested for this job and may be refreshing displayed assets. `}\n      <Link to=\"/overview/backfills\" target=\"_blank\">\n        <Box flex={{gap: 4, display: 'inline-flex', alignItems: 'center'}}>\n          View <Icon name=\"open_in_new\" color={Colors.Link} />\n        </Box>\n      </Link>\n    </div>\n  );\n};\n\nconst RUNNING_BACKFILLS_NOTICE_QUERY = gql`\n  query RunningBackfillsNoticeQuery {\n    partitionBackfillsOrError(status: REQUESTED) {\n      __typename\n      ... on PartitionBackfills {\n        results {\n          partitionSetName\n          backfillId\n        }\n      }\n    }\n  }\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  DialogHeader,\n  Tooltip,\n  Alert,\n} from '@dagster-io/ui';\nimport reject from 'lodash/reject';\nimport React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {PartitionHealthSummary} from '../assets/PartitionHealthSummary';\nimport {AssetKey} from '../assets/types';\nimport {LaunchBackfillParams} from '../graphql/types';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfillMutation,\n  LaunchPartitionBackfillMutationVariables,\n} from '../instance/types/BackfillUtils.types';\nimport {CONFIG_PARTITION_SELECTION_QUERY} from '../launchpad/ConfigEditorConfigPicker';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {TagContainer, TagEditor} from '../launchpad/TagEditor';\nimport {\n  ConfigPartitionSelectionQuery,\n  ConfigPartitionSelectionQueryVariables,\n} from '../launchpad/types/ConfigEditorConfigPicker.types';\nimport {\n  DaemonNotRunningAlert,\n  DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT,\n  showBackfillErrorToast,\n  showBackfillSuccessToast,\n  UsingDefaultLauncherAlert,\n  USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT,\n} from '../partitions/BackfillMessaging';\nimport {Section} from '../partitions/BackfillSelector';\nimport {DimensionRangeWizard} from '../partitions/DimensionRangeWizard';\nimport {PartitionStateCheckboxes} from '../partitions/PartitionStateCheckboxes';\nimport {PartitionState} from '../partitions/PartitionStatus';\nimport {assembleIntoSpans, stringForSpan} from '../partitions/SpanRepresentation';\nimport {RepoAddress} from '../workspace/types';\n\nimport {executionParamsForAssetJob} from './LaunchAssetExecutionButton';\nimport {explodePartitionKeysInSelection, mergedAssetHealth} from './MultipartitioningSupport';\nimport {RunningBackfillsNotice} from './RunningBackfillsNotice';\nimport {PartitionDefinitionForLaunchAssetFragment} from './types/LaunchAssetExecutionButton.types';\nimport {usePartitionDimensionSelections} from './usePartitionDimensionSelections';\nimport {PartitionDimensionSelection, usePartitionHealthData} from './usePartitionHealthData';\nimport {usePartitionNameForPipeline} from './usePartitionNameForPipeline';\n\ninterface Props {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  repoAddress: RepoAddress;\n  assetJobName: string;\n  assets: {\n    assetKey: AssetKey;\n    opNames: string[];\n    partitionDefinition: PartitionDefinitionForLaunchAssetFragment | null;\n  }[];\n  upstreamAssetKeys: AssetKey[]; // single layer of upstream dependencies\n}\n\nexport const LaunchAssetChoosePartitionsDialog: React.FC<Props> = (props) => {\n  const title = `Launch runs to materialize ${\n    props.assets.length > 1\n      ? `${props.assets.length} assets`\n      : displayNameForAssetKey(props.assets[0].assetKey)\n  }`;\n\n  return (\n    <Dialog\n      style={{width: 700}}\n      isOpen={props.open}\n      canEscapeKeyClose\n      canOutsideClickClose\n      onClose={() => props.setOpen(false)}\n    >\n      <DialogHeader icon=\"layers\" label={title} />\n      <LaunchAssetChoosePartitionsDialogBody {...props} />\n    </Dialog>\n  );\n};\n\n// Note: This dialog loads a lot of data - the body is broken into a separate\n// component so we can be *sure* the hooks won't load data until it's opened.\n// (<Dialog> does not render it's children until open=true)\n//\n// Additionally, we want the dialog to reset when it's closed and re-opened so\n// that partition health, etc. is up-to-date.\n//\nconst LaunchAssetChoosePartitionsDialogBody: React.FC<Props> = ({\n  setOpen,\n  assets,\n  repoAddress,\n  assetJobName,\n  upstreamAssetKeys,\n}) => {\n  const partitionedAssets = assets.filter((a) => !!a.partitionDefinition);\n\n  const {canLaunchPartitionBackfill} = usePermissionsForLocation(repoAddress.location);\n  const [launching, setLaunching] = React.useState(false);\n\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n\n  const [previewCount, setPreviewCount] = React.useState(0);\n  const morePreviewsCount = partitionedAssets.length - previewCount;\n\n  const assetHealth = usePartitionHealthData(partitionedAssets.map((a) => a.assetKey));\n  const mergedHealth = React.useMemo(() => mergedAssetHealth(assetHealth), [assetHealth]);\n\n  const knownDimensions = partitionedAssets[0].partitionDefinition?.dimensionTypes || [];\n  const [selections, setSelections] = usePartitionDimensionSelections({\n    knownDimensionNames: knownDimensions.map((d) => d.name),\n    modifyQueryString: false,\n    assetHealth: mergedHealth,\n  });\n\n  const [stateFilters, setStateFilters] = React.useState<PartitionState[]>([\n    PartitionState.MISSING,\n  ]);\n\n  const keysInSelection = React.useMemo(\n    () =>\n      explodePartitionKeysInSelection(selections, (dimensionKeys: string[]) => {\n        // Note: If the merged asset health for a given partition is \"partial\", we want\n        // to group it into \"missing\" within the backfill UI. We don't have a fine-grained\n        // way to run just the missing assets within the partition.\n        //\n        // The alternative would be to offer a \"Partial\" checkbox alongside \"Missing\",\n        // but defining missing as \"missing for /any/ asset I've selected\" is simpler.\n        //\n        const state = mergedHealth.stateForKey(dimensionKeys);\n        return state === PartitionState.SUCCESS_MISSING ? PartitionState.MISSING : state;\n      }),\n    [selections, mergedHealth],\n  );\n\n  const keysFiltered = React.useMemo(\n    () => keysInSelection.filter((key) => stateFilters.includes(key.state)),\n    [keysInSelection, stateFilters],\n  );\n\n  const client = useApolloClient();\n  const history = useHistory();\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const instanceResult = useQuery(LAUNCH_ASSET_CHOOSE_PARTITIONS_QUERY);\n  const instance = instanceResult.data?.instance;\n\n  // Find the partition set name. This seems like a bit of a hack, unclear\n  // how it would work if there were two different partition spaces in the asset job\n  const {partitionSet, partitionSetError} = usePartitionNameForPipeline(repoAddress, assetJobName);\n\n  const onLaunch = async () => {\n    setLaunching(true);\n\n    if (!partitionSet) {\n      setLaunching(false);\n      showCustomAlert({\n        title: `Unable to find partition set on ${assetJobName}`,\n        body: partitionSetError ? <PythonErrorInfo error={partitionSetError} /> : <span />,\n      });\n      return;\n    }\n\n    if (keysFiltered.length === 1) {\n      const {data: tagAndConfigData} = await client.query<\n        ConfigPartitionSelectionQuery,\n        ConfigPartitionSelectionQueryVariables\n      >({\n        query: CONFIG_PARTITION_SELECTION_QUERY,\n        fetchPolicy: 'network-only',\n        variables: {\n          repositorySelector: {\n            repositoryLocationName: repoAddress.location,\n            repositoryName: repoAddress.name,\n          },\n          partitionSetName: partitionSet.name,\n          partitionName: keysFiltered[0].partitionKey,\n        },\n      });\n\n      if (\n        !tagAndConfigData ||\n        !tagAndConfigData.partitionSetOrError ||\n        tagAndConfigData.partitionSetOrError.__typename !== 'PartitionSet' ||\n        !tagAndConfigData.partitionSetOrError.partition\n      ) {\n        return;\n      }\n\n      const {partition} = tagAndConfigData.partitionSetOrError;\n\n      if (partition.tagsOrError.__typename === 'PythonError') {\n        setLaunching(false);\n        showCustomAlert({\n          title: 'Unable to load tags',\n          body: <PythonErrorInfo error={partition.tagsOrError} />,\n        });\n        return;\n      }\n      if (partition.runConfigOrError.__typename === 'PythonError') {\n        setLaunching(false);\n        showCustomAlert({\n          title: 'Unable to load tags',\n          body: <PythonErrorInfo error={partition.runConfigOrError} />,\n        });\n        return;\n      }\n\n      const allTags = [...partition.tagsOrError.results, ...tags];\n      const runConfigData = partition.runConfigOrError.yaml || '';\n\n      const result = await launchWithTelemetry(\n        {\n          executionParams: {\n            ...executionParamsForAssetJob(repoAddress, assetJobName, assets, allTags),\n            runConfigData,\n            mode: partition.mode,\n          },\n        },\n        'toast',\n      );\n\n      setLaunching(false);\n      if (result?.__typename === 'LaunchRunSuccess') {\n        setOpen(false);\n      }\n    } else {\n      const selectorUnlessGraph:\n        | LaunchBackfillParams['selector']\n        | undefined = !isHiddenAssetGroupJob(assetJobName)\n        ? {\n            partitionSetName: partitionSet.name,\n            repositorySelector: {\n              repositoryLocationName: repoAddress.location,\n              repositoryName: repoAddress.name,\n            },\n          }\n        : undefined;\n\n      const {data: launchBackfillData} = await client.mutate<\n        LaunchPartitionBackfillMutation,\n        LaunchPartitionBackfillMutationVariables\n      >({\n        mutation: LAUNCH_PARTITION_BACKFILL_MUTATION,\n        variables: {\n          backfillParams: {\n            selector: selectorUnlessGraph,\n            assetSelection: assets.map((a) => ({path: a.assetKey.path})),\n            partitionNames: keysFiltered.map((k) => k.partitionKey),\n            fromFailure: false,\n            tags,\n          },\n        },\n      });\n\n      setLaunching(false);\n\n      if (launchBackfillData?.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n        showBackfillSuccessToast(history, launchBackfillData?.launchPartitionBackfill.backfillId);\n        setOpen(false);\n      } else {\n        showBackfillErrorToast(launchBackfillData);\n      }\n    }\n  };\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            Select partitions to materialize. Click and drag to select a range on the timeline.\n          </Box>\n\n          {selections.map((range, idx) => (\n            <DimensionRangeWizard\n              key={range.dimension.name}\n              partitionKeys={range.dimension.partitionKeys}\n              partitionStateForKey={(dimensionKey) =>\n                mergedHealth.stateForSingleDimension(\n                  idx,\n                  dimensionKey,\n                  selections.length === 2 ? selections[1 - idx].selectedKeys : undefined,\n                )\n              }\n              selected={range.selectedKeys}\n              setSelected={(selectedKeys) =>\n                setSelections(\n                  selections.map((r) =>\n                    r.dimension === range.dimension ? {...r, selectedKeys} : r,\n                  ),\n                )\n              }\n            />\n          ))}\n          <PartitionStateCheckboxes\n            partitionKeysForCounts={keysInSelection}\n            allowed={[PartitionState.MISSING, PartitionState.SUCCESS]}\n            value={stateFilters}\n            onChange={setStateFilters}\n          />\n        </Box>\n\n        {previewCount > 0 && (\n          <Box\n            margin={{top: 16}}\n            flex={{direction: 'column', gap: 8}}\n            padding={{vertical: 16, horizontal: 20}}\n            border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n            background={Colors.Gray100}\n            style={{\n              marginLeft: -20,\n              marginRight: -20,\n              overflowY: 'auto',\n              overflowX: 'visible',\n              maxHeight: '35vh',\n            }}\n          >\n            {partitionedAssets.slice(0, previewCount).map((a) => (\n              <PartitionHealthSummary\n                key={displayNameForAssetKey(a.assetKey)}\n                assetKey={a.assetKey}\n                showAssetKey\n                data={assetHealth}\n                selections={selections}\n              />\n            ))}\n            {morePreviewsCount > 0 && (\n              <Box margin={{vertical: 8}}>\n                <ButtonLink onClick={() => setPreviewCount(partitionedAssets.length)}>\n                  Show {morePreviewsCount} more {morePreviewsCount > 1 ? 'previews' : 'preview'}\n                </ButtonLink>\n              </Box>\n            )}\n          </Box>\n        )}\n\n        {previewCount === 0 && partitionedAssets.length > 1 && (\n          <Box margin={{top: 16, bottom: 8}}>\n            <ButtonLink onClick={() => setPreviewCount(5)}>\n              Show per-asset partition health\n            </ButtonLink>\n          </Box>\n        )}\n\n        <UpstreamUnavailableWarning\n          upstreamAssetKeys={upstreamAssetKeys}\n          selections={selections}\n          setSelections={setSelections}\n        />\n\n        <Box flex={{direction: 'column', gap: 16}} style={{marginTop: 24}}>\n          <Section title=\"Tags\">\n            <TagEditor\n              tagsFromSession={tags}\n              onChange={setTags}\n              open={tagEditorOpen}\n              onRequestClose={() => setTagEditorOpen(false)}\n            />\n            {tags.length ? (\n              <div style={{border: `1px solid ${Colors.Gray300}`, borderRadius: 8, padding: 3}}>\n                <TagContainer tagsFromSession={tags} onRequestEdit={() => setTagEditorOpen(true)} />\n              </div>\n            ) : (\n              <div>\n                <Button onClick={() => setTagEditorOpen(true)}>\n                  {keysFiltered.length > 1 ? 'Add tags to backfill runs' : 'Add tags'}\n                </Button>\n              </div>\n            )}\n          </Section>\n\n          {instance && keysFiltered.length > 1 && <DaemonNotRunningAlert instance={instance} />}\n\n          {instance && keysFiltered.length > 1 && <UsingDefaultLauncherAlert instance={instance} />}\n        </Box>\n      </DialogBody>\n\n      <DialogFooter\n        left={partitionSet && <RunningBackfillsNotice partitionSetName={partitionSet.name} />}\n      >\n        <Button intent=\"none\" onClick={() => setOpen(false)}>\n          Cancel\n        </Button>\n        {keysFiltered.length !== 1 && !canLaunchPartitionBackfill.enabled ? (\n          <Tooltip content={canLaunchPartitionBackfill.disabledReason}>\n            <Button disabled>{`Launch ${keysFiltered.length}-Run Backfill`}</Button>\n          </Tooltip>\n        ) : (\n          <Button\n            intent=\"primary\"\n            onClick={onLaunch}\n            disabled={keysFiltered.length === 0}\n            loading={launching}\n          >\n            {launching\n              ? 'Launching...'\n              : keysFiltered.length !== 1\n              ? `Launch ${keysFiltered.length}-Run Backfill`\n              : `Launch 1 Run`}\n          </Button>\n        )}\n      </DialogFooter>\n    </>\n  );\n};\n\nconst UpstreamUnavailableWarning: React.FC<{\n  upstreamAssetKeys: AssetKey[];\n  selections: PartitionDimensionSelection[];\n  setSelections: (next: PartitionDimensionSelection[]) => void;\n}> = ({upstreamAssetKeys, selections, setSelections}) => {\n  // We want to warn if an immediately upstream asset 1) has the same partitioning and\n  // 2) is missing materializations for keys in `allSelected`. We only offer this feature\n  // for single-dimensional partitioned assets because it's difficult to express the\n  // unavailable partitions in the multi-dimensional case and our \"two range inputs\" won't\n  // allow us to remove missing individual pairs.\n  const upstreamAssetHealth = usePartitionHealthData(upstreamAssetKeys);\n  if (upstreamAssetHealth.length === 0) {\n    return <span />;\n  }\n\n  const upstreamUnavailable = (singleDimensionKey: string) =>\n    upstreamAssetHealth.some((a) => {\n      // If the key is not undefined, it's present in the partition key space of the asset\n      return a.stateForKey([singleDimensionKey]) === PartitionState.MISSING;\n    });\n\n  const upstreamUnavailableSpans =\n    selections.length === 1\n      ? assembleIntoSpans(selections[0].selectedKeys, upstreamUnavailable).filter(\n          (s) => s.status === true,\n        )\n      : [];\n\n  const onRemoveUpstreamUnavailable = () => {\n    if (selections.length > 1) {\n      throw new Error('Assertion failed, this feature is only available for 1 dimensional assets');\n    }\n    setSelections([\n      {...selections[0], selectedKeys: reject(selections[0].selectedKeys, upstreamUnavailable)},\n    ]);\n  };\n\n  if (upstreamUnavailableSpans.length === 0) {\n    return <span />;\n  }\n\n  return (\n    <Box margin={{top: 16}}>\n      <Alert\n        intent=\"warning\"\n        title=\"Upstream data missing\"\n        description={\n          <>\n            {upstreamUnavailableSpans\n              .map((span) => stringForSpan(span, selections[0].selectedKeys))\n              .join(', ')}\n            {\n              ' cannot be materialized because upstream materializations are missing. Consider materializing upstream assets or '\n            }\n            <ButtonLink underline=\"always\" onClick={onRemoveUpstreamUnavailable}>\n              remove these partitions\n            </ButtonLink>\n            {` to avoid failures.`}\n          </>\n        }\n      />\n    </Box>\n  );\n};\n\nconst LAUNCH_ASSET_CHOOSE_PARTITIONS_QUERY = gql`\n  query LaunchAssetChoosePartitionsQuery {\n    instance {\n      ...DaemonNotRunningAlertInstanceFragment\n      ...UsingDefaultLauncherAlertInstanceFragment\n    }\n  }\n\n  ${DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT}\n  ${USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT}\n`;\n","import {ApolloClient, gql, useApolloClient} from '@apollo/client';\nimport {Box, Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui';\nimport pick from 'lodash/pick';\nimport uniq from 'lodash/uniq';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {usePermissionsDEPRECATED} from '../app/Permissions';\nimport {\n  displayNameForAssetKey,\n  isHiddenAssetGroupJob,\n  LiveData,\n  toGraphId,\n} from '../asset-graph/Utils';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {AssetLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {DagsterTag} from '../runs/RunTag';\nimport {LaunchPipelineExecutionMutationVariables} from '../runs/types/RunUtils.types';\nimport {CONFIG_TYPE_SCHEMA_FRAGMENT} from '../typeexplorer/ConfigTypeSchema';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from './AssetConfig';\nimport {MULTIPLE_DEFINITIONS_WARNING} from './AssetDefinedInMultipleReposNotice';\nimport {LaunchAssetChoosePartitionsDialog} from './LaunchAssetChoosePartitionsDialog';\nimport {isAssetMissing, isAssetStale} from './StaleTag';\nimport {AssetKey} from './types';\nimport {\n  LaunchAssetExecutionAssetNodeFragment,\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n  LaunchAssetLoaderResourceQuery,\n  LaunchAssetLoaderResourceQueryVariables,\n  LaunchAssetCheckUpstreamQuery,\n  LaunchAssetCheckUpstreamQueryVariables,\n} from './types/LaunchAssetExecutionButton.types';\n\ntype LaunchAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'launchpad';\n      jobName: string;\n      sessionPresets: Partial<IExecutionSession>;\n      repoAddress: RepoAddress;\n    }\n  | {\n      type: 'partitions';\n      jobName: string;\n      assets: LaunchAssetExecutionAssetNodeFragment[];\n      upstreamAssetKeys: AssetKey[];\n      repoAddress: RepoAddress;\n    }\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionMutationVariables['executionParams'];\n    };\n\nconst countOrBlank = (k: unknown[]) => (k.length > 1 ? ` (${k.length})` : '');\n\ntype Asset =\n  | {assetKey: AssetKey; partitionDefinition: {__typename: string} | null; isSource: boolean}\n  | {assetKey: AssetKey; isPartitioned: boolean; isSource: boolean};\n\ntype AssetsInScope = {all: Asset[]; skipAllTerm?: boolean} | {selected: Asset[]};\n\ntype LaunchOption = {assetKeys: AssetKey[]; label: string};\n\nconst isAnyPartitioned = (assets: Asset[]) =>\n  assets.some(\n    (a) =>\n      ('partitionDefinition' in a && !!a.partitionDefinition) ||\n      ('isPartitioned' in a && a.isPartitioned),\n  );\n\nfunction optionsForButton(scope: AssetsInScope, liveDataForStale?: LiveData): LaunchOption[] {\n  // If you pass a set of selected assets, we always show just one option\n  // to materialize that selection.\n  if ('selected' in scope) {\n    const assets = scope.selected.filter((a) => !a.isSource);\n    return [\n      {\n        assetKeys: assets.map((a) => a.assetKey),\n        label: `Materialize selected${countOrBlank(assets)}${isAnyPartitioned(assets) ? '…' : ''}`,\n      },\n    ];\n  }\n\n  const options: LaunchOption[] = [];\n  const assets = scope.all.filter((a) => !a.isSource);\n\n  options.push({\n    assetKeys: assets.map((a) => a.assetKey),\n    label:\n      assets.length > 1 && !scope.skipAllTerm\n        ? `Materialize all${isAnyPartitioned(assets) ? '…' : ''}`\n        : `Materialize${isAnyPartitioned(assets) ? '…' : ''}`,\n  });\n\n  if (liveDataForStale) {\n    const missingOrStale = assets.filter(\n      (a) =>\n        isAssetMissing(liveDataForStale[toGraphId(a.assetKey)]) ||\n        isAssetStale(liveDataForStale[toGraphId(a.assetKey)]),\n    );\n\n    options.push({\n      assetKeys: missingOrStale.map((a) => a.assetKey),\n      label: `Materialize stale and missing${countOrBlank(missingOrStale)}`,\n    });\n  }\n\n  return options;\n}\n\nexport const LaunchAssetExecutionButton: React.FC<{\n  scope: AssetsInScope;\n  liveDataForStale?: LiveData; // For \"stale\" dropdown options\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({scope, liveDataForStale, preferredJobName, intent = 'primary'}) => {\n  const {canLaunchPipelineExecution} = usePermissionsDEPRECATED();\n  const {onClick, loading, launchpadElement} = useMaterializationAction(preferredJobName);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const options = optionsForButton(scope, liveDataForStale);\n  const firstOption = options[0];\n\n  const {MaterializeButton} = useLaunchPadHooks();\n\n  if (!firstOption) {\n    return <span />;\n  }\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return (\n      <Tooltip content=\"You do not have permission to materialize assets\" position=\"bottom-right\">\n        <Button intent={intent} icon={<Icon name=\"materialization\" />} disabled>\n          {firstOption.label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Box flex={{alignItems: 'center'}}>\n        <Tooltip\n          content=\"Shift+click to add configuration\"\n          position=\"bottom-right\"\n          useDisabledButtonTooltipFix\n        >\n          <MaterializeButton\n            intent={intent}\n            onClick={(e) => onClick(firstOption.assetKeys, e)}\n            style={\n              options.length > 1\n                ? {\n                    borderTopRightRadius: 0,\n                    borderBottomRightRadius: 0,\n                    borderRight: `1px solid rgba(255,255,255,0.2)`,\n                  }\n                : {}\n            }\n            disabled={!firstOption.assetKeys.length}\n            icon={loading ? <Spinner purpose=\"body-text\" /> : <Icon name=\"materialization\" />}\n          >\n            {firstOption.label}\n          </MaterializeButton>\n        </Tooltip>\n        {options.length > 1 && (\n          <Popover\n            isOpen={isOpen}\n            onInteraction={(nextOpen) => setIsOpen(nextOpen)}\n            position=\"bottom-right\"\n            content={\n              <Menu>\n                {options.slice(1).map((option) => (\n                  <MenuItem\n                    key={option.label}\n                    text={option.label}\n                    icon=\"materialization\"\n                    disabled={option.assetKeys.length === 0}\n                    onClick={(e) => onClick(option.assetKeys, e)}\n                  />\n                ))}\n              </Menu>\n            }\n          >\n            <Button\n              role=\"button\"\n              style={{minWidth: 'initial', borderTopLeftRadius: 0, borderBottomLeftRadius: 0}}\n              icon={<Icon name=\"arrow_drop_down\" />}\n              intent={intent}\n            />\n          </Popover>\n        )}\n      </Box>\n      {launchpadElement}\n    </>\n  );\n};\n\nexport const useMaterializationAction = (preferredJobName?: string) => {\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const client = useApolloClient();\n  const confirm = useConfirmation();\n\n  const [state, setState] = React.useState<LaunchAssetsState>({type: 'none'});\n\n  const onClick = async (assetKeys: AssetKey[], e: React.MouseEvent<any>) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: assetKeys.map(({path}) => ({path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey;\n\n    const next = await stateForLaunchingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to Materialize',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    const missing = await upstreamAssetsWithNoMaterializations(client, assets);\n    if (missing.length) {\n      setState({type: 'none'});\n      try {\n        await confirm({\n          title: 'Are you sure?',\n          description: (\n            <>\n              <div>\n                Materializing these assets may fail because the upstream assets listed below have\n                not been materialized yet.\n              </div>\n              <ul>\n                {missing.map((assetKey, idx) => (\n                  <li key={idx}>{displayNameForAssetKey(assetKey)}</li>\n                ))}\n              </ul>\n            </>\n          ),\n        });\n        setState({type: 'loading'});\n      } catch {\n        return;\n      }\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  const launchpad = () => {\n    if (state.type === 'launchpad') {\n      return (\n        <AssetLaunchpad\n          assetJobName={state.jobName}\n          repoAddress={state.repoAddress}\n          sessionPresets={state.sessionPresets}\n          open={true}\n          setOpen={() => setState({type: 'none'})}\n        />\n      );\n    }\n\n    if (state.type === 'partitions') {\n      return (\n        <LaunchAssetChoosePartitionsDialog\n          assets={state.assets}\n          upstreamAssetKeys={state.upstreamAssetKeys}\n          repoAddress={state.repoAddress}\n          assetJobName={state.jobName}\n          open={true}\n          setOpen={() => setState({type: 'none'})}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return {onClick, loading: state.type === 'loading', launchpadElement: launchpad()};\n};\n\nasync function stateForLaunchingAssets(\n  client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<LaunchAssetsState> {\n  if (assets.some((x) => x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more source assets are selected and cannot be materialized.',\n    };\n  }\n\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (\n    !assets.every(\n      (a) =>\n        a.repository.name === repoAddress.name &&\n        a.repository.location.name === repoAddress.location,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: `Assets must be in ${repoName} to be materialized together.`,\n    };\n  }\n\n  const partitionDefinition = assets.find((a) => !!a.partitionDefinition)?.partitionDefinition;\n  if (\n    assets.some(\n      (a) =>\n        a.partitionDefinition &&\n        partitionDefinition &&\n        a.partitionDefinition.description !== partitionDefinition.description,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: 'Assets must share a partition definition to be materialized together.',\n    };\n  }\n\n  const jobName = getCommonJob(assets, preferredJobName);\n  if (!jobName) {\n    return {\n      type: 'error',\n      error: 'Assets must be in the same job to be materialized together.',\n    };\n  }\n\n  const resourceResult = await client.query<\n    LaunchAssetLoaderResourceQuery,\n    LaunchAssetLoaderResourceQueryVariables\n  >({\n    query: LAUNCH_ASSET_LOADER_RESOURCE_QUERY,\n    variables: {\n      pipelineName: jobName,\n      repositoryName: assets[0].repository.name,\n      repositoryLocationName: assets[0].repository.location.name,\n    },\n  });\n  const pipeline = resourceResult.data.pipelineOrError;\n  if (pipeline.__typename !== 'Pipeline') {\n    return {type: 'error', error: pipeline.message};\n  }\n  const partitionSets = resourceResult.data.partitionSetsOrError;\n  if (partitionSets.__typename !== 'PartitionSets') {\n    return {type: 'error', error: partitionSets.message};\n  }\n\n  const requiredResourceKeys = assets.flatMap((a) => a.requiredResources.map((r) => r.resourceKey));\n  const resources = pipeline.modes[0].resources.filter((r) =>\n    requiredResourceKeys.includes(r.name),\n  );\n  const anyResourcesHaveRequiredConfig = resources.some((r) => r.configField?.isRequired);\n  const anyAssetsHaveRequiredConfig = assets.some((a) => a.configField?.isRequired);\n\n  // Note: If a partition definition is present and we're launching a user-defined job,\n  // we assume that any required config will be provided by a PartitionedConfig function\n  // attached to the job. Otherwise backfills won't work and you'll know to add one!\n  const assumeConfigPresent = partitionDefinition && !isHiddenAssetGroupJob(jobName);\n\n  const needLaunchpad =\n    !assumeConfigPresent && (anyAssetsHaveRequiredConfig || anyResourcesHaveRequiredConfig);\n\n  if (needLaunchpad || forceLaunchpad) {\n    const assetOpNames = assets.flatMap((a) => a.opNames || []);\n    return {\n      type: 'launchpad',\n      jobName,\n      repoAddress,\n      sessionPresets: {\n        flattenGraphs: true,\n        assetSelection: assets.map((a) => ({assetKey: a.assetKey, opNames: a.opNames})),\n        solidSelectionQuery: assetOpNames.map((name) => `\"${name}\"`).join(', '),\n        base: partitionSets.results.length\n          ? {\n              partitionsSetName: partitionSets.results[0].name,\n              partitionName: null,\n              tags: [],\n            }\n          : undefined,\n      },\n    };\n  }\n  if (partitionDefinition) {\n    const upstreamAssetKeys = getUpstreamAssetKeys(assets);\n    return {\n      type: 'partitions',\n      assets,\n      jobName,\n      repoAddress,\n      upstreamAssetKeys,\n    };\n  }\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n\nexport function getCommonJob(\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  preferredJobName?: string,\n) {\n  const everyAssetHasJob = (jobName: string) => assets.every((a) => a.jobNames.includes(jobName));\n  const jobsInCommon = assets[0] ? assets[0].jobNames.filter(everyAssetHasJob) : [];\n  return jobsInCommon.find((name) => name === preferredJobName) || jobsInCommon[0] || null;\n}\n\nfunction getUpstreamAssetKeys(assets: LaunchAssetExecutionAssetNodeFragment[]) {\n  const assetKeys = new Set(assets.map((a) => JSON.stringify({path: a.assetKey.path})));\n  return uniq(assets.flatMap((a) => a.dependencyKeys.map(({path}) => JSON.stringify({path}))))\n    .filter((key) => !assetKeys.has(key))\n    .map((key) => JSON.parse(key));\n}\n\nasync function upstreamAssetsWithNoMaterializations(\n  client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n) {\n  const upstreamAssetKeys = getUpstreamAssetKeys(assets);\n  if (upstreamAssetKeys.length === 0) {\n    return [];\n  }\n\n  const result = await client.query<\n    LaunchAssetCheckUpstreamQuery,\n    LaunchAssetCheckUpstreamQueryVariables\n  >({\n    query: LAUNCH_ASSET_CHECK_UPSTREAM_QUERY,\n    variables: {assetKeys: upstreamAssetKeys},\n  });\n\n  return result.data.assetNodes\n    .filter((a) => !a.isSource && a.assetMaterializations.length === 0)\n    .map((a) => a.assetKey);\n}\n\nexport function executionParamsForAssetJob(\n  repoAddress: RepoAddress,\n  jobName: string,\n  assets: {assetKey: AssetKey; opNames: string[]}[],\n  tags: {key: string; value: string}[],\n): LaunchPipelineExecutionMutationVariables['executionParams'] {\n  return {\n    mode: 'default',\n    executionMetadata: {\n      tags: [\n        ...tags.map((t) => pick(t, ['key', 'value'])),\n        {\n          key: DagsterTag.StepSelection,\n          value: assets.flatMap((o) => o.opNames).join(','),\n        },\n      ],\n    },\n    runConfigData: '{}',\n    selector: {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n      pipelineName: jobName,\n      assetSelection: assets.map((asset) => ({\n        path: asset.assetKey.path,\n      })),\n    },\n  };\n}\n\nexport function buildAssetCollisionsAlert(data: LaunchAssetLoaderQuery) {\n  return {\n    title: MULTIPLE_DEFINITIONS_WARNING,\n    body: (\n      <div style={{overflow: 'auto'}}>\n        One or more of the selected assets are defined in multiple code locations. Rename these\n        assets to avoid collisions and then try again.\n        <ul>\n          {data.assetNodeDefinitionCollisions.map((collision, idx) => (\n            <li key={idx}>\n              <strong>{displayNameForAssetKey(collision.assetKey)}</strong>\n              <ul>\n                {collision.repositories.map((r, ridx) => (\n                  <li key={ridx}>\n                    {repoAddressAsHumanString({name: r.name, location: r.location.name})}\n                  </li>\n                ))}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ),\n  };\n}\n\nexport const LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT = gql`\n  fragment LaunchAssetExecutionAssetNodeFragment on AssetNode {\n    id\n    opNames\n    jobNames\n    graphName\n    partitionDefinition {\n      ...PartitionDefinitionForLaunchAsset\n    }\n    isObservable\n    isSource\n    assetKey {\n      path\n    }\n    dependencyKeys {\n      path\n    }\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    requiredResources {\n      resourceKey\n    }\n    ...AssetNodeConfigFragment\n  }\n\n  fragment PartitionDefinitionForLaunchAsset on PartitionDefinition {\n    description\n    dimensionTypes {\n      name\n    }\n  }\n\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n`;\n\nexport const LAUNCH_ASSET_LOADER_QUERY = gql`\n  query LaunchAssetLoaderQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys) {\n      id\n      ...LaunchAssetExecutionAssetNodeFragment\n    }\n    assetNodeDefinitionCollisions(assetKeys: $assetKeys) {\n      assetKey {\n        path\n      }\n      repositories {\n        id\n        name\n        location {\n          id\n          name\n        }\n      }\n    }\n  }\n\n  ${LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT}\n`;\n\nconst LAUNCH_ASSET_LOADER_RESOURCE_QUERY = gql`\n  query LaunchAssetLoaderResourceQuery(\n    $pipelineName: String!\n    $repositoryLocationName: String!\n    $repositoryName: String!\n  ) {\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PythonError {\n        message\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PartitionSets {\n        results {\n          id\n          name\n        }\n      }\n    }\n\n    pipelineOrError(\n      params: {\n        pipelineName: $pipelineName\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PythonError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on Pipeline {\n        id\n        modes {\n          id\n          resources {\n            name\n            description\n            configField {\n              name\n              isRequired\n              configType {\n                ...ConfigTypeSchemaFragment\n                recursiveConfigTypes {\n                  ...ConfigTypeSchemaFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${CONFIG_TYPE_SCHEMA_FRAGMENT}\n`;\n\nconst LAUNCH_ASSET_CHECK_UPSTREAM_QUERY = gql`\n  query LaunchAssetCheckUpstreamQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys, loadMaterializations: true) {\n      id\n      assetKey {\n        path\n      }\n      isSource\n      opNames\n      graphName\n      assetMaterializations(limit: 1) {\n        runId\n      }\n    }\n  }\n`;\n","import {PartitionState} from '../partitions/PartitionStatus';\n\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  PartitionDimensionSelection,\n} from './usePartitionHealthData';\n\nexport function isTimeseriesDimension(dimension: PartitionHealthDimension) {\n  return isTimeseriesPartition(dimension.partitionKeys[0]);\n}\nexport function isTimeseriesPartition(aPartitionKey = '') {\n  return /\\d{4}-\\d{2}-\\d{2}/.test(aPartitionKey); // cheak trick for now\n}\n\nexport function mergedAssetHealth(\n  assetHealth: PartitionHealthData[],\n): {\n  dimensions: PartitionHealthDimension[];\n  stateForKey: (dimensionKeys: string[]) => PartitionState;\n  stateForPartialKey: (dimensionKeys: string[]) => PartitionState;\n  stateForSingleDimension: (\n    dimensionIdx: number,\n    dimensionKey: string,\n    otherDimensionSelectedKeys?: string[],\n  ) => PartitionState;\n} {\n  if (!assetHealth.length) {\n    return {\n      dimensions: [],\n      stateForKey: () => PartitionState.MISSING,\n      stateForPartialKey: () => PartitionState.MISSING,\n      stateForSingleDimension: () => PartitionState.MISSING,\n    };\n  }\n\n  const dimensions = assetHealth[0].dimensions;\n\n  if (!assetHealth.every((h) => h.dimensions.length === dimensions.length)) {\n    throw new Error('Attempting to show unified asset health for assets with different dimensions');\n  }\n\n  if (\n    !assetHealth.every((h) =>\n      h.dimensions.every(\n        (dim, idx) => dim.partitionKeys.length === dimensions[idx].partitionKeys.length,\n      ),\n    )\n  ) {\n    throw new Error(\n      'Attempting to show unified asset health for assets with dimension of different lengths',\n    );\n  }\n\n  return {\n    dimensions: dimensions.map((dimension) => ({\n      name: dimension.name,\n      partitionKeys: dimension.partitionKeys,\n    })),\n    stateForKey: (dimensionKeys: string[]) =>\n      mergedStates(assetHealth.map((health) => health.stateForKey(dimensionKeys))),\n    stateForPartialKey: (dimensionKeys: string[]) =>\n      mergedStates(assetHealth.map((health) => health.stateForPartialKey(dimensionKeys))),\n    stateForSingleDimension: (\n      dimensionIdx: number,\n      dimensionKey: string,\n      otherDimensionSelectedKeys?: string[],\n    ) =>\n      mergedStates(\n        assetHealth.map((health) =>\n          health.stateForSingleDimension(dimensionIdx, dimensionKey, otherDimensionSelectedKeys),\n        ),\n      ),\n  };\n}\n\nexport function mergedStates(states: PartitionState[]): PartitionState {\n  if (states.includes(PartitionState.MISSING) && states.includes(PartitionState.SUCCESS)) {\n    return PartitionState.SUCCESS_MISSING;\n  } else {\n    return states[0];\n  }\n}\n\nexport function explodePartitionKeysInSelection(\n  selections: PartitionDimensionSelection[],\n  stateForKey: (dimensionKeys: string[]) => PartitionState,\n) {\n  if (selections.length === 0) {\n    return [];\n  }\n  if (selections.length === 1) {\n    return selections[0].selectedKeys.map((key) => {\n      return {\n        partitionKey: key,\n        state: stateForKey([key]),\n      };\n    });\n  }\n  if (selections.length === 2) {\n    const all: {partitionKey: string; state: PartitionState}[] = [];\n    for (const key of selections[0].selectedKeys) {\n      for (const subkey of selections[1].selectedKeys) {\n        all.push({\n          partitionKey: `${key}|${subkey}`,\n          state: stateForKey([key, subkey]),\n        });\n      }\n    }\n    return all;\n  }\n\n  throw new Error('Unsupported >2 partitions defined');\n}\n\nexport const placeholderDimensionSelection = (name: string): PartitionDimensionSelection => ({\n  dimension: {name, partitionKeys: []},\n  selectedKeys: [],\n  selectedRanges: [],\n});\n","import {Spinner, Box, Colors, Caption} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {PartitionState, PartitionStatus} from '../partitions/PartitionStatus';\n\nimport {isTimeseriesDimension} from './MultipartitioningSupport';\nimport {AssetKey} from './types';\nimport {PartitionHealthData, PartitionDimensionSelection} from './usePartitionHealthData';\n\nexport const PartitionHealthSummary: React.FC<{\n  assetKey: AssetKey;\n  showAssetKey?: boolean;\n  data: PartitionHealthData[];\n  selections?: PartitionDimensionSelection[];\n}> = ({showAssetKey, assetKey, data, selections}) => {\n  const assetData = data.find((d) => JSON.stringify(d.assetKey) === JSON.stringify(assetKey));\n\n  if (!assetData) {\n    return (\n      <div style={{minHeight: 55, position: 'relative'}}>\n        <Spinner purpose=\"section\" />\n      </div>\n    );\n  }\n\n  const keysForTotals = selections\n    ? selections.map((r) => r.selectedKeys)\n    : assetData.dimensions.map((d) => d.partitionKeys);\n\n  const total = keysForTotals.reduce((total, d) => d.length * total, 1);\n\n  const success = keysForTotals\n    .reduce(\n      (combinations, d) =>\n        combinations.length\n          ? combinations.flatMap((keys) => d.map((key) => [...keys, key]))\n          : d.map((key) => [key]),\n      [] as string[][],\n    )\n    .filter((dkeys) => assetData.stateForKey(dkeys) === PartitionState.SUCCESS).length;\n\n  return (\n    <Box color={Colors.Gray500}>\n      <Box flex={{justifyContent: 'space-between'}} style={{fontWeight: 600}} margin={{bottom: 4}}>\n        <Caption>{showAssetKey ? displayNameForAssetKey(assetKey) : 'Materialized'}</Caption>\n        <Caption>{`${success.toLocaleString()}/${total.toLocaleString()}`}</Caption>\n      </Box>\n      {assetData.dimensions.map((dimension, dimensionIdx) => (\n        <Box key={dimensionIdx} margin={{bottom: 4}}>\n          {assetData.dimensions.length > 1 && <Caption>{dimension.name}</Caption>}\n          <PartitionStatus\n            small\n            partitionNames={dimension.partitionKeys}\n            splitPartitions={!isTimeseriesDimension(dimension)}\n            selected={selections ? selections[dimensionIdx].selectedKeys : undefined}\n            partitionStateForKey={(key) =>\n              assetData.stateForSingleDimension(\n                dimensionIdx,\n                key,\n                selections?.length === 2 ? selections[1 - dimensionIdx].selectedKeys : undefined,\n              )\n            }\n          />\n        </Box>\n      ))}\n    </Box>\n  );\n};\n","import {Colors, Box, BaseTag} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\n\nexport const isAssetMissing = (liveData?: LiveDataForNode) =>\n  liveData && liveData.currentLogicalVersion === null;\n\n/* Note: \n- `projectedLogicalVersion` is null for partitioned assets\n- `currentLogicalVersion` is null for assets that have never materialized\n- `currentLogicalVersion` is INITIAL for source assets that have never been\n  observed and for assets materialized before the launch of this feature (edited) \n*/\nexport const isAssetStale = (liveData?: LiveDataForNode) =>\n  liveData &&\n  liveData.projectedLogicalVersion &&\n  liveData.currentLogicalVersion !== null &&\n  liveData.currentLogicalVersion !== 'INITIAL' &&\n  liveData.currentLogicalVersion !== liveData.projectedLogicalVersion;\n\nexport const StaleTag: React.FC<{liveData?: LiveDataForNode; onClick?: () => void}> = ({\n  liveData,\n  onClick,\n}) =>\n  isAssetStale(liveData) ? (\n    <Box onClick={onClick}>\n      <BaseTag\n        fillColor={Colors.Yellow50}\n        textColor={Colors.Yellow700}\n        label=\"Stale\"\n        interactive={!!onClick}\n      />\n    </Box>\n  ) : null;\n","import groupBy from 'lodash/groupBy';\nimport React from 'react';\n\nimport {\n  AssetMaterializationFragment,\n  AssetObservationFragment,\n} from './types/useRecentAssetEvents.types';\n\nconst NO_PARTITION_KEY = '__NO_PARTITION__';\n\ntype Event = AssetMaterializationFragment | AssetObservationFragment;\n\nexport type AssetEventGroup = {\n  latest: Event | null;\n  all: Event[];\n  timestamp: string;\n  partition?: string;\n};\n\nconst sortByEventTimestamp = (a: Event, b: Event) => Number(b?.timestamp) - Number(a?.timestamp);\n\n/**\n * A hook that can bucket a list of materializations by partition, if any, with the `latest`\n * materialization separated from predecessor materializations.\n */\nexport const groupByPartition = (\n  events: Event[],\n  definedPartitionKeys: string[],\n): AssetEventGroup[] => {\n  const grouped = groupBy(events, (m) => m.partition || NO_PARTITION_KEY);\n  const orderedPartitionKeys = [...definedPartitionKeys].reverse();\n\n  if (NO_PARTITION_KEY in grouped) {\n    orderedPartitionKeys.push(NO_PARTITION_KEY);\n  }\n\n  return orderedPartitionKeys\n    .filter((key) => key !== NO_PARTITION_KEY)\n    .map((key) => {\n      const sorted = [...(grouped[key] || [])].sort(sortByEventTimestamp);\n      const latestMaterialization = sorted.find((a) => a.__typename === 'MaterializationEvent');\n      const latest = latestMaterialization || sorted[0] || null;\n\n      return {\n        all: sorted,\n        latest,\n        timestamp: latest?.timestamp,\n        partition: key,\n      };\n    });\n};\n\nexport function useGroupedEvents(\n  xAxis: 'partition' | 'time',\n  materializations: Event[],\n  observations: Event[],\n  loadedPartitionKeys: string[] | undefined,\n) {\n  return React.useMemo<AssetEventGroup[]>(() => {\n    const events = [...materializations, ...observations].sort(\n      (b, a) => Number(a.timestamp) - Number(b.timestamp),\n    );\n    if (xAxis === 'partition' && loadedPartitionKeys) {\n      return groupByPartition(events, loadedPartitionKeys);\n    } else {\n      // return a group for every materialization to achieve un-grouped rendering\n      return events.map((event) => ({\n        latest: event,\n        partition: event.partition || undefined,\n        timestamp: event.timestamp,\n        all: [],\n      }));\n    }\n  }, [loadedPartitionKeys, materializations, observations, xAxis]);\n}\n","import React from 'react';\n\nimport {QueryPersistedStateConfig, useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {\n  allPartitionsSpan,\n  partitionsToText,\n  allPartitionsRange,\n  spanTextToSelections,\n} from '../partitions/SpanRepresentation';\n\nimport {placeholderDimensionSelection} from './MultipartitioningSupport';\nimport {PartitionHealthData, PartitionDimensionSelection} from './usePartitionHealthData';\n\ntype DimensionQueryState = {\n  name: string;\n  rangeText: string | undefined;\n};\n\nconst serializer: QueryPersistedStateConfig<DimensionQueryState[]> = {\n  defaults: {},\n  encode: (state) => Object.fromEntries(state.map((s) => [`${s.name}_range`, s.rangeText])),\n  decode: (qs) =>\n    Object.entries(qs)\n      .filter(([key]) => key.endsWith('_range'))\n      .map(([key, rangeText]) => ({name: key.replace(/_range$/, ''), rangeText})),\n};\n\n/**\n * This hook behaves like useState and manages the user's selected partition key\n * ranges on each partition dimension.\n *\n * Internally, this hook reads initial state from the query string and (optionally)\n * writes changes back to the query string using the compacted \"spans\" format.\n */\nexport const usePartitionDimensionSelections = (opts: {\n  assetHealth: Pick<PartitionHealthData, 'dimensions'>;\n  modifyQueryString: boolean;\n  knownDimensionNames?: string[]; // improves loading state if available\n}) => {\n  const {assetHealth, knownDimensionNames = [], modifyQueryString} = opts;\n  const [query, setQuery] = useQueryPersistedState<DimensionQueryState[]>(serializer);\n  const [local, setLocal] = React.useState<DimensionQueryState[]>([]);\n\n  const knownDimensionNamesJSON = JSON.stringify(knownDimensionNames);\n\n  const inflated = React.useMemo((): PartitionDimensionSelection[] => {\n    if (!assetHealth || !assetHealth.dimensions.length) {\n      return JSON.parse(knownDimensionNamesJSON).map(placeholderDimensionSelection);\n    }\n    return assetHealth.dimensions.map((dimension) => {\n      const saved =\n        local.find((s) => s.name === dimension.name) ||\n        query.find((s) => s.name === dimension.name);\n\n      // Note: It's valid for the user to clear the range to \"\", so it's\n      // important that we persist \"\" and specifically check for `undefined`\n      // when filling in the default value (all keys)\n      return saved?.rangeText !== undefined\n        ? {\n            dimension,\n            ...spanTextToSelections(dimension.partitionKeys, saved.rangeText),\n          }\n        : {\n            dimension,\n            selectedRanges: [allPartitionsRange(dimension)],\n            selectedKeys: [...dimension.partitionKeys],\n          };\n    });\n  }, [query, local, assetHealth, knownDimensionNamesJSON]);\n\n  const setInflated = React.useCallback(\n    (ranges: PartitionDimensionSelection[]) => {\n      const next = ranges.map((r) => {\n        const rangeText = partitionsToText(r.selectedKeys, r.dimension.partitionKeys);\n        return {\n          name: r.dimension.name,\n          rangeText: rangeText !== allPartitionsSpan(r.dimension) ? rangeText : undefined,\n        };\n      });\n      if (modifyQueryString) {\n        setQuery(next);\n      } else {\n        setLocal(next);\n      }\n    },\n    [setQuery, modifyQueryString],\n  );\n\n  return [inflated, setInflated] as const;\n};\n","import {gql, useApolloClient} from '@apollo/client';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\n\nimport {PartitionState} from '../partitions/PartitionStatus';\n\nimport {mergedStates} from './MultipartitioningSupport';\nimport {AssetKey} from './types';\nimport {\n  PartitionHealthQuery,\n  PartitionHealthQueryVariables,\n} from './types/usePartitionHealthData.types';\n\n/**\n * usePartitionHealthData retrieves partitionKeysByDimension + partitionMaterializationCounts and\n * reshapes the data for rapid retrieval from the UI. The hook exposes a series of getter methods\n * for each asset's data, hiding the underlying data structures from the rest of the app.\n *\n * The hope is that if we want to add support for 3- and 4- dimension partitioned assets, all\n * of the changes will be in this file. The rest of the app already supports N dimensions.\n */\n\nexport interface PartitionHealthData {\n  assetKey: AssetKey;\n  dimensions: PartitionHealthDimension[];\n  stateForKey: (dimensionKeys: string[]) => PartitionState;\n  stateForPartialKey: (dimensionKeys: string[]) => PartitionState;\n  stateForSingleDimension: (\n    dimensionIdx: number,\n    dimensionKey: string,\n    otherDimensionSelectedKeys?: string[],\n  ) => PartitionState;\n}\n\nexport interface PartitionHealthDimension {\n  name: string;\n  partitionKeys: string[];\n}\n\nexport type PartitionDimensionSelectionRange = [\n  {idx: number; key: string},\n  {idx: number; key: string},\n];\n\nexport type PartitionDimensionSelection = {\n  dimension: PartitionHealthDimension;\n  selectedKeys: string[];\n  selectedRanges: PartitionDimensionSelectionRange[];\n};\n\nexport function buildPartitionHealthData(data: PartitionHealthQuery, loadKey: AssetKey) {\n  const dimensions =\n    data.assetNodeOrError.__typename === 'AssetNode'\n      ? data.assetNodeOrError.partitionKeysByDimension\n      : [];\n\n  const counts = (data.assetNodeOrError.__typename === 'AssetNode' &&\n    data.assetNodeOrError.partitionMaterializationCounts) || {\n    __typename: 'MaterializationCountSingleDimension',\n    materializationCounts: [],\n  };\n\n  const stateByKey = Object.fromEntries(\n    counts.__typename === 'MaterializationCountSingleDimension'\n      ? counts.materializationCounts.map((count, idx) => [\n          dimensions[0].partitionKeys[idx],\n          count > 0 ? PartitionState.SUCCESS : PartitionState.MISSING,\n        ])\n      : counts.materializationCountsGrouped.map((dim0, idx0) => [\n          dimensions[0].partitionKeys[idx0],\n          Object.fromEntries(\n            dim0.map((count, idx1) => [\n              dimensions[1].partitionKeys[idx1],\n              count > 0 ? PartitionState.SUCCESS : PartitionState.MISSING,\n            ]),\n          ),\n        ]),\n  );\n\n  const stateForKey = (dimensionKeys: string[]): PartitionState =>\n    dimensionKeys.reduce((counts, dimensionKey) => counts[dimensionKey], stateByKey);\n\n  const stateForSingleDimension = (\n    dimensionIdx: number,\n    dimensionKey: string,\n    otherDimensionSelectedKeys?: string[],\n  ) => {\n    if (dimensionIdx === 0 && dimensions.length === 1) {\n      return stateForKey([dimensionKey]);\n    }\n    if (dimensionIdx === 0) {\n      return mergedStates(\n        Object.entries<PartitionState>(stateByKey[dimensionKey])\n          .filter(\n            ([key]) => !otherDimensionSelectedKeys || otherDimensionSelectedKeys.includes(key),\n          )\n          .map(([_, val]) => val),\n      );\n    } else if (dimensionIdx === 1) {\n      return mergedStates(\n        Object.entries<{[subdimensionKey: string]: PartitionState}>(stateByKey)\n          .filter(\n            ([key]) => !otherDimensionSelectedKeys || otherDimensionSelectedKeys.includes(key),\n          )\n          .map(([_, val]) => val[dimensionKey]),\n      );\n    } else {\n      throw new Error('stateForSingleDimension asked for third dimension');\n    }\n  };\n\n  const stateForPartialKey = (dimensionKeys: string[]) => {\n    return dimensionKeys.length === dimensions.length\n      ? stateForKey(dimensionKeys)\n      : mergedStates(Object.values(stateByKey[dimensionKeys[0]]));\n  };\n\n  const result: PartitionHealthData = {\n    assetKey: loadKey,\n    stateForKey,\n    stateForPartialKey,\n    stateForSingleDimension,\n    dimensions: dimensions.map((d) => ({\n      name: d.name,\n      partitionKeys: d.partitionKeys,\n    })),\n  };\n\n  return result;\n}\n\n// Note: assetLastMaterializedAt is used as a \"hint\" - if the input value changes, it's\n// a sign that we should invalidate and reload previously loaded health stats. We don't\n// clear them immediately to avoid an empty state.\n//\nexport function usePartitionHealthData(assetKeys: AssetKey[], assetLastMaterializedAt = '') {\n  const [result, setResult] = React.useState<(PartitionHealthData & {fetchedAt: string})[]>([]);\n  const client = useApolloClient();\n\n  const assetKeyJSONs = assetKeys.map((k) => JSON.stringify(k));\n  const assetKeyJSON = JSON.stringify(assetKeyJSONs);\n  const missingKeyJSON = assetKeyJSONs.find(\n    (k) =>\n      !result.some(\n        (r) => JSON.stringify(r.assetKey) === k && r.fetchedAt === assetLastMaterializedAt,\n      ),\n  );\n\n  React.useMemo(() => {\n    if (!missingKeyJSON) {\n      return;\n    }\n    const loadKey: AssetKey = JSON.parse(missingKeyJSON);\n    const run = async () => {\n      const {data} = await client.query<PartitionHealthQuery, PartitionHealthQueryVariables>({\n        query: PARTITION_HEALTH_QUERY,\n        fetchPolicy: 'network-only',\n        variables: {\n          assetKey: {path: loadKey.path},\n        },\n      });\n      const loaded = buildPartitionHealthData(data, loadKey);\n      setResult((result) => [\n        ...result.filter((r) => !isEqual(r.assetKey, loadKey)),\n        {...loaded, fetchedAt: assetLastMaterializedAt},\n      ]);\n    };\n    run();\n  }, [client, missingKeyJSON, assetLastMaterializedAt]);\n\n  return React.useMemo(() => {\n    const assetKeyJSONs = JSON.parse(assetKeyJSON);\n    return result.filter((r) => assetKeyJSONs.includes(JSON.stringify(r.assetKey)));\n  }, [assetKeyJSON, result]);\n}\n\nconst PARTITION_HEALTH_QUERY = gql`\n  query PartitionHealthQuery($assetKey: AssetKeyInput!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      ... on AssetNode {\n        id\n        partitionKeysByDimension {\n          name\n          partitionKeys\n        }\n        partitionMaterializationCounts {\n          ... on MaterializationCountGroupedByDimension {\n            materializationCountsGrouped\n          }\n          ... on MaterializationCountSingleDimension {\n            materializationCounts\n          }\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  AssetJobPartitionSetsQuery,\n  AssetJobPartitionSetsQueryVariables,\n} from './types/usePartitionNameForPipeline.types';\n\nexport function usePartitionNameForPipeline(repoAddress: RepoAddress, pipelineName: string) {\n  const {data: partitionSetsData} = useQuery<\n    AssetJobPartitionSetsQuery,\n    AssetJobPartitionSetsQueryVariables\n  >(ASSET_JOB_PARTITION_SETS_QUERY, {\n    variables: {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n      pipelineName,\n    },\n  });\n\n  return React.useMemo(\n    () => ({\n      partitionSet:\n        partitionSetsData?.partitionSetsOrError.__typename === 'PartitionSets'\n          ? partitionSetsData.partitionSetsOrError.results[0]\n          : undefined,\n      partitionSetError:\n        partitionSetsData?.partitionSetsOrError.__typename === 'PipelineNotFoundError' ||\n        partitionSetsData?.partitionSetsOrError.__typename === 'PythonError'\n          ? partitionSetsData.partitionSetsOrError\n          : undefined,\n    }),\n    [partitionSetsData],\n  );\n}\n\nconst ASSET_JOB_PARTITION_SETS_QUERY = gql`\n  query AssetJobPartitionSetsQuery(\n    $pipelineName: String!\n    $repositoryName: String!\n    $repositoryLocationName: String!\n  ) {\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      __typename\n      ... on PipelineNotFoundError {\n        __typename\n        message\n      }\n      ... on PartitionSets {\n        __typename\n        results {\n          id\n          name\n          mode\n          solidSelection\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\n\nimport {ASSET_LINEAGE_FRAGMENT} from './AssetLineageElements';\nimport {AssetViewParams} from './AssetView';\nimport {AssetKey} from './types';\nimport {AssetEventsQuery, AssetEventsQueryVariables} from './types/useRecentAssetEvents.types';\n\n/**\n * If the asset has a defined partition space, we load all materializations in the\n * last 100 partitions. This ensures that if you run a huge backfill of old partitions,\n * you still see accurate info for the last 100 partitions in the UI. A count-based\n * limit could cause random partitions to disappear if materializations were out of order.\n */\nexport function useRecentAssetEvents(\n  assetKey: AssetKey,\n  params: AssetViewParams,\n  {assetHasDefinedPartitions}: {assetHasDefinedPartitions: boolean},\n) {\n  // The params behavior on this page is a bit nuanced - there are two main query\n  // params: ?timestamp= and ?partition= and only one is set at a time. They can\n  // be undefined, an empty string or a value and all three states are used.\n  //\n  // - If both are undefined, we expand the first item in the table by default\n  // - If one is present, it determines which xAxis is used (partition grouping)\n  // - If one is present and set to a value, that item in the table is expanded.\n  // - If one is present but an empty string, no items in the table is expanded.\n\n  const before = params.asOf ? `${Number(params.asOf) + 1}` : undefined;\n  const xAxisDefault = assetHasDefinedPartitions ? 'partition' : 'time';\n  const xAxis: 'partition' | 'time' =\n    params.partition !== undefined\n      ? 'partition'\n      : params.time !== undefined || before\n      ? 'time'\n      : xAxisDefault;\n\n  const loadUsingPartitionKeys = assetHasDefinedPartitions && xAxis === 'partition';\n\n  const {data, loading, refetch} = useQuery<AssetEventsQuery, AssetEventsQueryVariables>(\n    ASSET_EVENTS_QUERY,\n    {\n      variables: loadUsingPartitionKeys\n        ? {\n            assetKey: {path: assetKey.path},\n            before,\n            partitionInLast: 120,\n          }\n        : {\n            assetKey: {path: assetKey.path},\n            before,\n            limit: 100,\n          },\n    },\n  );\n\n  return React.useMemo(() => {\n    const asset = data?.assetOrError.__typename === 'Asset' ? data?.assetOrError : null;\n    const materializations = asset?.assetMaterializations || [];\n    const observations = asset?.assetObservations || [];\n\n    const allPartitionKeys = asset?.definition?.partitionKeys;\n    const loadedPartitionKeys =\n      loadUsingPartitionKeys && allPartitionKeys\n        ? allPartitionKeys.slice(allPartitionKeys.length - 120)\n        : uniq(\n            [...materializations, ...observations].map((p) => p.partition!).filter(Boolean),\n          ).sort();\n\n    return {\n      asset,\n      loadedPartitionKeys,\n      materializations,\n      observations,\n      loading,\n      refetch,\n      xAxis,\n    };\n  }, [data, loading, refetch, loadUsingPartitionKeys, xAxis]);\n}\n\nexport const ASSET_MATERIALIZATION_FRAGMENT = gql`\n  fragment AssetMaterializationFragment on MaterializationEvent {\n    partition\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    assetLineage {\n      ...AssetLineageFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_LINEAGE_FRAGMENT}\n`;\n\nexport const ASSET_OBSERVATION_FRAGMENT = gql`\n  fragment AssetObservationFragment on ObservationEvent {\n    partition\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n\nconst ASSET_EVENTS_QUERY = gql`\n  query AssetEventsQuery(\n    $assetKey: AssetKeyInput!\n    $limit: Int\n    $before: String\n    $partitionInLast: Int\n  ) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        key {\n          path\n        }\n        assetObservations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetObservationFragment\n        }\n        assetMaterializations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetMaterializationFragment\n        }\n\n        definition {\n          id\n          partitionKeys\n        }\n      }\n    }\n  }\n\n  ${ASSET_OBSERVATION_FRAGMENT}\n  ${ASSET_MATERIALIZATION_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {HTMLInputProps, InputGroupProps2, Intent} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  Colors,\n  Icon,\n  IconWrapper,\n  MenuDivider,\n  MenuItem,\n  Menu,\n  Select,\n  Spinner,\n  Suggest,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {RepositorySelector} from '../graphql/types';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  ConfigEditorGeneratorPipelineFragment,\n  ConfigEditorPipelinePresetFragment,\n  PartitionSetForConfigEditorFragment,\n  ConfigPartitionResultFragment,\n  ConfigPartitionsQuery,\n  ConfigPartitionsQueryVariables,\n} from './types/ConfigEditorConfigPicker.types';\n\ntype Pipeline = ConfigEditorGeneratorPipelineFragment;\ntype Preset = ConfigEditorPipelinePresetFragment;\ntype PartitionSet = PartitionSetForConfigEditorFragment;\ntype Partition = ConfigPartitionResultFragment;\ntype ConfigGenerator = Preset | PartitionSet;\n\ninterface ConfigEditorConfigPickerProps {\n  base: IExecutionSession['base'];\n  pipeline: Pipeline;\n  pipelineMode?: string;\n  partitionSets: PartitionSet[];\n  onSaveSession: (updates: Partial<IExecutionSession>) => void;\n  onSelectPreset: (preset: Preset) => Promise<void>;\n  onSelectPartition: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => Promise<void>;\n  repoAddress: RepoAddress;\n}\n\nexport const ConfigEditorConfigPicker: React.FC<ConfigEditorConfigPickerProps> = (props) => {\n  const {\n    pipeline,\n    base,\n    onSaveSession,\n    onSelectPreset,\n    onSelectPartition,\n    partitionSets,\n    repoAddress,\n  } = props;\n\n  const {isJob, presets} = pipeline;\n\n  const configGenerators: ConfigGenerator[] = React.useMemo(() => {\n    const byName = (a: {name: string}, b: {name: string}) => a.name.localeCompare(b.name);\n    return [...presets, ...partitionSets].sort(byName);\n  }, [presets, partitionSets]);\n\n  const label = () => {\n    if (!base) {\n      if (presets.length && !partitionSets.length) {\n        return 'Preset';\n      }\n      if (!presets.length && partitionSets.length) {\n        return 'Partition Set';\n      }\n      return 'Preset / Partition Set';\n    }\n\n    if ('presetName' in base) {\n      return `Preset: ${base.presetName}`;\n    }\n\n    return `Partition Set: ${base.partitionsSetName}`;\n  };\n\n  const onSelect = (item: ConfigGenerator) => {\n    if (item.__typename === 'PartitionSet') {\n      onSaveSession({\n        mode: item.mode,\n        base: {\n          partitionsSetName: item.name,\n          partitionName: null,\n          tags: base ? base.tags : null,\n        },\n      });\n    } else {\n      onSelectPreset(item);\n    }\n  };\n\n  return (\n    <PickerContainer>\n      {isJob || configGenerators.length < 1 ? null : (\n        <ConfigEditorConfigGeneratorPicker\n          label={label()}\n          configGenerators={configGenerators}\n          onSelect={onSelect}\n        />\n      )}\n      {base && 'partitionsSetName' in base ? (\n        <ConfigEditorPartitionPicker\n          pipeline={pipeline}\n          partitionSetName={base.partitionsSetName}\n          value={base.partitionName}\n          onSelect={onSelectPartition}\n          repoAddress={repoAddress}\n        />\n      ) : null}\n    </PickerContainer>\n  );\n};\n\ninterface ConfigEditorPartitionPickerProps {\n  pipeline: Pipeline;\n  partitionSetName: string;\n  value: string | null;\n  onSelect: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => void;\n  repoAddress: RepoAddress;\n}\n\nconst SORT_ORDER_KEY_BASE = 'dagit.partition-sort-order';\ntype SortOrder = 'asc' | 'desc';\n\nconst ConfigEditorPartitionPicker: React.FC<ConfigEditorPartitionPickerProps> = React.memo(\n  (props) => {\n    const {partitionSetName, value, onSelect, repoAddress} = props;\n    const {basePath} = React.useContext(AppContext);\n    const repositorySelector = repoAddressToSelector(repoAddress);\n    const {data, loading} = useQuery<ConfigPartitionsQuery, ConfigPartitionsQueryVariables>(\n      CONFIG_PARTITIONS_QUERY,\n      {\n        variables: {repositorySelector, partitionSetName},\n        fetchPolicy: 'network-only',\n      },\n    );\n\n    const sortOrderKey = `${SORT_ORDER_KEY_BASE}-${basePath}-${repoAddressAsHumanString(\n      repoAddress,\n    )}-${partitionSetName}`;\n\n    const [sortOrder, setSortOrder] = useStateWithStorage<SortOrder>(sortOrderKey, (value: any) =>\n      value === undefined ? 'asc' : value,\n    );\n\n    const partitions: Partition[] = React.useMemo(() => {\n      const retrieved =\n        data?.partitionSetOrError.__typename === 'PartitionSet' &&\n        data?.partitionSetOrError.partitionsOrError.__typename === 'Partitions'\n          ? data.partitionSetOrError.partitionsOrError.results\n          : [];\n      return sortOrder === 'asc' ? retrieved : [...retrieved].reverse();\n    }, [data, sortOrder]);\n\n    const error =\n      data?.partitionSetOrError.__typename === 'PartitionSet' &&\n      data?.partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ? data.partitionSetOrError.partitionsOrError\n        : null;\n\n    const selected = partitions.find((p) => p.name === value);\n\n    const onClickSort = React.useCallback(\n      (event) => {\n        event.preventDefault();\n        setSortOrder((order) => (order === 'asc' ? 'desc' : 'asc'));\n      },\n      [setSortOrder],\n    );\n\n    const rightElement = partitions.length ? (\n      <SortButton onMouseDown={onClickSort}>\n        <Icon name=\"sort_by_alpha\" color={Colors.Gray400} />\n      </SortButton>\n    ) : undefined;\n\n    const inputProps: InputGroupProps2 & HTMLInputProps = {\n      placeholder: 'Partition',\n      style: {width: 180},\n      intent: (loading ? !!value : !!selected) ? Intent.NONE : Intent.DANGER,\n      rightElement,\n    };\n\n    // If we are loading the partitions and do NOT have any cached data to display,\n    // show the component in a loading state with a spinner and fill it with the\n    // current partition's name so it doesn't flicker (if one is set already.)\n    if (loading && partitions.length === 0) {\n      return (\n        <Suggest<string>\n          key=\"loading\"\n          inputProps={{\n            ...inputProps,\n            rightElement: !value ? (\n              <Box\n                flex={{direction: 'column', justifyContent: 'center'}}\n                padding={{right: 4}}\n                style={{height: '30px'}}\n              >\n                <Spinner purpose=\"body-text\" />\n              </Box>\n            ) : undefined,\n          }}\n          items={[]}\n          itemRenderer={() => null}\n          noResults={<MenuItem disabled={true} text=\"Loading...\" />}\n          inputValueRenderer={(str) => str}\n          selectedItem={value}\n          onItemSelect={() => {}}\n        />\n      );\n    }\n\n    if (error) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={error} />,\n      });\n    }\n\n    // Note: We don't want this Suggest to be a fully \"controlled\" React component.\n    // Keeping it's state is annoyign and we only want to update our data model on\n    // selection change. However, we need to set an initial value (defaultSelectedItem)\n    // and ensure it is re-applied to the internal state when it changes (via `key` below).\n    return (\n      <Suggest<Partition>\n        key={selected ? selected.name : 'none'}\n        defaultSelectedItem={selected}\n        items={partitions}\n        inputProps={inputProps}\n        inputValueRenderer={(partition) => partition.name}\n        itemPredicate={(query, partition) => query.length === 0 || partition.name.includes(query)}\n        itemRenderer={(partition, props) => (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={partition.name}\n            text={partition.name}\n          />\n        )}\n        noResults={<MenuItem disabled={true} text=\"No presets.\" />}\n        onItemSelect={(item) => {\n          onSelect(repositorySelector, partitionSetName, item.name);\n        }}\n      />\n    );\n  },\n);\n\ninterface ConfigEditorConfigGeneratorPickerProps {\n  label: string;\n  configGenerators: ConfigGenerator[];\n  onSelect: (configGenerator: ConfigGenerator) => void;\n}\n\nconst ConfigEditorConfigGeneratorPicker: React.FC<ConfigEditorConfigGeneratorPickerProps> = React.memo(\n  (props) => {\n    const {configGenerators, label, onSelect} = props;\n    const button = React.useRef<HTMLButtonElement>(null);\n\n    return (\n      <div>\n        <ShortcutHandler\n          shortcutLabel=\"⌥E\"\n          shortcutFilter={(e) => e.code === 'KeyE' && e.altKey}\n          onShortcut={() => button.current?.click()}\n        >\n          <Select<ConfigGenerator>\n            items={configGenerators}\n            itemPredicate={(query, configGenerator) =>\n              query.length === 0 || configGenerator.name.includes(query)\n            }\n            itemListRenderer={({itemsParentRef, renderItem, filteredItems}) => {\n              const renderedPresetItems = filteredItems\n                .filter((item) => item.__typename === 'PipelinePreset')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const renderedPartitionSetItems = filteredItems\n                .filter((item) => item.__typename === 'PartitionSet')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const bothTypesPresent =\n                renderedPresetItems.length > 0 && renderedPartitionSetItems.length > 0;\n\n              return (\n                <Menu ulRef={itemsParentRef}>\n                  {bothTypesPresent && <MenuItem disabled={true} text=\"Presets\" />}\n                  {renderedPresetItems}\n                  {bothTypesPresent && <MenuDivider />}\n                  {bothTypesPresent && <MenuItem disabled={true} text=\"Partition Sets\" />}\n                  {renderedPartitionSetItems}\n                </Menu>\n              );\n            }}\n            itemRenderer={(item, props) => (\n              <MenuItem\n                active={props.modifiers.active}\n                onClick={props.handleClick}\n                key={item.name}\n                text={\n                  <div>\n                    {item.name}\n                    <div style={{opacity: 0.4, fontSize: '0.75rem'}}>\n                      {[\n                        item.solidSelection\n                          ? item.solidSelection.length === 1\n                            ? `Ops: ${item.solidSelection[0]}`\n                            : `Ops: ${item.solidSelection.length}`\n                          : `Ops: All`,\n                        `Mode: ${item.mode}`,\n                      ].join(' - ')}\n                    </div>\n                  </div>\n                }\n              />\n            )}\n            noResults={<MenuItem disabled={true} text=\"No presets.\" />}\n            onItemSelect={onSelect}\n          >\n            <Button\n              ref={button}\n              data-test-id=\"preset-selector-button\"\n              rightIcon={<Icon name=\"expand_more\" />}\n            >\n              {label}\n            </Button>\n          </Select>\n        </ShortcutHandler>\n      </div>\n    );\n  },\n);\n\nconst SortButton = styled.button`\n  border: 0;\n  cursor: pointer;\n  padding: 4px;\n  margin: 3px 3px 0 0;\n  background-color: ${Colors.White};\n  border-radius: 4px;\n  transition: background-color 100ms;\n\n  :hover,\n  :focus {\n    background-color: ${Colors.Gray100};\n    outline: none;\n\n    ${IconWrapper} {\n      background-color: ${Colors.Gray700};\n    }\n  }\n`;\n\nconst PickerContainer = styled.div`\n  display: flex;\n  justify: space-between;\n  align-items: center;\n  gap: 6px;\n`;\n\nconst CONFIG_PARTITIONS_QUERY = gql`\n  query ConfigPartitionsQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              ...ConfigPartitionResult\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n  }\n\n  fragment ConfigPartitionResult on Partition {\n    name\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const CONFIG_PARTITION_SELECTION_QUERY = gql`\n  query ConfigPartitionSelectionQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n    $partitionName: String!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partition(partitionName: $partitionName) {\n          name\n          solidSelection\n          runConfigOrError {\n            ... on PartitionRunConfig {\n              yaml\n            }\n            ...PythonErrorFragment\n          }\n          mode\n          tagsOrError {\n            ... on PartitionTags {\n              results {\n                key\n                value\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPipelineFragment on Pipeline {\n    id\n    isJob\n    name\n    presets {\n      ...ConfigEditorPipelinePreset\n    }\n    tags {\n      key\n      value\n    }\n  }\n\n  fragment ConfigEditorPipelinePreset on PipelinePreset {\n    name\n    mode\n    solidSelection\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPartitionSetsFragment on PartitionSets {\n    results {\n      id\n      ...PartitionSetForConfigEditor\n    }\n  }\n\n  fragment PartitionSetForConfigEditor on PartitionSet {\n    id\n    name\n    mode\n    solidSelection\n  }\n`;\n","import * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {ConfigEditor, ConfigSchema} from './ConfigEditor';\nimport {Spinner} from './Spinner';\nimport {SplitPanelContainer} from './SplitPanelContainer';\nimport {ConfigEditorHelp} from './configeditor/ConfigEditorHelp';\nimport {isHelpContextEqual} from './configeditor/isHelpContextEqual';\nimport {ConfigEditorHelpContext} from './configeditor/types/ConfigEditorHelpContext';\n\ninterface Props {\n  onConfigChange: (config: string) => void;\n  config?: string;\n  configSchema?: ConfigSchema | null;\n  isLoading: boolean;\n  identifier: string;\n}\n\n// Force code editor hints to appear above the dialog modal\nexport const CodeMirrorInDialogStyle = createGlobalStyle`\n  .CodeMirror-hints,\n  .CodeMirror-hints.dagit {\n    z-index: 100;\n  }\n`;\n\nexport const ConfigEditorWithSchema: React.FC<Props> = ({\n  isLoading,\n  identifier,\n  config,\n  onConfigChange,\n  configSchema,\n}) => {\n  const editorSplitPanelContainer = React.useRef<SplitPanelContainer | null>(null);\n  const [editorHelpContext, setEditorHelpContext] = React.useState<ConfigEditorHelpContext | null>(\n    null,\n  );\n  const editor = React.useRef<ConfigEditor | null>(null);\n\n  return (\n    <>\n      <CodeMirrorInDialogStyle />\n      <SplitPanelContainer\n        ref={editorSplitPanelContainer}\n        axis=\"horizontal\"\n        identifier={identifier}\n        firstMinSize={100}\n        firstInitialPercent={70}\n        first={\n          !isLoading ? (\n            <ConfigEditor\n              ref={editor}\n              configCode={config!}\n              onConfigChange={onConfigChange}\n              onHelpContextChange={(next) => {\n                if (next && !isHelpContextEqual(editorHelpContext, next)) {\n                  setEditorHelpContext(next);\n                }\n              }}\n              readOnly={false}\n              checkConfig={async (_j) => {\n                return {isValid: true};\n              }}\n              configSchema={configSchema}\n            />\n          ) : (\n            <Box style={{height: '100%'}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n              <Spinner purpose=\"section\" />\n            </Box>\n          )\n        }\n        second={\n          <Box style={{height: 500}}>\n            <ConfigEditorHelp\n              context={editorHelpContext}\n              allInnerTypes={configSchema?.allConfigTypes || []}\n            />\n          </Box>\n        }\n      />\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {\n  createSingleSession,\n  IExecutionSession,\n  IExecutionSessionChanges,\n  useInitialDataForMode,\n} from '../app/ExecutionSessionStorage';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LaunchpadType} from './LaunchpadRoot';\nimport LaunchpadSession from './LaunchpadSession';\nimport {\n  LaunchpadSessionPartitionSetsFragment,\n  LaunchpadSessionPipelineFragment,\n} from './types/LaunchpadRoot.types';\n\ninterface Props {\n  launchpadType: LaunchpadType;\n  pipeline: LaunchpadSessionPipelineFragment;\n  partitionSets: LaunchpadSessionPartitionSetsFragment;\n  repoAddress: RepoAddress;\n  sessionPresets: Partial<IExecutionSession>;\n}\n\nexport const LaunchpadTransientSessionContainer = (props: Props) => {\n  const {launchpadType, pipeline, partitionSets, repoAddress, sessionPresets} = props;\n\n  const initialData = useInitialDataForMode(pipeline, partitionSets);\n  const initialSessionComplete = createSingleSession({\n    ...sessionPresets,\n    runConfigYaml: initialData.runConfigYaml,\n  });\n\n  const [session, setSession] = React.useState<IExecutionSession>(initialSessionComplete);\n\n  const onSaveSession = (changes: IExecutionSessionChanges) => {\n    const newSession = {...session, ...changes};\n    setSession(newSession);\n  };\n\n  return (\n    <LaunchpadSession\n      launchpadType={launchpadType}\n      session={session}\n      onSave={onSaveSession}\n      pipeline={pipeline}\n      partitionSets={partitionSets}\n      repoAddress={repoAddress}\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {CodeMirrorInDialogStyle, Dialog, DialogHeader} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT,\n  CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT,\n} from './ConfigEditorConfigPicker';\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {LaunchpadTransientSessionContainer} from './LaunchpadTransientSessionContainer';\nimport {LaunchpadRootQuery, LaunchpadRootQueryVariables} from './types/LaunchpadRoot.types';\n\nconst LaunchpadStoredSessionsContainer = React.lazy(\n  () => import('./LaunchpadStoredSessionsContainer'),\n);\n\nexport type LaunchpadType = 'asset' | 'job';\n\n// ########################\n// ##### LAUNCHPAD ROOTS\n// ########################\n\nexport const AssetLaunchpad: React.FC<{\n  repoAddress: RepoAddress;\n  sessionPresets?: Partial<IExecutionSession>;\n  assetJobName: string;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({repoAddress, sessionPresets, assetJobName, open, setOpen}) => {\n  const title = 'Launchpad (configure assets)';\n\n  return (\n    <Dialog\n      style={{height: '90vh', width: '80%'}}\n      isOpen={open}\n      canEscapeKeyClose={true}\n      canOutsideClickClose={true}\n      onClose={() => setOpen(false)}\n    >\n      <DialogHeader icon=\"layers\" label={title} />\n      <CodeMirrorInDialogStyle />\n      <LaunchpadAllowedRoot\n        launchpadType=\"asset\"\n        pipelinePath={assetJobName}\n        repoAddress={repoAddress}\n        sessionPresets={sessionPresets}\n      />\n    </Dialog>\n  );\n};\n\nexport const JobLaunchpad: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {pipelinePath, repoPath} = useParams<{repoPath: string; pipelinePath: string}>();\n  const {canLaunchPipelineExecution} = usePermissionsForLocation(repoAddress.location);\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n\n  return (\n    <LaunchpadAllowedRoot\n      launchpadType=\"job\"\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\n// ########################\n// ##### LAUNCHPAD ALLOWED ROOT\n// ########################\n\ninterface Props {\n  launchpadType: LaunchpadType;\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  sessionPresets?: Partial<IExecutionSession>;\n}\n\nconst LaunchpadAllowedRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath, repoAddress, launchpadType, sessionPresets} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(props);\n\n  const {name: repositoryName, location: repositoryLocationName} = repoAddress;\n\n  const result = useQuery<LaunchpadRootQuery, LaunchpadRootQueryVariables>(\n    PIPELINE_EXECUTION_ROOT_QUERY,\n    {\n      variables: {repositoryName, repositoryLocationName, pipelineName},\n      partialRefetch: true,\n    },\n  );\n\n  const pipelineOrError = result?.data?.pipelineOrError;\n  const partitionSetsOrError = result?.data?.partitionSetsOrError;\n\n  if (!pipelineOrError || !partitionSetsOrError) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (\n    partitionSetsOrError.__typename === 'PipelineNotFoundError' ||\n    pipelineOrError.__typename === 'PipelineNotFoundError'\n  ) {\n    const message =\n      pipelineOrError.__typename === 'PipelineNotFoundError'\n        ? pipelineOrError.message\n        : 'No data returned from GraphQL';\n\n    return pipelineName !== '' ? (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title={isJob ? 'Job not found' : 'Pipeline not found'}\n        description={message}\n      />\n    ) : (\n      <LaunchpadSessionError\n        icon=\"no-results\"\n        title={isJob ? 'Select a job' : 'Select a pipeline'}\n        description={message}\n      />\n    );\n  }\n\n  if (pipelineOrError.__typename === 'InvalidSubsetError') {\n    throw new Error(`Should never happen because we do not request a subset`);\n  }\n\n  if (pipelineOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"Python Error\"\n        description={pipelineOrError.message}\n      />\n    );\n  }\n  if (partitionSetsOrError && partitionSetsOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"Python Error\"\n        description={partitionSetsOrError.message}\n      />\n    );\n  }\n\n  if (launchpadType === 'asset') {\n    return (\n      <LaunchpadTransientSessionContainer\n        launchpadType={launchpadType}\n        pipeline={pipelineOrError}\n        partitionSets={partitionSetsOrError}\n        repoAddress={repoAddress}\n        sessionPresets={sessionPresets || {}}\n      />\n    );\n  } else {\n    // job\n    return (\n      <React.Suspense fallback={<div />}>\n        <LaunchpadStoredSessionsContainer\n          launchpadType={launchpadType}\n          pipeline={pipelineOrError}\n          partitionSets={partitionSetsOrError}\n          repoAddress={repoAddress}\n        />\n      </React.Suspense>\n    );\n  }\n};\n\nconst PIPELINE_EXECUTION_ROOT_QUERY = gql`\n  query LaunchpadRootQuery(\n    $pipelineName: String!\n    $repositoryName: String!\n    $repositoryLocationName: String!\n  ) {\n    pipelineOrError(\n      params: {\n        pipelineName: $pipelineName\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on Pipeline {\n        id\n        ...LaunchpadSessionPipelineFragment\n      }\n      ...PythonErrorFragment\n    }\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      __typename\n      ... on PipelineNotFoundError {\n        message\n      }\n      ...LaunchpadSessionPartitionSetsFragment\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment LaunchpadSessionPartitionSetsFragment on PartitionSets {\n    ...ConfigEditorGeneratorPartitionSetsFragment\n  }\n\n  fragment LaunchpadSessionPipelineFragment on Pipeline {\n    id\n    isJob\n    isAssetJob\n    ...ConfigEditorGeneratorPipelineFragment\n    modes {\n      id\n      name\n      description\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT}\n  ${CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT}\n`;\n","// Patched lint mode that won't constantly lint\nimport CodeMirror from 'codemirror';\n\nconst GUTTER_ID = 'CodeMirror-lint-markers';\n\nfunction showTooltip(e, content, node) {\n  const tt = document.createElement('div');\n  const nodeRect = node.getBoundingClientRect();\n\n  tt.className = 'CodeMirror-lint-tooltip';\n  tt.appendChild(content.cloneNode(true));\n  document.body.appendChild(tt);\n  if (nodeRect.top > tt.clientHeight) {\n    // position on the top\n    tt.style.top = nodeRect.top - tt.clientHeight - 5 + 'px';\n    tt.style.left = nodeRect.left + 5 + 'px';\n  } else {\n    // positon on the right if top would be off-screen\n    tt.style.top = nodeRect.top + 5 + 'px';\n    tt.style.left = nodeRect.right + 10 + 'px';\n  }\n  if (tt.style.opacity != null) {\n    tt.style.opacity = 1;\n  }\n  return tt;\n}\nfunction rm(elt) {\n  if (elt.parentNode) {\n    elt.parentNode.removeChild(elt);\n  }\n}\nfunction hideTooltip(tt) {\n  if (!tt.parentNode) {\n    return;\n  }\n  if (tt.style.opacity == null) {\n    rm(tt);\n  }\n  tt.style.opacity = 0;\n  setTimeout(function () {\n    rm(tt);\n  }, 600);\n}\n\nfunction showTooltipFor(e, content, node) {\n  let tooltip = showTooltip(e, content, node);\n  function hide() {\n    CodeMirror.off(node, 'mouseout', hide);\n    if (tooltip) {\n      hideTooltip(tooltip);\n      tooltip = null;\n    }\n  }\n  const poll = setInterval(function () {\n    if (tooltip) {\n      for (let n = node; ; n = n.parentNode) {\n        if (n && n.nodeType === 11) {\n          n = n.host;\n        }\n        if (n === document.body) {\n          return;\n        }\n        if (!n) {\n          hide();\n          break;\n        }\n      }\n    }\n    if (!tooltip) {\n      return clearInterval(poll);\n    }\n  }, 400);\n  CodeMirror.on(node, 'mouseout', hide);\n}\n\nfunction parseOptions(_cm, options) {\n  if (options instanceof Function) {\n    return {getAnnotations: options};\n  }\n  if (!options || options === true) {\n    options = {};\n  }\n  return options;\n}\n\nfunction clearMarks(cm) {\n  const state = cm.state.lint;\n  if (state.hasGutter) {\n    cm.clearGutter(GUTTER_ID);\n  }\n  for (let i = 0; i < state.marked.length; ++i) {\n    state.marked[i].clear();\n  }\n  state.marked.length = 0;\n}\n\nfunction makeMarker(labels, severity, multiple, tooltips) {\n  const marker = document.createElement('div');\n  let inner = marker;\n  marker.className = 'CodeMirror-lint-marker CodeMirror-lint-marker-' + severity;\n  if (multiple) {\n    inner = marker.appendChild(document.createElement('div'));\n    inner.className = 'CodeMirror-lint-marker CodeMirror-lint-marker-multiple';\n  }\n\n  if (tooltips !== false) {\n    CodeMirror.on(inner, 'mouseover', function (e) {\n      showTooltipFor(e, labels, inner);\n    });\n  }\n  return marker;\n}\n\nfunction getMaxSeverity(a, b) {\n  if (a === 'error') {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nfunction groupByLine(annotations) {\n  const lines = [];\n  for (let i = 0; i < annotations.length; ++i) {\n    const ann = annotations[i],\n      line = ann.from.line;\n    (lines[line] || (lines[line] = [])).push(ann);\n  }\n  return lines;\n}\n\nfunction annotationTooltip(ann) {\n  let severity = ann.severity;\n  if (!severity) {\n    severity = 'error';\n  }\n  const tip = document.createElement('div');\n  tip.className = 'CodeMirror-lint-message CodeMirror-lint-message-' + severity;\n  if (typeof ann.messageHTML !== 'undefined') {\n    tip.innerHTML = ann.messageHTML;\n  } else {\n    tip.appendChild(document.createTextNode(ann.message));\n  }\n  return tip;\n}\n\nfunction updateLinting(cm, annotationsNotSorted) {\n  clearMarks(cm);\n  const state = cm.state.lint,\n    options = state.options;\n\n  const annotations = groupByLine(annotationsNotSorted);\n\n  for (let line = 0; line < annotations.length; ++line) {\n    const anns = annotations[line];\n    if (!anns) {\n      continue;\n    }\n\n    let maxSeverity = null;\n    const tipLabel = state.hasGutter && document.createDocumentFragment();\n\n    for (let i = 0; i < anns.length; ++i) {\n      let ann = anns[i];\n      let severity = ann.severity;\n      if (!severity) {\n        severity = 'error';\n      }\n      maxSeverity = getMaxSeverity(maxSeverity, severity);\n\n      if (options.formatAnnotation) {\n        ann = options.formatAnnotation(ann);\n      }\n      if (state.hasGutter) {\n        tipLabel.appendChild(annotationTooltip(ann));\n      }\n\n      if (ann.to) {\n        state.marked.push(\n          cm.markText(ann.from, ann.to, {\n            className: 'CodeMirror-lint-mark CodeMirror-lint-mark-' + severity,\n            __annotation: ann,\n          }),\n        );\n      }\n    }\n\n    if (state.hasGutter) {\n      cm.setGutterMarker(\n        line,\n        GUTTER_ID,\n        makeMarker(tipLabel, maxSeverity, anns.length > 1, state.options.tooltips),\n      );\n    }\n  }\n  if (options.onUpdateLinting) {\n    options.onUpdateLinting(annotationsNotSorted, annotations, cm);\n  }\n}\n\nfunction lintAsync(cm, getAnnotations, passOptions) {\n  const state = cm.state.lint;\n  let id = ++state.waitingFor;\n  function abort() {\n    id = -1;\n    cm.off('change', abort);\n  }\n  cm.on('change', abort);\n  getAnnotations(\n    cm.getValue(),\n    function (annotations, arg2) {\n      cm.off('change', abort);\n      if (state.waitingFor !== id) {\n        return;\n      }\n      if (arg2 && annotations instanceof CodeMirror) {\n        annotations = arg2;\n      }\n      cm.operation(function () {\n        updateLinting(cm, annotations);\n      });\n    },\n    passOptions,\n    cm,\n  );\n}\n\nfunction startLinting(cm) {\n  const state = cm.state.lint,\n    options = state.options;\n  /*\n   * Passing rules in `options` property prevents JSHint (and other linters) from complaining\n   * about unrecognized rules like `onUpdateLinting`, `delay`, `lintOnChange`, etc.\n   */\n  const passOptions = options.options || options;\n  const getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), 'lint');\n  if (!getAnnotations) {\n    return;\n  }\n  if (options.async || getAnnotations.async) {\n    lintAsync(cm, getAnnotations, passOptions);\n  } else {\n    const annotations = getAnnotations(cm.getValue(), passOptions, cm);\n    if (!annotations) {\n      return;\n    }\n    if (annotations.then) {\n      annotations.then(function (issues) {\n        cm.operation(function () {\n          updateLinting(cm, issues);\n        });\n      });\n    } else {\n      cm.operation(function () {\n        updateLinting(cm, annotations);\n      });\n    }\n  }\n}\n\nfunction onChange(cm) {\n  const state = cm.state.lint;\n  if (!state) {\n    return;\n  }\n  clearTimeout(state.timeout);\n  state.timeout = setTimeout(function () {\n    startLinting(cm);\n  }, state.options.delay || 500);\n}\n\nfunction popupTooltip(docs, annotations, e) {\n  const target = e.target || e.srcElement;\n\n  const tooltip = document.createDocumentFragment();\n\n  if (docs) {\n    const docsEl = document.createElement('div');\n    docsEl.textContent = docs;\n    tooltip.appendChild(docsEl);\n    if (annotations.length) {\n      docsEl.style.paddingBottom = '4px';\n      docsEl.style.marginBottom = '4px';\n      docsEl.style.borderBottom = '1px solid rgba(0,0,0,0.25)';\n    }\n  }\n\n  for (let i = 0; i < annotations.length; i++) {\n    const ann = annotations[i];\n    tooltip.appendChild(annotationTooltip(ann));\n  }\n  showTooltipFor(e, tooltip, target);\n}\n\nfunction onMouseOver(cm, e) {\n  const target = e.target || e.srcElement;\n  const box = target.getBoundingClientRect(),\n    x = (box.left + box.right) / 2,\n    y = (box.top + box.bottom) / 2;\n  const pos = cm.coordsChar({left: x, top: y}, 'client');\n  const spans = cm.findMarksAt(pos);\n\n  const getDocs = cm.getHelper(CodeMirror.Pos(0, 0), 'dagster-docs');\n  const docs = getDocs(cm, pos);\n\n  const annotations = [];\n  for (let i = 0; i < spans.length; ++i) {\n    const ann = spans[i].__annotation;\n    if (ann) {\n      annotations.push(ann);\n    }\n  }\n\n  if (docs || annotations.length) {\n    popupTooltip(docs, annotations, e);\n  }\n}\n\nfunction LintState(cm, options, hasGutter) {\n  this.marked = [];\n  this.options = options;\n  this.timeout = null;\n  this.hasGutter = hasGutter;\n  this.onMouseOver = function (e) {\n    onMouseOver(cm, e);\n  };\n  this.waitingFor = 0;\n}\n\nexport const patchLint = () => {\n  CodeMirror.defineOption('lint', false, function (cm, val, old) {\n    if (old && old !== CodeMirror.Init) {\n      clearMarks(cm);\n      if (cm.state.lint.options.lintOnChange !== false) {\n        cm.off('change', onChange);\n      }\n      CodeMirror.off(cm.getWrapperElement(), 'mouseover', cm.state.lint.onMouseOver);\n      clearTimeout(cm.state.lint.timeout);\n      delete cm.state.lint;\n    }\n\n    if (val) {\n      const gutters = cm.getOption('gutters');\n      let hasLintGutter = false;\n      for (let i = 0; i < gutters.length; ++i) {\n        if (gutters[i] === GUTTER_ID) {\n          hasLintGutter = true;\n        }\n      }\n      const state = (cm.state.lint = new LintState(cm, parseOptions(cm, val), hasLintGutter));\n      if (state.options.lintOnChange !== false) {\n        cm.on('change', onChange);\n      }\n      if (state.options.tooltips !== false && state.options.tooltips !== 'gutter') {\n        CodeMirror.on(cm.getWrapperElement(), 'mouseover', state.onMouseOver);\n      }\n    }\n  });\n\n  CodeMirror.defineExtension('performLint', function () {\n    if (this.state.lint) {\n      startLinting(this);\n    }\n  });\n};\n","import 'codemirror/addon/comment/comment';\nimport 'codemirror/addon/dialog/dialog';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/fold/foldgutter.css';\nimport 'codemirror/addon/fold/indent-fold';\nimport 'codemirror/addon/hint/show-hint';\nimport 'codemirror/addon/hint/show-hint.css';\nimport 'codemirror/addon/lint/lint.css';\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/keymap/sublime';\n\nimport {Editor} from 'codemirror';\nimport debounce from 'lodash/debounce';\nimport * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\nimport * as yaml from 'yaml';\n\nimport {StyledCodeMirror} from './CodeMirror';\nimport {patchLint} from './configeditor/codemirror-yaml/lint';\nimport {\n  YamlModeValidateFunction,\n  expandAutocompletionContextAtCursor,\n  findRangeInDocumentFromPath,\n  YamlModeValidationResult,\n} from './configeditor/codemirror-yaml/mode'; // eslint-disable-line import/no-duplicates\nimport {ConfigEditorHelpContext} from './configeditor/types/ConfigEditorHelpContext';\nimport {ConfigSchema} from './configeditor/types/ConfigSchema';\n\nexport {isHelpContextEqual} from './configeditor/isHelpContextEqual';\nexport {ConfigEditorHelp} from './configeditor/ConfigEditorHelp';\n\nexport type {ConfigEditorHelpContext, ConfigSchema, YamlModeValidationResult};\n\npatchLint();\n\ninterface ConfigEditorProps {\n  configCode: string;\n  readOnly: boolean;\n  configSchema?: ConfigSchema | null;\n\n  checkConfig: YamlModeValidateFunction;\n  onConfigChange: (newValue: string) => void;\n  onHelpContextChange: (helpContext: ConfigEditorHelpContext | null) => void;\n}\n\nconst AUTO_COMPLETE_AFTER_KEY = /^[a-zA-Z0-9_@(]$/;\nconst performLint = debounce((editor: any) => {\n  editor.performLint();\n}, 1000);\n\nconst ConfigEditorStyle = createGlobalStyle`\n  .react-codemirror2 .CodeMirror.cm-s-config-editor {\n    height: initial;\n    position: absolute;\n    inset: 0;\n  }\n`;\n\nexport class ConfigEditor extends React.Component<ConfigEditorProps> {\n  _editor?: Editor;\n\n  componentDidUpdate(prevProps: ConfigEditorProps) {\n    if (!this._editor) {\n      return;\n    }\n    if (prevProps.configSchema === this.props.configSchema) {\n      return;\n    }\n    this.performInitialPass();\n  }\n\n  shouldComponentUpdate(prevProps: ConfigEditorProps) {\n    // Unfortunately, updates to the ConfigEditor clear the linter highlighting for\n    // unknown reasons and they're recalculated asynchronously. To prevent flickering,\n    // only update if our input has meaningfully changed.\n    return (\n      prevProps.configCode !== this.props.configCode ||\n      prevProps.readOnly !== this.props.readOnly ||\n      prevProps.configSchema !== this.props.configSchema\n    );\n  }\n\n  // Public API\n\n  moveCursor = (line: number, ch: number) => {\n    if (!this._editor) {\n      return;\n    }\n    this._editor.setCursor(line, ch, {scroll: false});\n    const {clientHeight} = this._editor.getScrollInfo();\n    const {left, top} = this._editor.cursorCoords(true, 'local');\n    const offsetFromTop = 20;\n\n    this._editor?.scrollIntoView({\n      left,\n      right: left,\n      top: top - offsetFromTop,\n      bottom: top + (clientHeight - offsetFromTop),\n    });\n    this._editor.focus();\n  };\n\n  moveCursorToPath = (path: string[]) => {\n    if (!this._editor) {\n      return;\n    }\n    const codeMirrorDoc = this._editor.getDoc();\n    const yamlDoc = yaml.parseDocument(this.props.configCode);\n    const range = findRangeInDocumentFromPath(yamlDoc, path, 'key');\n    if (!range) {\n      return;\n    }\n    const from = codeMirrorDoc.posFromIndex(range ? range.start : 0) as CodeMirror.Position;\n    this.moveCursor(from.line, from.ch);\n  };\n\n  // End Public API\n\n  performInitialPass() {\n    // update the gutter and redlining\n    performLint(this._editor);\n\n    // update the contextual help based on the configSchema and content\n    const {context} = expandAutocompletionContextAtCursor(this._editor);\n    this.props.onHelpContextChange(context ? {type: context.closestMappingType} : null);\n  }\n\n  render() {\n    // Unfortunately, CodeMirror is too intense to be simulated in the JSDOM \"virtual\" DOM.\n    // Until we run tests against something like selenium, trying to render the editor in\n    // tests have to stop here.\n    if (process.env.NODE_ENV === 'test') {\n      return <span />;\n    }\n\n    return (\n      <div style={{flex: 1, position: 'relative'}}>\n        <ConfigEditorStyle />\n        <StyledCodeMirror\n          value={this.props.configCode}\n          theme={['config-editor']}\n          options={\n            {\n              mode: 'yaml',\n              lineNumbers: true,\n              readOnly: this.props.readOnly,\n              indentUnit: 2,\n              smartIndent: true,\n              showCursorWhenSelecting: true,\n              lintOnChange: false,\n              lint: {\n                checkConfig: this.props.checkConfig,\n                lintOnChange: false,\n                onUpdateLinting: false,\n              },\n              hintOptions: {\n                completeSingle: false,\n                closeOnUnfocus: false,\n                schema: this.props.configSchema,\n              },\n              keyMap: 'sublime',\n              extraKeys: {\n                'Cmd-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Ctrl-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Alt-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Shift-Tab': (editor: any) => editor.execCommand('indentLess'),\n                Tab: (editor: any) => editor.execCommand('indentMore'),\n                // Persistent search box in Query Editor\n                'Cmd-F': 'findPersistent',\n                'Ctrl-F': 'findPersistent',\n              },\n              gutters: [\n                'CodeMirror-foldgutter',\n                'CodeMirror-lint-markers',\n                'CodeMirror-linenumbers',\n              ],\n              foldGutter: true,\n            } as any\n          }\n          editorDidMount={(editor) => {\n            this._editor = editor;\n            this.performInitialPass();\n          }}\n          onBeforeChange={(editor, data, value) => {\n            this.props.onConfigChange(value);\n          }}\n          onCursorActivity={(editor: any) => {\n            if (editor.getSelection().length) {\n              this.props.onHelpContextChange(null);\n            } else {\n              const {context} = expandAutocompletionContextAtCursor(editor);\n              this.props.onHelpContextChange(context ? {type: context.closestMappingType} : null);\n            }\n          }}\n          onChange={(editor: Editor) => {\n            performLint(editor);\n          }}\n          onBlur={(editor: Editor) => {\n            performLint(editor);\n          }}\n          onKeyUp={(editor, event: KeyboardEvent) => {\n            if (AUTO_COMPLETE_AFTER_KEY.test(event.key)) {\n              editor.execCommand('autocomplete');\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import {ConfigEditorHelpContext} from './types/ConfigEditorHelpContext';\n\nexport const isHelpContextEqual = (\n  prev: ConfigEditorHelpContext | null,\n  next: ConfigEditorHelpContext | null,\n) => (prev && prev.type.key) === (next && next.type.key);\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Colors} from '../Colors';\nimport {ConfigTypeSchema, TypeData} from '../ConfigTypeSchema';\nimport {isHelpContextEqual} from '../configeditor/isHelpContextEqual';\n\nimport {ConfigEditorHelpContext} from './types/ConfigEditorHelpContext';\n\ninterface ConfigEditorHelpProps {\n  context: ConfigEditorHelpContext | null;\n  allInnerTypes: TypeData[];\n}\n\nexport const ConfigEditorHelp: React.FC<ConfigEditorHelpProps> = React.memo(\n  ({context, allInnerTypes}) => {\n    if (!context) {\n      return <Container />;\n    }\n    return (\n      <Container>\n        <ConfigScrollWrap>\n          <ConfigTypeSchema type={context.type} typesInScope={allInnerTypes} maxDepth={2} />\n        </ConfigScrollWrap>\n        <AutocompletionsNote>Use Ctrl+Space to show auto-completions inline.</AutocompletionsNote>\n      </Container>\n    );\n  },\n  (prev, next) => isHelpContextEqual(prev.context, next.context),\n);\n\nconst AutocompletionsNote = styled.div`\n  font-size: 0.75rem;\n  text-align: center;\n  padding: 4px;\n  border-top: 1px solid ${Colors.KeylineGray};\n  background: ${Colors.Gray100};\n  color: ${Colors.Gray500};\n`;\n\nconst ConfigScrollWrap = styled.div`\n  padding: 8px;\n  color: ${Colors.Dark};\n  flex: 1;\n  pointer-events: initial;\n  max-height: 100%;\n  overflow-y: auto;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: ${Colors.Gray50};\n  height: 100%;\n`;\n","import {gql} from '@apollo/client';\nimport {YamlModeValidationResult} from '@dagster-io/ui';\nimport yaml from 'yaml';\n\nimport {ConfigEditorValidationFragment} from './types/ConfigEditorUtils.types';\n\nexport const CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT = gql`\n  fragment ConfigEditorRunConfigSchemaFragment on RunConfigSchema {\n    rootConfigType {\n      key\n    }\n    allConfigTypes {\n      ...AllConfigTypesForEditor\n    }\n  }\n\n  fragment AllConfigTypesForEditor on ConfigType {\n    key\n    description\n    isSelector\n    typeParamKeys\n    ... on RegularConfigType {\n      givenName\n    }\n    ... on MapConfigType {\n      keyLabelName\n    }\n    ... on EnumConfigType {\n      givenName\n      values {\n        value\n        description\n      }\n    }\n    ... on CompositeConfigType {\n      ...CompositeConfigTypeForSchema\n    }\n    ... on ScalarUnionConfigType {\n      key\n      scalarTypeKey\n      nonScalarTypeKey\n    }\n  }\n\n  fragment CompositeConfigTypeForSchema on CompositeConfigType {\n    fields {\n      name\n      description\n      isRequired\n      configTypeKey\n      defaultValueAsJson\n    }\n  }\n`;\n\nexport const CONFIG_EDITOR_VALIDATION_FRAGMENT = gql`\n  fragment ConfigEditorValidationFragment on PipelineConfigValidationResult {\n    __typename\n    ... on RunConfigValidationInvalid {\n      errors {\n        __typename\n        reason\n        message\n        stack {\n          entries {\n            __typename\n            ... on EvaluationStackPathEntry {\n              fieldName\n            }\n            ... on EvaluationStackListItemEntry {\n              listIndex\n            }\n            ... on EvaluationStackMapKeyEntry {\n              mapKey\n            }\n            ... on EvaluationStackMapValueEntry {\n              mapKey\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype StackEntry =\n  | {\n      __typename: 'EvaluationStackPathEntry';\n      fieldName: string;\n    }\n  | {\n      __typename: 'EvaluationStackListItemEntry';\n      listIndex: number;\n    }\n  | {\n      __typename: 'EvaluationStackMapKeyEntry';\n      mapKey: object;\n    }\n  | {\n      __typename: 'EvaluationStackMapValueEntry';\n      mapKey: object;\n    };\n\nexport function errorStackToYamlPath(entries: StackEntry[]) {\n  return entries.map((entry) => {\n    switch (entry.__typename) {\n      case 'EvaluationStackPathEntry':\n        return entry.fieldName;\n      case 'EvaluationStackListItemEntry':\n        return `${entry.listIndex}`;\n      case 'EvaluationStackMapKeyEntry':\n      case 'EvaluationStackMapValueEntry':\n        return `${entry.mapKey}`;\n    }\n  });\n}\n\nexport function responseToYamlValidationResult(\n  configYaml: string,\n  response: ConfigEditorValidationFragment,\n): YamlModeValidationResult {\n  if (response.__typename !== 'RunConfigValidationInvalid') {\n    return {isValid: true};\n  }\n\n  const errors = response.errors.map((err) => ({\n    message: err.message,\n    reason: err.reason,\n    path: errorStackToYamlPath(err.stack.entries),\n  }));\n\n  // Errors at the top level have no stack path because they are not within any\n  // dicts. To avoid highlighting the entire editor, associate them with the first\n  // element of the top dict.\n  const parsed = yaml.parse(configYaml);\n  const topLevelKey = Object.keys(parsed);\n  errors.forEach((error) => {\n    if (error.path.length === 0 && topLevelKey.length) {\n      error.path = [topLevelKey[0]];\n    }\n  });\n\n  return {isValid: false, errors};\n}\n","import {Button, Icon, MenuItem, Select} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {ModeNotFoundError} from './ModeNotFoundError';\n\ninterface Mode {\n  name: string;\n}\n\ninterface ConfigEditorModePickerProps {\n  modes: Mode[];\n  modeError?: ModeNotFoundError;\n  modeName: string | null;\n  onModeChange: (mode: string) => void;\n}\n\nconst MODE_PICKER_HINT_TEXT = `To add a mode, add a ModeDefinition to the pipeline.`;\n\nexport const ConfigEditorModePicker: React.FC<ConfigEditorModePickerProps> = (props) => {\n  const resolvedMode = props.modeName\n    ? props.modes.find((m) => m.name === props.modeName)\n    : props.modes[0];\n\n  React.useEffect(() => {\n    if (resolvedMode && resolvedMode.name !== props.modeName) {\n      props.onModeChange?.(resolvedMode.name);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [resolvedMode, props.modeName]);\n\n  const singleMode = props.modes.length === 1;\n  const valid = !props.modeError;\n  const disabled = singleMode && valid;\n\n  const onItemSelect = (mode: Mode) => {\n    props.onModeChange?.(mode.name);\n  };\n\n  return (\n    <Select\n      activeItem={resolvedMode}\n      filterable={true}\n      disabled={disabled}\n      items={props.modes}\n      itemPredicate={(query, mode) => query.length === 0 || mode.name.includes(query)}\n      itemRenderer={(mode, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          key={mode.name}\n          text={mode.name}\n          onClick={props.handleClick}\n        />\n      )}\n      onItemSelect={onItemSelect}\n    >\n      <Button\n        icon={valid ? undefined : <Icon name=\"error\" />}\n        intent={valid ? 'none' : 'danger'}\n        title={disabled ? MODE_PICKER_HINT_TEXT : 'Current execution mode'}\n        disabled={disabled}\n        rightIcon={<Icon name=\"expand_more\" />}\n        data-test-id=\"mode-picker-button\"\n      >\n        {valid\n          ? resolvedMode\n            ? `Mode: ${resolvedMode.name}`\n            : 'Select Mode'\n          : 'Invalid Mode Selection'}\n      </Button>\n    </Select>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpSelectorQuery, OpSelectorQueryVariables} from './types/OpSelector.types';\n\ninterface IOpSelectorProps {\n  pipelineName: string;\n  serverProvidedSubsetError?: {message: string};\n  value: string[] | null;\n  query: string | null;\n  onChange: (value: string[] | null, query: string | null) => void;\n  flattenGraphs: boolean;\n  onFlattenGraphsChange: (v: boolean) => void;\n  repoAddress: RepoAddress;\n}\n\nconst SOLID_SELECTOR_QUERY = gql`\n  query OpSelectorQuery($selector: PipelineSelector!, $requestScopeHandleID: String) {\n    pipelineOrError(params: $selector) {\n      __typename\n      ... on Pipeline {\n        id\n        name\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const OpSelector = (props: IOpSelectorProps) => {\n  const {\n    serverProvidedSubsetError,\n    onChange,\n    pipelineName,\n    repoAddress,\n    onFlattenGraphsChange,\n  } = props;\n  const [focused, setFocused] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const flattenGraphs = props.flattenGraphs || false;\n  const selector = {...repoAddressToSelector(repoAddress), pipelineName};\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n  const {data, loading} = useQuery<OpSelectorQuery, OpSelectorQueryVariables>(\n    SOLID_SELECTOR_QUERY,\n    {\n      variables: {selector, requestScopeHandleID: flattenGraphs ? undefined : ''},\n    },\n  );\n\n  const query = props.query || '*';\n\n  const opHandles =\n    data?.pipelineOrError.__typename === 'Pipeline'\n      ? flattenGraphs\n        ? explodeCompositesInHandleGraph(data.pipelineOrError.solidHandles)\n        : data.pipelineOrError.solidHandles\n      : [];\n  const ops = opHandles.map((h) => h.solid);\n  const flattenGraphsEnabled =\n    flattenGraphs || ops.some((f) => f.definition.__typename === 'CompositeSolidDefinition');\n\n  const opsFetchError =\n    (data?.pipelineOrError.__typename !== 'Pipeline' && data?.pipelineOrError.message) || null;\n\n  const queryResultOps = filterByQuery(ops, query).all;\n  const invalidOpSelection = !loading && queryResultOps.length === 0;\n\n  const errorMessage = invalidOpSelection\n    ? isJob\n      ? `You must provide a valid op query or * to execute the entire job.`\n      : `You must provide a valid solid query or * to execute the entire pipeline.`\n    : serverProvidedSubsetError\n    ? serverProvidedSubsetError.message\n    : opsFetchError;\n\n  const onTextChange = (nextQuery: string) => {\n    if (nextQuery === '') {\n      nextQuery = '*';\n    }\n    const queryResultOps = filterByQuery(ops, nextQuery).all;\n\n    // If all ops are returned, we set the subset to null rather than sending\n    // a comma separated list of evey solid to the API\n    if (queryResultOps.length === ops.length) {\n      onChange(null, nextQuery);\n    } else {\n      onChange(\n        queryResultOps.map((s) => s.name),\n        nextQuery,\n      );\n    }\n  };\n\n  if (!data?.pipelineOrError) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      <Popover\n        isOpen={focused && !!errorMessage}\n        position=\"bottom-left\"\n        content={<PopoverErrorWrap>{errorMessage}</PopoverErrorWrap>}\n      >\n        <ShortcutHandler\n          shortcutLabel=\"⌥S\"\n          shortcutFilter={(e) => e.code === 'KeyS' && e.altKey}\n          onShortcut={() => inputRef.current?.focus()}\n        >\n          <GraphQueryInput\n            width={(query !== '*' && query !== '') || focused || flattenGraphsEnabled ? 350 : 90}\n            intent={errorMessage ? 'danger' : 'none'}\n            items={ops}\n            ref={inputRef}\n            value={query}\n            placeholder=\"Type an op subset…\"\n            onChange={onTextChange}\n            onFocus={() => setFocused(true)}\n            onBlur={() => setFocused(false)}\n            linkToPreview={{\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName,\n              isJob,\n            }}\n            flattenGraphsEnabled={flattenGraphsEnabled}\n            flattenGraphs={flattenGraphs}\n            setFlattenGraphs={() => {\n              onFlattenGraphsChange(!flattenGraphs);\n            }}\n          />\n        </ShortcutHandler>\n      </Popover>\n    </Box>\n  );\n};\n\nconst PopoverErrorWrap = styled.div`\n  padding: 4px 8px;\n  border-radius: 2px;\n  border: 1px solid ${Colors.Red500};\n  background: ${Colors.Red200};\n  color: ${Colors.Red700};\n`;\n","import {gql} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {Intent} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Checkbox,\n  Colors,\n  Icon,\n  SplitPanelContainer,\n  Tag,\n  Code,\n  Tooltip,\n  FontFamily,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {errorStackToYamlPath} from '../configeditor/ConfigEditorUtils';\nimport {\n  CompositeConfigTypeForSchemaFragment,\n  ConfigEditorRunConfigSchemaFragment,\n} from '../configeditor/types/ConfigEditorUtils.types';\n\nimport {LaunchpadType} from './LaunchpadRoot';\nimport {\n  RunPreviewValidationErrorsFragment,\n  RunPreviewValidationFragment,\n} from './types/RunPreview.types';\n\ntype ValidationError = RunPreviewValidationErrorsFragment;\ntype ValidationErrorOrNode = ValidationError | React.ReactNode;\n\nfunction isValidationError(e: ValidationErrorOrNode): e is ValidationError {\n  return e && typeof e === 'object' && '__typename' in e ? true : false;\n}\n\nconst stateToHint: {[key: string]: {title: string; intent: Intent}} = {\n  invalid: {\n    title: `You need to fix this configuration section.`,\n    intent: 'danger',\n  },\n  missing: {\n    title: `You need to add this configuration section.`,\n    intent: 'danger',\n  },\n  present: {\n    title: `This section is present and valid.`,\n    intent: 'none',\n  },\n  none: {title: `This section is empty and valid.`, intent: 'none'},\n};\n\nconst RemoveExtraConfigButton = ({\n  onRemoveExtraPaths,\n  extraNodes,\n  disabled,\n}: {\n  extraNodes: string[];\n  onRemoveExtraPaths: (paths: string[]) => void;\n  disabled: boolean;\n}) => {\n  const confirm = useConfirmation();\n\n  const knownKeyExtraPaths: {[key: string]: string[]} = {};\n  const otherPaths: string[] = [];\n\n  for (const path of extraNodes) {\n    const parts = path.split('.');\n\n    // If the length is 2, the first part of the path is a known key, such as \"solids\", \"resouces\",\n    // or \"loggers\", and the user has provided extra config for one of those. We will keep track of\n    // these in `knownKeyExtraPaths` just so we can display them with an extra description.\n    if (parts.length === 2) {\n      const [type, name] = parts;\n      if (!knownKeyExtraPaths[type]) {\n        knownKeyExtraPaths[type] = [];\n      }\n      knownKeyExtraPaths[type].push(name);\n    } else {\n      otherPaths.push(path);\n    }\n  }\n\n  const onClick = async () => {\n    await confirm({\n      title: 'Remove extra config',\n      description: (\n        <div>\n          <p>\n            {`You have provided extra configuration in your run config which does not conform to your\n            pipeline's config schema.`}\n          </p>\n          {Object.entries(knownKeyExtraPaths).length > 0 &&\n            Object.entries(knownKeyExtraPaths).map(([key, value]) => (\n              <>\n                <p>Extra {key}:</p>\n                <ul>\n                  {value.map((v) => (\n                    <li key={v}>\n                      <Code>{v}</Code>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            ))}\n          {otherPaths.length > 0 && (\n            <>\n              <p>Other extra paths:</p>\n              <ul>\n                {otherPaths.map((v) => (\n                  <li key={v}>\n                    <Code>{v}</Code>\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n          <p>\n            Clicking confirm will automatically remove this extra configuration from your run\n            config.\n          </p>\n        </div>\n      ),\n    });\n    onRemoveExtraPaths(extraNodes);\n  };\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n      <Button disabled={disabled} onClick={onClick}>\n        Remove extra config\n      </Button>\n      {disabled ? (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"check_circle\" color={Colors.Green500} />\n          No extra config to remove\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst ScaffoldConfigButton = ({\n  onScaffoldMissingConfig,\n  missingNodes,\n  disabled,\n}: {\n  missingNodes: string[];\n  onScaffoldMissingConfig: () => void;\n  disabled: boolean;\n}) => {\n  const confirm = useConfirmation();\n\n  const confirmationMessage = (\n    <div>\n      {missingNodes.length > 0 && (\n        <>\n          <p>Missing paths:</p>\n          <ul>\n            {missingNodes.map((v) => (\n              <li key={v}>\n                <Code>{v}</Code>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      <p>\n        Clicking confirm will automatically scaffold this missing configuration into your run config\n        with default values. You will need to change the values appropriately.\n      </p>\n    </div>\n  );\n\n  const onClick = async () => {\n    await confirm({\n      title: 'Scaffold missing config',\n      description: confirmationMessage,\n    });\n    onScaffoldMissingConfig();\n  };\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n      <Button disabled={disabled} onClick={onClick}>\n        Scaffold missing config\n      </Button>\n      {disabled ? (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"check_circle\" color={Colors.Green500} />\n          No missing config\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\ninterface RunPreviewProps {\n  validation: RunPreviewValidationFragment | null;\n  document: any | null;\n  launchpadType: LaunchpadType;\n\n  runConfigSchema?: ConfigEditorRunConfigSchemaFragment;\n  onHighlightPath: (path: string[]) => void;\n  onRemoveExtraPaths: (paths: string[]) => void;\n  onScaffoldMissingConfig: () => void;\n  solidSelection: string[] | null;\n}\n\nexport const RunPreview: React.FC<RunPreviewProps> = (props) => {\n  const {\n    document,\n    validation,\n    onHighlightPath,\n    launchpadType,\n    onRemoveExtraPaths,\n    onScaffoldMissingConfig,\n    solidSelection,\n    runConfigSchema,\n  } = props;\n  const [errorsOnly, setErrorsOnly] = React.useState(false);\n\n  const rootCompositeChildren = React.useMemo(() => {\n    if (!runConfigSchema) {\n      return {};\n    }\n\n    const {allConfigTypes, rootConfigType} = runConfigSchema;\n    const children: {\n      [fieldName: string]: CompositeConfigTypeForSchemaFragment;\n    } = {};\n\n    const root = allConfigTypes.find((t) => t.key === rootConfigType.key);\n    if (root?.__typename !== 'CompositeConfigType') {\n      return children;\n    }\n\n    root.fields.forEach((field) => {\n      const allConfigVersion = allConfigTypes.find((t) => t.key === field.configTypeKey);\n      if (allConfigVersion?.__typename !== 'CompositeConfigType') {\n        return;\n      }\n      children[field.name] = allConfigVersion;\n    });\n\n    return children;\n  }, [runConfigSchema]);\n\n  const extraNodes: string[] = [];\n  const missingNodes: string[] = [];\n  const errorsAndPaths: {\n    pathKey: string;\n    error: ValidationErrorOrNode;\n  }[] = [];\n\n  if (validation && validation.__typename === 'RunConfigValidationInvalid') {\n    validation.errors.forEach((e) => {\n      const path = errorStackToYamlPath(e.stack.entries);\n\n      errorsAndPaths.push({pathKey: path.join('.'), error: e});\n\n      if (e.__typename === 'MissingFieldConfigError') {\n        missingNodes.push([...path, e.field.name].join('.'));\n      } else if (e.__typename === 'MissingFieldsConfigError') {\n        for (const field of e.fields) {\n          missingNodes.push([...path, field.name].join('.'));\n        }\n      } else if (e.__typename === 'FieldNotDefinedConfigError') {\n        extraNodes.push([...path, e.fieldName].join('.'));\n      } else if (e.__typename === 'FieldsNotDefinedConfigError') {\n        for (const fieldName of e.fieldNames) {\n          extraNodes.push([...path, fieldName].join('.'));\n        }\n      } else if (e.__typename === 'RuntimeMismatchConfigError') {\n        // If an entry at a path is the wrong type,\n        // it is equivalent to it being missing\n        missingNodes.push(path.join('.'));\n      }\n    });\n  }\n\n  if (validation?.__typename === 'InvalidSubsetError') {\n    errorsAndPaths.push({pathKey: '', error: validation.message});\n  }\n\n  if (validation?.__typename === 'PythonError') {\n    const info = <PythonErrorInfo error={validation} />;\n    errorsAndPaths.push({\n      pathKey: '',\n      error: (\n        <span>\n          PythonError:{' '}\n          <ButtonLink onClick={() => showCustomAlert({body: info})}>Click for details</ButtonLink>\n        </span>\n      ),\n    });\n  }\n\n  const {resources, ops, solids, ...rest} = rootCompositeChildren;\n  const hasOps = !!ops?.fields;\n\n  const itemsIn = (parents: string[], items: {name: string; isRequired: boolean}[]) => {\n    const boxes = items\n      .map((item) => {\n        // If a solid selection is in use, discard anything not in it.\n        if (solidSelection?.length && !solidSelection?.includes(item.name)) {\n          return null;\n        }\n\n        const path = [...parents, item.name];\n        const pathKey = path.join('.');\n        const pathErrors = errorsAndPaths\n          .filter((e) => e.pathKey === pathKey || e.pathKey.startsWith(`${pathKey}.`))\n          .map((e) => e.error);\n\n        const isPresent = pathExistsInObject(path, document);\n        const containsMissing = missingNodes.some((missingNode) =>\n          missingNode.includes(path.join('.')),\n        );\n        const isInvalid = pathErrors.length || containsMissing;\n        const isMissing = path.some((_, idx) =>\n          missingNodes.includes(path.slice(0, idx + 1).join('.')),\n        );\n\n        if (errorsOnly && !isInvalid) {\n          return false;\n        }\n\n        const state =\n          isMissing && item.isRequired\n            ? 'missing'\n            : isInvalid\n            ? 'invalid'\n            : isPresent\n            ? 'present'\n            : 'none';\n\n        return (\n          <Tooltip\n            position=\"bottom\"\n            content={stateToHint[state].title}\n            intent={stateToHint[state].intent}\n            key={item.name}\n          >\n            <Tag\n              key={item.name}\n              intent={stateToHint[state].intent}\n              onClick={() => {\n                const first = pathErrors.find(isValidationError);\n                onHighlightPath(first ? errorStackToYamlPath(first.stack.entries) : path);\n              }}\n            >\n              {item.name}\n            </Tag>\n          </Tooltip>\n        );\n      })\n      .filter(Boolean);\n\n    if (!boxes.length) {\n      return <ItemsEmptyNotice>Nothing to display.</ItemsEmptyNotice>;\n    }\n    return boxes;\n  };\n\n  return (\n    <SplitPanelContainer\n      identifier=\"run-preview\"\n      axis=\"horizontal\"\n      first={\n        <ErrorListContainer>\n          <Section>\n            <SectionTitle>Errors</SectionTitle>\n            {errorsAndPaths.length ? (\n              errorsAndPaths.map((item, idx) => (\n                <ErrorRow key={idx} error={item.error} onHighlight={onHighlightPath} />\n              ))\n            ) : (\n              <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n                <Icon name=\"check_circle\" color={Colors.Green500} />\n                No errors\n              </Box>\n            )}\n          </Section>\n          <Section>\n            <SectionTitle>Config actions:</SectionTitle>\n            <Box flex={{direction: 'column', gap: 8}} padding={{top: 4, bottom: 20}}>\n              <ScaffoldConfigButton\n                onScaffoldMissingConfig={onScaffoldMissingConfig}\n                missingNodes={missingNodes}\n                disabled={!missingNodes.length}\n              />\n              <RemoveExtraConfigButton\n                onRemoveExtraPaths={onRemoveExtraPaths}\n                extraNodes={extraNodes}\n                disabled={!extraNodes.length}\n              />\n            </Box>\n          </Section>\n        </ErrorListContainer>\n      }\n      firstInitialPercent={50}\n      firstMinSize={150}\n      second={\n        <>\n          <div style={{overflowY: 'scroll', width: '100%', height: '100%'}}>\n            <RuntimeAndResourcesSection>\n              <Section>\n                <SectionTitle>Runtime</SectionTitle>\n                <ItemSet>\n                  {itemsIn(\n                    [],\n                    Object.keys(rest).map((name) => ({name, isRequired: false})),\n                  )}\n                </ItemSet>\n              </Section>\n              {(resources?.fields.length || 0) > 0 && (\n                <Section>\n                  <SectionTitle>Resources</SectionTitle>\n                  <ItemSet>{itemsIn(['resources'], resources?.fields || [])}</ItemSet>\n                </Section>\n              )}\n            </RuntimeAndResourcesSection>\n            <Section>\n              <SectionTitle>{launchpadType === 'asset' ? 'Assets (Ops)' : 'Ops'}</SectionTitle>\n              <ItemSet>\n                {itemsIn(\n                  [hasOps ? 'ops' : 'solids'],\n                  (hasOps ? ops?.fields : solids?.fields) || [],\n                )}\n              </ItemSet>\n            </Section>\n            <div style={{height: 50}} />\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              right: 0,\n              padding: '12px 15px 0px 10px',\n              background: 'rgba(255,255,255,0.7)',\n            }}\n          >\n            <Checkbox\n              label=\"Errors Only\"\n              checked={errorsOnly}\n              onChange={() => setErrorsOnly(!errorsOnly)}\n            />\n          </div>\n        </>\n      }\n    />\n  );\n};\n\nexport const RUN_PREVIEW_VALIDATION_FRAGMENT = gql`\n  fragment RunPreviewValidationFragment on PipelineConfigValidationResult {\n    __typename\n    ... on RunConfigValidationInvalid {\n      errors {\n        ...RunPreviewValidationErrors\n      }\n    }\n    ... on PipelineNotFoundError {\n      message\n    }\n    ... on InvalidSubsetError {\n      message\n    }\n    ...PythonErrorFragment\n  }\n\n  fragment RunPreviewValidationErrors on PipelineConfigValidationError {\n    reason\n    message\n    stack {\n      entries {\n        __typename\n        ... on EvaluationStackPathEntry {\n          fieldName\n        }\n        ... on EvaluationStackListItemEntry {\n          listIndex\n        }\n        ... on EvaluationStackMapKeyEntry {\n          mapKey\n        }\n        ... on EvaluationStackMapValueEntry {\n          mapKey\n        }\n      }\n    }\n    ... on MissingFieldConfigError {\n      field {\n        name\n      }\n    }\n    ... on MissingFieldsConfigError {\n      fields {\n        name\n      }\n    }\n    ... on FieldNotDefinedConfigError {\n      fieldName\n    }\n    ... on FieldsNotDefinedConfigError {\n      fieldNames\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst SectionTitle = styled.div`\n  color: ${Colors.Gray400};\n  text-transform: uppercase;\n  font-size: 12px;\n  margin-bottom: 8px;\n`;\n\nconst Section = styled.div`\n  margin-top: 14px;\n  margin-left: 10px;\n`;\n\nconst ItemSet = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n\nconst ItemsEmptyNotice = styled.div`\n  font-size: 13px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n`;\n\nconst ErrorListContainer = styled.div`\n  margin-left: 10px;\n  overflow-y: scroll;\n  height: 100%;\n`;\n\nconst ErrorRowContainer = styled.div<{hoverable: boolean}>`\n  text-align: left;\n  font-size: 13px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-family: ${FontFamily.monospace};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  border-bottom: 1px solid #ccc;\n  padding: 8px;\n  margin: 8px 12px 0 -8px;\n  &:last-child {\n    border-bottom: 0;\n    margin-bottom: 15px;\n  }\n  ${({hoverable}) =>\n    hoverable &&\n    `&:hover {\n      background: ${Colors.Gray50};\n    }\n  `}\n`;\n\nconst RuntimeAndResourcesSection = styled.div`\n  display: flex;\n  gap: 12px;\n  @media (max-width: 800px) {\n    flex-direction: column;\n  }\n`;\n\nconst ErrorRow: React.FC<{\n  error: ValidationError | React.ReactNode;\n  onHighlight: (path: string[]) => void;\n}> = ({error, onHighlight}) => {\n  let message = error;\n  let target: ValidationError | null = null;\n  if (isValidationError(error)) {\n    message = error.message;\n    target = error;\n  }\n\n  let displayed = message;\n  if (typeof message === 'string' && message.length > 400) {\n    displayed = truncateErrorMessage(message);\n  }\n\n  return (\n    <ErrorRowContainer\n      hoverable={!!target}\n      onClick={() => target && onHighlight(errorStackToYamlPath(target.stack.entries))}\n    >\n      <div style={{paddingRight: 4}}>\n        <Icon name=\"error\" color={Colors.Red500} />\n      </div>\n      <div>\n        {displayed}\n        {displayed !== message && (\n          <>\n            &nbsp;\n            <ButtonLink\n              onClick={() =>\n                showCustomAlert({\n                  body: <div style={{whiteSpace: 'pre-wrap'}}>{message}</div>,\n                })\n              }\n            >\n              View all\n            </ButtonLink>\n          </>\n        )}\n      </div>\n    </ErrorRowContainer>\n  );\n};\n\nfunction truncateErrorMessage(message: string) {\n  let split = message.indexOf('{');\n  if (split === -1) {\n    split = message.indexOf('. ');\n  }\n  if (split === -1) {\n    split = 400;\n  }\n  return message.substr(0, split) + '... ';\n}\n\nfunction pathExistsInObject(path: string[], object: any): boolean {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  if (path.length === 0) {\n    return true;\n  }\n  const [first, ...rest] = path;\n  return pathExistsInObject(rest, object[first]);\n}\n","import {assertUnreachable} from '../app/Util';\nimport {\n  AllConfigTypesForEditorFragment,\n  ConfigEditorRunConfigSchemaFragment,\n} from '../configeditor/types/ConfigEditorUtils.types';\n\nexport const scaffoldType = (\n  configTypeKey: string,\n  typeLookup: {[key: string]: AllConfigTypesForEditorFragment},\n): any => {\n  const type = typeLookup[configTypeKey];\n\n  switch (type.__typename) {\n    case 'CompositeConfigType':\n      if (type.isSelector) {\n        // Could potentially do something better here, like scaffold out\n        // all the types and let the user delete the ones they don't want.\n        return '<selector>';\n      }\n\n      const config = {};\n      for (const field of type.fields) {\n        const {name, isRequired, configTypeKey} = field;\n        if (isRequired) {\n          config[name] = scaffoldType(configTypeKey, typeLookup);\n        }\n      }\n\n      return config;\n    case 'ArrayConfigType':\n      return [];\n    case 'MapConfigType':\n      return {};\n    case 'NullableConfigType':\n      // If a type is nullable we include it in the scaffolded config anyway\n      // by using the inner type\n      const innerType = type.typeParamKeys[0];\n      return scaffoldType(innerType, typeLookup);\n    case 'EnumConfigType':\n      // Here we just join all the potential enum values with a |. The user needs to delete\n      // all the values but the ones they want to use.\n      return type.values.map((i) => i.value).join('|');\n    case 'ScalarUnionConfigType':\n      // Here we just scaffold the scalar value. Could potentially try to\n      // scaffold the other type instead.\n      const {scalarTypeKey} = type;\n      return scaffoldType(scalarTypeKey, typeLookup);\n    case 'RegularConfigType':\n      return {\n        String: '',\n        Int: 0,\n        Float: 0.0,\n        Bool: true,\n        Any: 'AnyType',\n      }[type.key];\n    default:\n      assertUnreachable(type);\n  }\n};\n\nexport const createTypeLookup = (allConfigTypes: AllConfigTypesForEditorFragment[]) => {\n  const typeLookup: {[key: string]: AllConfigTypesForEditorFragment} = {};\n  for (const type of allConfigTypes) {\n    typeLookup[type.key] = type;\n  }\n\n  return typeLookup;\n};\n\nexport const scaffoldPipelineConfig = (configSchema: ConfigEditorRunConfigSchemaFragment) => {\n  const {allConfigTypes, rootConfigType} = configSchema;\n  const typeLookup = createTypeLookup(allConfigTypes);\n  const config = scaffoldType(rootConfigType.key, typeLookup);\n  return config;\n};\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  ConfigEditor,\n  ConfigEditorHelpContext,\n  Group,\n  Icon,\n  SecondPanelToggle,\n  SplitPanelContainer,\n  isHelpContextEqual,\n  ConfigEditorHelp,\n  TextInput,\n} from '@dagster-io/ui';\nimport merge from 'deepmerge';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\nimport * as yaml from 'yaml';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {\n  IExecutionSession,\n  IExecutionSessionChanges,\n  PipelineRunTag,\n  SessionBase,\n} from '../app/ExecutionSessionStorage';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {\n  CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT,\n  CONFIG_EDITOR_VALIDATION_FRAGMENT,\n  responseToYamlValidationResult,\n} from '../configeditor/ConfigEditorUtils';\nimport {PipelineSelector, RepositorySelector} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  ConfigEditorConfigPicker,\n  CONFIG_PARTITION_SELECTION_QUERY,\n} from './ConfigEditorConfigPicker';\nimport {ConfigEditorModePicker} from './ConfigEditorModePicker';\nimport {useLaunchPadHooks} from './LaunchpadHooksContext';\nimport {LaunchpadType} from './LaunchpadRoot';\nimport {LoadingOverlay} from './LoadingOverlay';\nimport {OpSelector} from './OpSelector';\nimport {RunPreview, RUN_PREVIEW_VALIDATION_FRAGMENT} from './RunPreview';\nimport {SessionSettingsBar} from './SessionSettingsBar';\nimport {TagContainer, TagEditor} from './TagEditor';\nimport {scaffoldPipelineConfig} from './scaffoldType';\nimport {\n  ConfigEditorPipelinePresetFragment,\n  ConfigPartitionSelectionQuery,\n  ConfigPartitionSelectionQueryVariables,\n} from './types/ConfigEditorConfigPicker.types';\nimport {\n  LaunchpadSessionPartitionSetsFragment,\n  LaunchpadSessionPipelineFragment,\n} from './types/LaunchpadRoot.types';\nimport {\n  PipelineExecutionConfigSchemaQuery,\n  PreviewConfigQuery,\n  PreviewConfigQueryVariables,\n} from './types/LaunchpadSession.types';\n\nconst YAML_SYNTAX_INVALID = `The YAML you provided couldn't be parsed. Please fix the syntax errors and try again.`;\nconst LOADING_CONFIG_FOR_PARTITION = `Generating configuration...`;\nconst LOADING_CONFIG_SCHEMA = `Loading config schema...`;\nconst LOADING_RUN_PREVIEW = `Checking config...`;\n\ntype Preset = ConfigEditorPipelinePresetFragment;\n\ninterface LaunchpadSessionProps {\n  session: IExecutionSession;\n  onSave: (changes: IExecutionSessionChanges) => void;\n  launchpadType: LaunchpadType;\n  pipeline: LaunchpadSessionPipelineFragment;\n  partitionSets: LaunchpadSessionPartitionSetsFragment;\n  repoAddress: RepoAddress;\n  initialExecutionSessionState?: Partial<IExecutionSession>;\n}\n\ninterface ILaunchpadSessionState {\n  preview: PreviewConfigQuery | null;\n  previewLoading: boolean;\n  previewedDocument: any | null;\n  configLoading: boolean;\n  editorHelpContext: ConfigEditorHelpContext | null;\n  tagEditorOpen: boolean;\n}\n\ntype Action =\n  | {type: 'preview-loading'; payload: boolean}\n  | {\n      type: 'set-preview';\n      payload: {\n        preview: PreviewConfigQuery | null;\n        previewLoading: boolean;\n        previewedDocument: string | null;\n      };\n    }\n  | {type: 'toggle-tag-editor'; payload: boolean}\n  | {type: 'toggle-config-loading'; payload: boolean}\n  | {type: 'set-editor-help-context'; payload: ConfigEditorHelpContext | null};\n\nconst reducer = (state: ILaunchpadSessionState, action: Action) => {\n  switch (action.type) {\n    case 'preview-loading':\n      return {...state, previewLoading: action.payload};\n    case 'set-preview': {\n      const {preview, previewedDocument, previewLoading} = action.payload;\n      return {\n        ...state,\n        preview,\n        previewedDocument,\n        previewLoading,\n      };\n    }\n    case 'toggle-tag-editor':\n      return {...state, tagEditorOpen: action.payload};\n    case 'toggle-config-loading':\n      return {...state, configLoading: action.payload};\n    case 'set-editor-help-context':\n      return {...state, editorHelpContext: action.payload};\n    default:\n      return state;\n  }\n};\n\nconst LaunchButtonContainer: React.FC<{launchpadType: LaunchpadType}> = ({\n  launchpadType,\n  children,\n}) => {\n  if (launchpadType === 'asset') {\n    return (\n      <Box\n        flex={{direction: 'row'}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        padding={{right: 12, vertical: 8}}\n      >\n        <div style={{flexGrow: 1}} />\n        {children}\n      </Box>\n    );\n  } else {\n    // job\n    return <div style={{position: 'absolute', bottom: 12, right: 12, zIndex: 1}}>{children}</div>;\n  }\n};\n\nconst initialState: ILaunchpadSessionState = {\n  preview: null,\n  previewLoading: false,\n  previewedDocument: null,\n  configLoading: false,\n  editorHelpContext: null,\n  tagEditorOpen: false,\n};\n\nconst LaunchpadSession: React.FC<LaunchpadSessionProps> = (props) => {\n  const {\n    launchpadType,\n    session: currentSession,\n    onSave,\n    partitionSets,\n    pipeline,\n    repoAddress,\n  } = props;\n\n  const client = useApolloClient();\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const mounted = React.useRef<boolean>(false);\n  const editor = React.useRef<ConfigEditor | null>(null);\n  const editorSplitPanelContainer = React.useRef<SplitPanelContainer | null>(null);\n  const previewCounter = React.useRef(0);\n\n  const {isJob} = pipeline;\n  const tagsFromSession = React.useMemo(() => currentSession.tags || [], [currentSession]);\n\n  const pipelineSelector: PipelineSelector = {\n    ...repoAddressToSelector(repoAddress),\n    pipelineName: pipeline.name,\n    solidSelection: currentSession.solidSelection || undefined,\n    assetSelection: currentSession.assetSelection?.map(({assetKey: {path}}) => ({path})),\n  };\n\n  const configResult = useQuery<PipelineExecutionConfigSchemaQuery>(\n    PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY,\n    {\n      variables: {selector: pipelineSelector, mode: currentSession?.mode},\n      partialRefetch: true,\n    },\n  );\n\n  const configSchemaOrError = configResult?.data?.runConfigSchemaOrError;\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  });\n\n  const onSaveSession = (changes: IExecutionSessionChanges) => {\n    onSave(changes);\n  };\n\n  const onConfigChange = (config: any) => {\n    onSaveSession({\n      runConfigYaml: config,\n    });\n  };\n\n  const onOpSelectionChange = (\n    solidSelection: string[] | null,\n    solidSelectionQuery: string | null,\n  ) => {\n    onSaveSession({\n      solidSelection,\n      solidSelectionQuery,\n    });\n  };\n\n  const onFlattenGraphsChange = (flattenGraphs: boolean) => {\n    onSaveSession({flattenGraphs});\n  };\n\n  const onModeChange = (mode: string) => {\n    onSaveSession({mode});\n  };\n\n  const onRemoveExtraPaths = (paths: string[]) => {\n    try {\n      const runConfigData = yaml.parse(sanitizeConfigYamlString(currentSession.runConfigYaml));\n      for (const path of paths) {\n        deletePropertyPath(runConfigData, path);\n      }\n      onSaveSession({runConfigYaml: yaml.stringify(runConfigData)});\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n  };\n\n  const runConfigSchema =\n    configSchemaOrError?.__typename === 'RunConfigSchema' ? configSchemaOrError : undefined;\n  const modeError =\n    configSchemaOrError?.__typename === 'ModeNotFoundError' ? configSchemaOrError : undefined;\n\n  const onScaffoldMissingConfig = () => {\n    const config = runConfigSchema ? scaffoldPipelineConfig(runConfigSchema) : {};\n    try {\n      const runConfigData = yaml.parse(sanitizeConfigYamlString(currentSession.runConfigYaml));\n      const updatedRunConfigData = merge(config, runConfigData);\n      const runConfigYaml = yaml.stringify(updatedRunConfigData);\n      onSaveSession({runConfigYaml});\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n    }\n  };\n\n  const buildExecutionVariables = () => {\n    if (!currentSession) {\n      return;\n    }\n\n    const configYamlOrEmpty = sanitizeConfigYamlString(currentSession.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n\n    return {\n      executionParams: {\n        runConfigData: configYamlOrEmpty,\n        selector: {\n          ...pipelineSelector,\n          assetSelection: currentSession.assetSelection\n            ? currentSession.assetSelection.map((a) => ({path: a.assetKey.path}))\n            : undefined,\n        },\n        mode: currentSession.mode || 'default',\n        executionMetadata: {\n          tags: uniqBy(\n            [\n              // pass solid selection query via tags\n              // clean up https://github.com/dagster-io/dagster/issues/2495\n              ...(currentSession.solidSelectionQuery\n                ? [\n                    {\n                      key: DagsterTag.SolidSelection,\n                      value: currentSession.solidSelectionQuery,\n                    },\n                  ]\n                : []),\n              ...(currentSession?.base?.['presetName']\n                ? [\n                    {\n                      key: DagsterTag.PresetName,\n                      value: currentSession?.base?.['presetName'],\n                    },\n                  ]\n                : []),\n\n              ...(currentSession.assetSelection\n                ? [\n                    {\n                      key: DagsterTag.StepSelection,\n                      value: currentSession.assetSelection.flatMap((o) => o.opNames).join(','),\n                    },\n                  ]\n                : []),\n\n              ...tagsFromSession.map(onlyKeyAndValue),\n\n              // note, we apply these last - uniqBy uses the first value it sees for\n              // each key, so these can be overridden in the session\n              ...pipeline.tags.map(onlyKeyAndValue),\n            ],\n            (tag) => tag.key,\n          ),\n        },\n      },\n    };\n  };\n\n  const saveTags = (tags: PipelineRunTag[]) => {\n    const tagDict = {};\n    const toSave: PipelineRunTag[] = [];\n    tags.forEach((tag: PipelineRunTag) => {\n      if (!(tag.key in tagDict)) {\n        tagDict[tag.key] = tag.value;\n        toSave.push(tag);\n      }\n    });\n    onSaveSession({tags: toSave});\n  };\n\n  const checkConfig = async (configYaml: string) => {\n    // Another request to preview a newer document may be made while this request\n    // is in flight, in which case completion of this async method should not set loading=false.\n    previewCounter.current += 1;\n    const currentPreviewCount = previewCounter.current;\n    const configYamlOrEmpty = sanitizeConfigYamlString(configYaml);\n\n    dispatch({type: 'preview-loading', payload: true});\n\n    const {data} = await client.query<PreviewConfigQuery, PreviewConfigQueryVariables>({\n      fetchPolicy: 'no-cache',\n      query: PREVIEW_CONFIG_QUERY,\n      variables: {\n        runConfigData: configYamlOrEmpty,\n        pipeline: pipelineSelector,\n        mode: currentSession.mode || 'default',\n      },\n    });\n\n    if (mounted.current) {\n      const isLatestRequest = currentPreviewCount === previewCounter.current;\n      dispatch({\n        type: 'set-preview',\n        payload: {\n          preview: data,\n          previewedDocument: configYamlOrEmpty,\n          previewLoading: isLatestRequest ? false : state.previewLoading,\n        },\n      });\n    }\n\n    return responseToYamlValidationResult(configYamlOrEmpty, data.isPipelineConfigValid);\n  };\n\n  const tagsApplyingNewBaseTags = (newBaseTags: PipelineRunTag[]) => {\n    // If you choose a new base (preset or partition), we want to make a best-effort to preserve\n    // the tags you've manually typed in, but remove:\n    // - Tags that were in your previous base and are unchanged\n    // - Tags that are specified in the new base\n    const preservedUserTags = currentSession.base\n      ? tagsFromSession.filter(\n          (t) =>\n            currentSession.base?.tags &&\n            !currentSession.base?.tags.some((bt) => bt.key === t.key && bt.value === t.value) &&\n            !newBaseTags.some((bt) => bt.key === t.key),\n        )\n      : [];\n\n    return [...newBaseTags, ...preservedUserTags];\n  };\n\n  const onSelectPreset = async (preset: Preset) => {\n    const newBaseTags = preset.tags.map(onlyKeyAndValue);\n\n    onSaveSession({\n      base: {presetName: preset.name, tags: newBaseTags},\n      name: preset.name,\n      runConfigYaml: preset.runConfigYaml || '',\n      solidSelection: preset.solidSelection,\n      solidSelectionQuery: preset.solidSelection === null ? '*' : preset.solidSelection.join(','),\n      mode: preset.mode,\n      tags: tagsApplyingNewBaseTags(newBaseTags),\n      needsRefresh: false,\n    });\n  };\n\n  const onSelectPartition = async (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n    sessionSolidSelection?: string[] | null,\n  ) => {\n    onConfigLoading();\n    try {\n      const {base} = currentSession;\n      const {data} = await client.query<\n        ConfigPartitionSelectionQuery,\n        ConfigPartitionSelectionQueryVariables\n      >({\n        query: CONFIG_PARTITION_SELECTION_QUERY,\n        variables: {repositorySelector, partitionSetName, partitionName},\n      });\n\n      if (\n        !data ||\n        !data.partitionSetOrError ||\n        data.partitionSetOrError.__typename !== 'PartitionSet' ||\n        !data.partitionSetOrError.partition\n      ) {\n        onConfigLoaded();\n        return;\n      }\n\n      const {partition} = data.partitionSetOrError;\n\n      let newBaseTags: {key: string; value: string}[] = [];\n      if (partition.tagsOrError.__typename === 'PythonError') {\n        showCustomAlert({\n          body: <PythonErrorInfo error={partition.tagsOrError} />,\n        });\n      } else {\n        newBaseTags = partition.tagsOrError.results.map(onlyKeyAndValue);\n      }\n\n      let runConfigYaml;\n      if (partition.runConfigOrError.__typename === 'PythonError') {\n        runConfigYaml = '';\n        showCustomAlert({\n          body: <PythonErrorInfo error={partition.runConfigOrError} />,\n        });\n      } else {\n        runConfigYaml = partition.runConfigOrError.yaml;\n      }\n\n      const solidSelection = sessionSolidSelection || partition.solidSelection;\n\n      onSaveSession({\n        name: partition.name,\n        base: Object.assign({}, base, {partitionName: partition.name, tags: newBaseTags}),\n        runConfigYaml,\n        solidSelection,\n        solidSelectionQuery: solidSelection === null ? '*' : solidSelection.join(','),\n        mode: partition.mode,\n        tags: tagsApplyingNewBaseTags(newBaseTags),\n        needsRefresh: false,\n      });\n    } catch {}\n    onConfigLoaded();\n  };\n\n  const onRefreshConfig = async (base: SessionBase) => {\n    // Handle preset-based configuration.\n    if ('presetName' in base) {\n      const {presetName} = base;\n      const matchingPreset = pipeline.presets.find((preset) => preset.name === presetName);\n      if (matchingPreset) {\n        onSelectPreset({\n          ...matchingPreset,\n          solidSelection: currentSession.solidSelection || matchingPreset.solidSelection,\n        });\n      }\n      return;\n    }\n\n    // Otherwise, handle partition-based configuration.\n    const {partitionName, partitionsSetName} = base;\n    const repositorySelector = repoAddressToSelector(repoAddress);\n\n    // It is expected that `partitionName` is set here, since we shouldn't be showing the\n    // button at all otherwise.\n    if (partitionName) {\n      onConfigLoading();\n      await onSelectPartition(\n        repositorySelector,\n        partitionsSetName,\n        partitionName,\n        currentSession.solidSelection,\n      );\n      onConfigLoaded();\n    }\n  };\n\n  const onDismissRefreshWarning = () => {\n    onSaveSession({needsRefresh: false});\n  };\n\n  const openTagEditor = () => dispatch({type: 'toggle-tag-editor', payload: true});\n  const closeTagEditor = () => dispatch({type: 'toggle-tag-editor', payload: false});\n\n  const onConfigLoading = () => dispatch({type: 'toggle-config-loading', payload: true});\n  const onConfigLoaded = () => dispatch({type: 'toggle-config-loading', payload: false});\n\n  const {\n    preview,\n    previewLoading,\n    previewedDocument,\n    configLoading,\n    editorHelpContext,\n    tagEditorOpen,\n  } = state;\n\n  const refreshableSessionBase = React.useMemo(() => {\n    const {base, needsRefresh} = currentSession;\n    if (\n      base &&\n      needsRefresh &&\n      ('presetName' in base || (base.partitionsSetName && base.partitionName))\n    ) {\n      return base;\n    }\n    return null;\n  }, [currentSession]);\n\n  let launchButtonTitle: string | undefined;\n  if (launchpadType === 'asset') {\n    launchButtonTitle = 'Materialize';\n  }\n\n  let launchButtonWarning: string | undefined;\n  if (\n    partitionSets.results.length &&\n    currentSession.base &&\n    'partitionsSetName' in currentSession.base &&\n    !currentSession.base.partitionName\n  ) {\n    launchButtonWarning =\n      'This job is partitioned. Are you sure you want to launch' +\n      ' a run without a partition specified?';\n  }\n\n  const {LaunchRootExecutionButton} = useLaunchPadHooks();\n\n  return (\n    <>\n      <SplitPanelContainer\n        axis=\"vertical\"\n        identifier=\"execution\"\n        firstMinSize={100}\n        firstInitialPercent={75}\n        first={\n          <>\n            <LoadingOverlay isLoading={configLoading} message={LOADING_CONFIG_FOR_PARTITION} />\n            <SessionSettingsBar>\n              <ConfigEditorConfigPicker\n                pipeline={pipeline}\n                partitionSets={partitionSets.results}\n                base={currentSession.base}\n                onSaveSession={onSaveSession}\n                onSelectPreset={onSelectPreset}\n                onSelectPartition={onSelectPartition}\n                repoAddress={repoAddress}\n              />\n              <SessionSettingsSpacer />\n              {launchpadType === 'asset' ? (\n                <TextInput\n                  readOnly\n                  value={\n                    currentSession.assetSelection\n                      ? currentSession.assetSelection\n                          .map((a) => tokenForAssetKey(a.assetKey))\n                          .join(', ')\n                      : '*'\n                  }\n                />\n              ) : (\n                <OpSelector\n                  serverProvidedSubsetError={\n                    preview?.isPipelineConfigValid.__typename === 'InvalidSubsetError'\n                      ? preview.isPipelineConfigValid\n                      : undefined\n                  }\n                  pipelineName={pipeline.name}\n                  value={currentSession.solidSelection || null}\n                  query={currentSession.solidSelectionQuery || null}\n                  onChange={onOpSelectionChange}\n                  flattenGraphs={currentSession.flattenGraphs}\n                  onFlattenGraphsChange={onFlattenGraphsChange}\n                  repoAddress={repoAddress}\n                />\n              )}\n\n              {isJob ? (\n                <span />\n              ) : (\n                <>\n                  <SessionSettingsSpacer />\n                  <ConfigEditorModePicker\n                    modes={pipeline.modes}\n                    modeError={modeError}\n                    onModeChange={onModeChange}\n                    modeName={currentSession.mode}\n                  />\n                </>\n              )}\n              <TagEditor\n                tagsFromDefinition={pipeline.tags}\n                tagsFromSession={tagsFromSession}\n                onChange={saveTags}\n                open={tagEditorOpen}\n                onRequestClose={closeTagEditor}\n              />\n              <div style={{flex: 1}} />\n              <ShortcutHandler\n                shortcutLabel=\"⌥T\"\n                shortcutFilter={(e) => e.code === 'KeyT' && e.altKey}\n                onShortcut={openTagEditor}\n              >\n                <Button onClick={openTagEditor} icon={<Icon name=\"edit\" />}>\n                  Edit tags\n                </Button>\n              </ShortcutHandler>\n              <SessionSettingsSpacer />\n              <SecondPanelToggle axis=\"horizontal\" container={editorSplitPanelContainer} />\n            </SessionSettingsBar>\n            {pipeline.tags.length || tagsFromSession.length ? (\n              <Box\n                padding={{vertical: 8, left: 12, right: 0}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray200}}\n              >\n                <TagContainer\n                  tagsFromDefinition={pipeline.tags}\n                  tagsFromSession={tagsFromSession}\n                  onRequestEdit={openTagEditor}\n                />\n              </Box>\n            ) : null}\n            {refreshableSessionBase ? (\n              <Box\n                padding={{vertical: 8, horizontal: 12}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray200}}\n              >\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <Icon name=\"warning\" color={Colors.Yellow500} />\n                  <div>\n                    {repoAddressAsHumanString(repoAddress)} has been manually refreshed, and this\n                    configuration may now be out of date.\n                  </div>\n                  <Button\n                    intent=\"primary\"\n                    onClick={() => onRefreshConfig(refreshableSessionBase)}\n                    disabled={state.configLoading}\n                  >\n                    Refresh config\n                  </Button>\n                  <Button onClick={onDismissRefreshWarning}>Dismiss</Button>\n                </Group>\n              </Box>\n            ) : null}\n            <SplitPanelContainer\n              ref={editorSplitPanelContainer}\n              axis=\"horizontal\"\n              identifier=\"execution-editor\"\n              firstMinSize={100}\n              firstInitialPercent={70}\n              first={\n                <ConfigEditor\n                  ref={editor}\n                  readOnly={false}\n                  configSchema={runConfigSchema}\n                  configCode={currentSession.runConfigYaml}\n                  onConfigChange={onConfigChange}\n                  onHelpContextChange={(next) => {\n                    if (!isHelpContextEqual(editorHelpContext, next)) {\n                      dispatch({type: 'set-editor-help-context', payload: next});\n                    }\n                  }}\n                  checkConfig={checkConfig}\n                />\n              }\n              second={\n                <ConfigEditorHelp\n                  context={editorHelpContext}\n                  allInnerTypes={runConfigSchema?.allConfigTypes || []}\n                />\n              }\n            />\n          </>\n        }\n        second={\n          <>\n            <LoadingOverlay\n              isLoading={previewLoading}\n              message={!runConfigSchema ? LOADING_CONFIG_SCHEMA : LOADING_RUN_PREVIEW}\n            />\n            <RunPreview\n              launchpadType={launchpadType}\n              document={previewedDocument}\n              validation={preview ? preview.isPipelineConfigValid : null}\n              solidSelection={currentSession.solidSelection}\n              runConfigSchema={runConfigSchema}\n              onHighlightPath={(path) => editor.current?.moveCursorToPath(path)}\n              onRemoveExtraPaths={(paths) => onRemoveExtraPaths(paths)}\n              onScaffoldMissingConfig={onScaffoldMissingConfig}\n            />\n          </>\n        }\n      />\n\n      <LaunchButtonContainer launchpadType={launchpadType}>\n        <LaunchRootExecutionButton\n          title={launchButtonTitle}\n          warning={launchButtonWarning}\n          pipelineName={pipeline.name}\n          getVariables={buildExecutionVariables}\n          disabled={preview?.isPipelineConfigValid?.__typename !== 'PipelineConfigValidationValid'}\n          behavior=\"open\"\n        />\n      </LaunchButtonContainer>\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default LaunchpadSession;\n\n// This helper removes __typename, which prevents tags from being passed back to GraphQL\nconst onlyKeyAndValue = ({key, value}: {key: string; value: string}) => ({key, value});\n\nconst deletePropertyPath = (obj: any, path: string) => {\n  const parts = path.split('.');\n\n  // Here we iterate through the parts of the path to get to\n  // the second to last nested object. This is so we can call `delete` using\n  // this object and the last part of the path.\n  for (let i = 0; i < parts.length - 1; i++) {\n    obj = obj[parts[i]];\n    if (typeof obj === 'undefined') {\n      return;\n    }\n  }\n\n  const lastKey = parts.pop();\n  if (lastKey) {\n    delete obj[lastKey];\n  }\n};\n\nconst sanitizeConfigYamlString = (yamlString: string) => (yamlString || '').trim() || '{}';\n\nconst PREVIEW_CONFIG_QUERY = gql`\n  query PreviewConfigQuery(\n    $pipeline: PipelineSelector!\n    $runConfigData: RunConfigData!\n    $mode: String!\n  ) {\n    isPipelineConfigValid(pipeline: $pipeline, runConfigData: $runConfigData, mode: $mode) {\n      ...ConfigEditorValidationFragment\n      ...RunPreviewValidationFragment\n    }\n  }\n\n  ${CONFIG_EDITOR_VALIDATION_FRAGMENT}\n  ${RUN_PREVIEW_VALIDATION_FRAGMENT}\n`;\n\nconst SessionSettingsSpacer = styled.div`\n  width: 5px;\n`;\n\nexport const PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY = gql`\n  query PipelineExecutionConfigSchemaQuery($selector: PipelineSelector!, $mode: String) {\n    runConfigSchemaOrError(selector: $selector, mode: $mode) {\n      ...LaunchpadSessionRunConfigSchemaFragment\n    }\n  }\n\n  fragment LaunchpadSessionRunConfigSchemaFragment on RunConfigSchemaOrError {\n    __typename\n    ... on RunConfigSchema {\n      ...ConfigEditorRunConfigSchemaFragment\n    }\n    ... on ModeNotFoundError {\n      ...LaunchpadSessionModeNotFound\n    }\n  }\n\n  fragment LaunchpadSessionModeNotFound on ModeNotFoundError {\n    message\n  }\n\n  ${CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT}\n`;\n","import {NonIdealState, NonIdealStateProps, Spinner, SplitPanelContainer} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nexport const LaunchpadSessionError: React.FC<NonIdealStateProps> = (props) => (\n  <SplitPanelContainer\n    axis=\"vertical\"\n    identifier=\"execution\"\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <SessionSettingsBar>\n          <Spinner purpose=\"section\" />\n        </SessionSettingsBar>\n        <NonIdealState {...props} />\n      </>\n    }\n    second={<div />}\n  />\n);\n","import {SplitPanelContainer} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LoadingOverlay} from './LoadingOverlay';\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nconst LOADING_PIPELINE = `Loading pipeline and partition sets...`;\n\nexport const LaunchpadSessionLoading = () => (\n  <SplitPanelContainer\n    axis=\"vertical\"\n    identifier=\"execution\"\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <LoadingOverlay isLoading message={LOADING_PIPELINE} />\n        <SessionSettingsBar />\n      </>\n    }\n    second={<LoadingOverlay isLoading message=\"Loading pipeline and partition sets...\" />}\n  />\n);\n","import {Group, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const LoadingOverlay: React.FC<{\n  isLoading: boolean;\n  message: string;\n}> = ({isLoading, message}) => (\n  <LoadingOverlayContainer isLoading={isLoading}>\n    <Group direction=\"row\" spacing={8} alignItems=\"center\">\n      <Spinner purpose=\"body-text\" />\n      <div>{message}</div>\n    </Group>\n  </LoadingOverlayContainer>\n);\n\nconst LoadingOverlayContainer = styled.div<{isLoading: boolean}>`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background-color: #fff;\n  z-index: 20;\n  display: ${({isLoading}) => (!isLoading ? 'none' : 'flex')};\n  align-items: center;\n  justify-content: center;\n  opacity: ${({isLoading}) => (isLoading ? '0.7' : '0')};\n  transition: opacity 150ms linear;\n  transition-delay: 300ms;\n`;\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const SessionSettingsBar = styled.div`\n  color: white;\n  display: flex;\n  position: relative;\n  border-bottom: 1px solid ${Colors.Gray200};\n  background: ${Colors.White};\n  align-items: center;\n  height: 47px;\n  padding: 8px 10px;\n`;\n","import {\n  Box,\n  Button,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {RunTag} from '../runs/RunTag';\n\ninterface ITagEditorProps {\n  tagsFromDefinition?: PipelineRunTag[];\n  tagsFromSession: PipelineRunTag[];\n  open: boolean;\n  onChange: (tags: PipelineRunTag[]) => void;\n  onRequestClose: () => void;\n}\n\ninterface ITagContainerProps {\n  tagsFromDefinition?: PipelineRunTag[];\n  tagsFromSession: PipelineRunTag[];\n  onRequestEdit: () => void;\n}\n\nexport const TagEditor: React.FC<ITagEditorProps> = ({\n  tagsFromDefinition = [],\n  tagsFromSession = [],\n  open,\n  onChange,\n  onRequestClose,\n}) => {\n  const [editState, setEditState] = React.useState(() =>\n    tagsFromSession.length ? tagsFromSession : [{key: '', value: ''}],\n  );\n\n  // Reset the edit state when you close and re-open the modal, or when\n  // tagsFromSession change while the modal is closed.\n  React.useEffect(() => {\n    if (!open) {\n      setEditState(tagsFromSession.length ? tagsFromSession : [{key: '', value: ''}]);\n    }\n  }, [tagsFromSession, open]);\n\n  const toSave: PipelineRunTag[] = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => tag.key && tag.value);\n  const toError = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => !tag.key !== !tag.value);\n\n  const onSave = () => {\n    if (!toError.length) {\n      onChange(toSave);\n      onRequestClose();\n    }\n  };\n\n  const disabled = editState === tagsFromSession || !!toError.length;\n\n  const onTagEdit = (key: string, value: string, idx: number) => {\n    setEditState((current) => [...current.slice(0, idx), {key, value}, ...current.slice(idx + 1)]);\n  };\n\n  const onRemove = (idx: number) => {\n    setEditState((current) => {\n      if (idx === 0 && current.length === 1) {\n        // If we're deleting the only item, just wipe it out.\n        return [{key: '', value: ''}];\n      }\n      return [...current.slice(0, idx), ...current.slice(idx + 1)];\n    });\n  };\n\n  const addTagEntry = () => {\n    setEditState((current) => [...current, {key: '', value: ''}]);\n  };\n\n  return (\n    <Dialog\n      icon=\"info\"\n      onClose={onRequestClose}\n      style={{minWidth: 700}}\n      title=\"Add tags to run\"\n      isOpen={open}\n    >\n      <DialogBody>\n        <Group spacing={16} direction=\"column\">\n          {tagsFromDefinition.length ? (\n            <Group direction=\"column\" spacing={8}>\n              <Box margin={{left: 2}} style={{fontSize: '13px', fontWeight: 500}}>\n                Tags from definition:\n              </Box>\n              <TagList>\n                {tagsFromDefinition.map((tag, idx) => {\n                  const {key} = tag;\n                  const anyOverride = editState.some((editable) => editable.key === key);\n                  if (anyOverride) {\n                    return (\n                      <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                        <span style={{opacity: 0.2}}>\n                          <RunTag tag={tag} key={idx} />\n                        </span>\n                      </Tooltip>\n                    );\n                  }\n                  return <RunTag tag={tag} key={key} />;\n                })}\n              </TagList>\n            </Group>\n          ) : null}\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>Custom tags:</div>\n            <Box flex={{direction: 'column', gap: 8}}>\n              {editState.map((tag, idx) => {\n                const {key, value} = tag;\n                return (\n                  <div\n                    key={idx}\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      gap: 8,\n                    }}\n                  >\n                    <TextInput\n                      placeholder=\"Tag Key\"\n                      value={key}\n                      onChange={(e) => onTagEdit(e.target.value, value, idx)}\n                    />\n                    <TextInput\n                      placeholder=\"Tag Value\"\n                      value={value}\n                      onChange={(e) => onTagEdit(key, e.target.value, idx)}\n                    />\n                    <Button\n                      disabled={editState.length === 1 && !key.trim() && !value.trim()}\n                      onClick={() => onRemove(idx)}\n                      icon={<Icon name=\"delete\" />}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                );\n              })}\n            </Box>\n            <Box margin={{left: 2}} flex={{direction: 'row'}}>\n              <Button onClick={addTagEntry} icon={<Icon name=\"add_circle\" />}>\n                Add custom tag\n              </Button>\n            </Box>\n          </Box>\n        </Group>\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onRequestClose}>Cancel</Button>\n        <ShortcutHandler\n          shortcutLabel=\"⌥Enter\"\n          shortcutFilter={(e) => e.code === 'Enter' && e.altKey}\n          onShortcut={onSave}\n        >\n          <Button intent=\"primary\" onClick={onSave} disabled={disabled}>\n            Apply\n          </Button>\n        </ShortcutHandler>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const TagContainer = ({tagsFromSession, tagsFromDefinition}: ITagContainerProps) => {\n  return (\n    <Container>\n      <TagList>\n        {tagsFromDefinition\n          ? tagsFromDefinition.map((tag, idx) => {\n              const {key} = tag;\n              const anyOverride = tagsFromSession.some((sessionTag) => sessionTag.key === key);\n              if (anyOverride) {\n                return (\n                  <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                    <span style={{opacity: 0.2}}>\n                      <RunTag tag={tag} key={idx} />\n                    </span>\n                  </Tooltip>\n                );\n              }\n              return <RunTag tag={tag} key={idx} />;\n            })\n          : undefined}\n        {tagsFromSession.map((tag, idx) => (\n          <RunTag tag={tag} key={idx} />\n        ))}\n      </TagList>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst TagList = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfillMutation,\n  LaunchPartitionBackfillMutationVariables,\n} from '../instance/types/BackfillUtils.types';\nimport {LaunchButton} from '../launchpad/LaunchButton';\nimport {TagContainer, TagEditor} from '../launchpad/TagEditor';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  DaemonNotRunningAlert,\n  DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT,\n  showBackfillErrorToast,\n  showBackfillSuccessToast,\n  UsingDefaultLauncherAlert,\n  USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT,\n} from './BackfillMessaging';\nimport {DimensionRangeWizard} from './DimensionRangeWizard';\nimport {PartitionStateCheckboxes} from './PartitionStateCheckboxes';\nimport {PartitionState} from './PartitionStatus';\nimport {\n  BackfillSelectorQuery,\n  BackfillSelectorQueryVariables,\n} from './types/BackfillSelector.types';\n\ninterface BackfillOptions {\n  reexecute: boolean;\n  fromFailure: boolean;\n}\n\nexport const BackfillPartitionSelector: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  partitionData: {[name: string]: PartitionState};\n  pipelineName: string;\n  onLaunch?: (backfillId: string, stepQuery: string) => void;\n  onCancel?: () => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  onLaunch,\n  onCancel,\n  onSubmit,\n  repoAddress,\n  partitionData,\n  pipelineName,\n  partitionNames,\n}) => {\n  const history = useHistory();\n  const [range, _setRange] = React.useState<string[]>(\n    Object.keys(partitionData).filter(\n      (k) => !partitionData[k] || partitionData[k] === PartitionState.FAILURE,\n    ),\n  );\n  const [stateFilters, setStateFilters] = React.useState<PartitionState[]>([\n    PartitionState.MISSING,\n    PartitionState.FAILURE,\n  ]);\n\n  const selected = React.useMemo(() => {\n    return range.filter((r) => stateFilters.includes(partitionData[r]));\n  }, [range, stateFilters, partitionData]);\n\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n  const [query, setQuery] = React.useState<string>('');\n  const [options, setOptions] = React.useState<BackfillOptions>({\n    reexecute: false,\n    fromFailure: false,\n  });\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data} = useQuery<BackfillSelectorQuery, BackfillSelectorQueryVariables>(\n    BACKFILL_SELECTOR_QUERY,\n    {\n      variables: {\n        pipelineSelector: {\n          ...repositorySelector,\n          pipelineName,\n        },\n      },\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  const mounted = React.useRef(true);\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onLaunch]);\n\n  const onSuccess = (backfillId: string) => {\n    showBackfillSuccessToast(history, backfillId);\n    onLaunch?.(backfillId, query);\n  };\n\n  const onError = (data: LaunchPartitionBackfillMutation | null | undefined) => {\n    showBackfillErrorToast(data);\n  };\n\n  if (!data) {\n    return (\n      <Box margin={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n    return (\n      <Box margin={20}>\n        <NonIdealState icon=\"error\" title=\"Could not fetch job details\" />\n      </Box>\n    );\n  }\n\n  const {pipelineSnapshotOrError: pipelineSnapshot, instance} = data;\n  const solids = explodeCompositesInHandleGraph(pipelineSnapshot.solidHandles).map(\n    (h: any) => h.solid,\n  );\n  const solidsFiltered = filterByQuery(solids, query);\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n  const stepRows = layout.boxes.map((box) => ({\n    x: box.x,\n    name: box.node.name,\n  }));\n\n  const isFailed = (name: string) => partitionData[name] === PartitionState.FAILURE;\n  const failedPartitions = partitionNames.filter(isFailed);\n\n  const setRange = (selection: string[]) => {\n    const selectionSet = new Set(selection);\n    // first order the partition names, according to the order given by partition names, which\n    // is the order determined from the partition definition set in user code\n    _setRange(partitionNames.filter((name) => selectionSet.has(name)));\n    if (options.fromFailure && selection.filter((x) => !isFailed(x)).length > 0) {\n      setOptions({...options, fromFailure: false});\n    }\n  };\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 24}}>\n          <Section title=\"Partitions\">\n            <Box>\n              Select partitions to materialize. Click and drag to select a range on the timeline.\n            </Box>\n\n            <DimensionRangeWizard\n              selected={range}\n              setSelected={setRange}\n              partitionStateForKey={(name) => partitionData[name]}\n              partitionKeys={partitionNames}\n            />\n\n            <PartitionStateCheckboxes\n              value={stateFilters}\n              partitionKeysForCounts={range.map((key) => ({\n                partitionKey: key,\n                state: partitionData[key],\n              }))}\n              allowed={\n                options.fromFailure\n                  ? [PartitionState.FAILURE]\n                  : [\n                      PartitionState.MISSING,\n                      PartitionState.FAILURE,\n                      PartitionState.QUEUED,\n                      PartitionState.STARTED,\n                      PartitionState.SUCCESS,\n                    ]\n              }\n              onChange={setStateFilters}\n            />\n          </Section>\n\n          {failedPartitions.length ? (\n            <Section title=\"Reexecution\">\n              <Checkbox\n                checked={options.fromFailure}\n                disabled={!selected.every(isFailed)}\n                onChange={() => {\n                  const next = {\n                    ...options,\n                    fromFailure: !options.fromFailure,\n                    reexecute: !options.reexecute,\n                  };\n\n                  if (next.fromFailure) {\n                    setStateFilters([PartitionState.FAILURE]);\n                  }\n                  setQuery('');\n                  setOptions(next);\n                }}\n                label={\n                  <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                    <Box margin={{right: 4}}>Re-execute from failures</Box>\n                    <Tooltip\n                      placement=\"top\"\n                      content=\"For each partition, if the most recent run failed, launch a re-execution starting from the steps that failed. Only applies for selections of failed partitions.\"\n                    >\n                      <Icon name=\"info\" color={Colors.Gray500} />\n                    </Tooltip>\n                  </Box>\n                }\n              />\n            </Section>\n          ) : null}\n\n          <Section\n            title={\n              <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                <Box margin={{right: 4}}>Step subset</Box>\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Applies a step-selection to each run for the requested partitions.\"\n                >\n                  <Icon name=\"info\" color={Colors.Gray500} />\n                </Tooltip>\n              </Box>\n            }\n          >\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n              <GraphQueryInput\n                disabled={options.fromFailure}\n                width={520}\n                items={solids}\n                value={query}\n                placeholder=\"Type a step subset\"\n                onChange={setQuery}\n                autoApplyChanges={true}\n              />\n              {query ? (\n                <div style={{color: Colors.Gray500}}>\n                  {stepRows.length} step{stepRows.length === 1 ? '' : 's'} selected\n                </div>\n              ) : null}\n            </Box>\n          </Section>\n\n          <Section title=\"Tags\">\n            <TagEditor\n              tagsFromSession={tags}\n              onChange={setTags}\n              open={tagEditorOpen}\n              onRequestClose={() => setTagEditorOpen(false)}\n            />\n            {tags.length ? (\n              <div style={{border: `1px solid ${Colors.Gray300}`, borderRadius: 8, padding: 3}}>\n                <TagContainer tagsFromSession={tags} onRequestEdit={() => setTagEditorOpen(true)} />\n              </div>\n            ) : (\n              <div>\n                <Button onClick={() => setTagEditorOpen(true)}>Add tags to backfill runs</Button>\n              </div>\n            )}\n          </Section>\n\n          <Box flex={{direction: 'column', gap: 16}}>\n            <DaemonNotRunningAlert instance={instance} />\n\n            <UsingDefaultLauncherAlert instance={instance} />\n          </Box>\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <LaunchBackfillButton\n          partitionNames={selected}\n          partitionSetName={partitionSetName}\n          reexecutionSteps={\n            !options.fromFailure && solidsFiltered.all.length < solids.length\n              ? stepRows.map((step) => step.name)\n              : undefined\n          }\n          fromFailure={options.fromFailure}\n          tags={tags}\n          onSubmit={onSubmit}\n          onSuccess={onSuccess}\n          onError={onError}\n          repoAddress={repoAddress}\n        />\n      </DialogFooter>\n    </>\n  );\n};\n\nconst LaunchBackfillButton: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  reexecutionSteps?: string[];\n  fromFailure?: boolean;\n  tags?: PipelineRunTag[];\n  onSuccess?: (backfillId: string) => void;\n  onError: (data: LaunchPartitionBackfillMutation | null | undefined) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  partitionNames,\n  reexecutionSteps,\n  fromFailure,\n  tags,\n  onSuccess,\n  onError,\n  onSubmit,\n  repoAddress,\n}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const mounted = React.useRef(true);\n  const [launchBackfill, {loading}] = useMutation<\n    LaunchPartitionBackfillMutation,\n    LaunchPartitionBackfillMutationVariables\n  >(LAUNCH_PARTITION_BACKFILL_MUTATION);\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onSuccess]);\n\n  const onLaunch = async () => {\n    onSubmit();\n    const {data} = await launchBackfill({\n      variables: {\n        backfillParams: {\n          selector: {\n            partitionSetName,\n            repositorySelector,\n          },\n          partitionNames,\n          reexecutionSteps,\n          fromFailure,\n          tags,\n        },\n      },\n    });\n\n    if (!mounted.current) {\n      return;\n    }\n\n    if (data && data.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      onSuccess?.(data.launchPartitionBackfill.backfillId);\n    } else {\n      onError?.(data);\n    }\n  };\n\n  const count = partitionNames.length;\n  const reexecutionCount = reexecutionSteps?.length;\n\n  const title = () => {\n    if (loading) {\n      return `Submitting ${count} ${count === 1 ? 'run' : 'runs'}…`;\n    }\n\n    if (count) {\n      return `Submit ${count} ${count === 1 ? 'run' : 'runs'}`;\n    }\n\n    return 'Select partitions to submit';\n  };\n\n  const subtitle = () => {\n    return !loading && reexecutionCount\n      ? `(${reexecutionCount} selected ${reexecutionCount === 1 ? 'step' : 'steps'})`\n      : '';\n  };\n\n  const buttonTitle = [title(), subtitle()].join(' ');\n\n  return (\n    <LaunchButton\n      runCount={count}\n      config={{\n        title: buttonTitle,\n        icon: 'open_in_new',\n        disabled: !count || loading,\n        onClick: onLaunch,\n      }}\n    />\n  );\n};\n\nconst BACKFILL_SELECTOR_QUERY = gql`\n  query BackfillSelectorQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n    }\n    instance {\n      ...UsingDefaultLauncherAlertInstanceFragment\n      ...DaemonNotRunningAlertInstanceFragment\n    }\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT}\n  ${USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT}\n`;\n\nexport const Section = ({\n  title,\n  children,\n}: {\n  title: string | React.ReactNode;\n  children: React.ReactNode;\n}) => (\n  <Box flex={{direction: 'column', gap: 4}}>\n    <Subheading>{title}</Subheading>\n    <Box\n      flex={{direction: 'column', gap: 8}}\n      padding={{top: 16}}\n      border={{width: 1, color: Colors.KeylineGray, side: 'top'}}\n    >\n      {children}\n    </Box>\n  </Box>\n);\n","import {Icon, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {ClearButton} from '../ui/ClearButton';\n\nimport {partitionsToText, spanTextToSelections} from './SpanRepresentation';\n\nexport const DimensionRangeInput: React.FC<{\n  value: string[];\n  onChange: (partitionNames: string[]) => void;\n  partitionKeys: string[];\n  isTimeseries: boolean;\n}> = ({value, onChange, partitionKeys, isTimeseries}) => {\n  const [valueString, setValueString] = React.useState('');\n  const partitionNameJSON = React.useMemo(() => JSON.stringify(partitionKeys), [partitionKeys]);\n\n  React.useEffect(() => {\n    const partitionNameArr = JSON.parse(partitionNameJSON);\n    setValueString(isTimeseries ? partitionsToText(value, partitionNameArr) : value.join(', '));\n  }, [value, partitionNameJSON, isTimeseries]);\n\n  const placeholder = React.useMemo(() => {\n    return partitionKeys.length === 0\n      ? 'Loading partition keys...'\n      : placeholderForPartitions(partitionKeys, isTimeseries);\n  }, [partitionKeys, isTimeseries]);\n\n  const tryCommit = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    try {\n      onChange(spanTextToSelections(partitionKeys, valueString).selectedKeys);\n    } catch (err: any) {\n      e.preventDefault();\n      showCustomAlert({body: err.message});\n    }\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      tryCommit(e);\n    }\n  };\n\n  return (\n    <TextInput\n      placeholder={placeholder}\n      value={valueString}\n      style={{display: 'flex', width: '100%', flex: 1, flexGrow: 1}}\n      onChange={(e) => setValueString(e.currentTarget.value)}\n      onKeyDown={onKeyDown}\n      onBlur={tryCommit}\n      rightElement={\n        <ClearButton\n          style={{display: valueString.length ? 'initial' : 'none'}}\n          onClick={() => onChange([])}\n        >\n          <Icon name=\"cancel\" />\n        </ClearButton>\n      }\n    />\n  );\n};\nexport function placeholderForPartitions(names: string[], isTimeseries: boolean) {\n  if (names.length === 0) {\n    return '';\n  }\n  if (names.length < 4 || !isTimeseries) {\n    return `ex: ${names[0]}, ${names[1]}`;\n  }\n  return `ex: ${names[0]}, ${names[1]}, [${names[2]}...${names[names.length - 1]}]`;\n}\n","import {Box, Button} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {isTimeseriesPartition} from '../assets/MultipartitioningSupport';\n\nimport {DimensionRangeInput} from './DimensionRangeInput';\nimport {PartitionState, PartitionStatus} from './PartitionStatus';\n\nexport const DimensionRangeWizard: React.FC<{\n  selected: string[];\n  setSelected: (selected: string[]) => void;\n  partitionKeys: string[];\n  partitionStateForKey: (partitionKey: string, partitionIdx: number) => PartitionState;\n}> = ({selected, setSelected, partitionKeys, partitionStateForKey}) => {\n  const isTimeseries = isTimeseriesPartition(partitionKeys[0]);\n\n  return (\n    <>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 8}} padding={{vertical: 4}}>\n        <Box flex={{direction: 'column'}} style={{flex: 1}}>\n          <DimensionRangeInput\n            value={selected}\n            partitionKeys={partitionKeys}\n            onChange={setSelected}\n            isTimeseries={isTimeseries}\n          />\n        </Box>\n        {isTimeseries && (\n          <Button small={true} onClick={() => setSelected(partitionKeys.slice(-1))}>\n            Latest\n          </Button>\n        )}\n        <Button small={true} onClick={() => setSelected(partitionKeys)}>\n          All\n        </Button>\n      </Box>\n      <Box margin={{bottom: 8}}>\n        <PartitionStatus\n          partitionNames={partitionKeys}\n          partitionStateForKey={partitionStateForKey}\n          splitPartitions={!isTimeseries}\n          selected={selected}\n          onSelect={setSelected}\n        />\n      </Box>\n    </>\n  );\n};\n","import {Box, Checkbox} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PartitionState, partitionStatusToText} from './PartitionStatus';\n\nexport const PartitionStateCheckboxes: React.FC<{\n  partitionKeysForCounts: {partitionKey: string; state: PartitionState}[];\n  value: PartitionState[];\n  allowed: PartitionState[];\n  onChange: (selected: PartitionState[]) => void;\n}> = ({partitionKeysForCounts, value, onChange, allowed}) => {\n  const byState = React.useMemo(() => {\n    const result: {[state: string]: number} = {\n      [PartitionState.SUCCESS]: 0,\n      [PartitionState.SUCCESS_MISSING]: 0,\n      [PartitionState.MISSING]: 0,\n      [PartitionState.FAILURE]: 0,\n      [PartitionState.QUEUED]: 0,\n      [PartitionState.STARTED]: 0,\n    };\n    for (const key of partitionKeysForCounts) {\n      result[key.state] = (result[key.state] || 0) + 1;\n    }\n    return result;\n  }, [partitionKeysForCounts]);\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 12}} style={{overflow: 'hidden'}}>\n      {allowed.map((state) => (\n        <Checkbox\n          key={state}\n          style={{marginBottom: 0, marginLeft: 10, minWidth: 200}}\n          checked={value.includes(state)}\n          label={`${partitionStatusToText(state)} (${byState[state]})`}\n          onChange={() =>\n            onChange(value.includes(state) ? value.filter((v) => v !== state) : [...value, state])\n          }\n        />\n      ))}\n    </Box>\n  );\n};\n","import {NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  isGraph: boolean;\n  repoAddress?: RepoAddress;\n  result:\n    | {\n        __typename: 'PipelineSnapshotNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PipelineNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'RepositoryNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PythonError';\n        message: string;\n      };\n}\n\nexport const NonIdealPipelineQueryResult: React.FC<Props> = ({isGraph, repoAddress, result}) => {\n  if (result.__typename === 'PipelineSnapshotNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph snapshot not found' : 'Pipeline snapshot not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PipelineNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph not found' : 'Pipeline not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'RepositoryNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={`${repoAddress ? repoAddressAsHumanString(repoAddress) : 'Definitions'} not found`}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PythonError') {\n    return <NonIdealState icon=\"error\" title=\"Query error\" description={result.message} />;\n  }\n  return <span />;\n};\n","import * as React from 'react';\n\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {ExplorerPath} from './PipelinePathUtils';\n\nexport const useJobTitle = (explorerPath: ExplorerPath, isJob: boolean) => {\n  const {pipelineName} = explorerPath;\n\n  const value = React.useMemo(() => {\n    if (isJob) {\n      return `Job: ${pipelineName}`;\n    }\n    return `Pipeline: ${pipelineName}`;\n  }, [isJob, pipelineName]);\n\n  useDocumentTitle(value);\n};\n","import {Colors, IconWrapper} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const ClearButton = styled.button`\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  margin: 0 -2px 0 0;\n  padding: 2px;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray400};\n    transition: background-color 100ms linear;\n  }\n\n  :hover ${IconWrapper}, :focus ${IconWrapper} {\n    background-color: ${Colors.Gray700};\n  }\n\n  :active ${IconWrapper} {\n    background-color: ${Colors.Dark};\n  }\n\n  :focus {\n    outline: none;\n  }\n`;\n","import {FontFamily} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const Version = styled.div`\n  font-family: ${FontFamily.monospace};\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n"],"names":["AssetEdges","edges","highlighted","strokeWidth","baseColor","Colors","AssetEdgeSet","color","filter","fromId","toId","React","id","btoa","viewBox","refX","refY","markerUnits","markerWidth","orient","d","fill","map","edge","idx","buildSVGPath","source","from","target","to","stroke","markerEnd","LaunchAssetObservationButton","assetKeys","preferredJobName","intent","canLaunchPipelineExecution","usePermissionsDEPRECATED","launchWithTelemetry","useLaunchWithTelemetry","useLaunchPadHooks","type","state","setState","client","useApolloClient","count","length","label","enabled","Tooltip","content","Button","icon","Icon","name","disabled","onClick","e","query","LAUNCH_ASSET_LOADER_QUERY","variables","path","result","data","assetNodeDefinitionCollisions","showCustomAlert","buildAssetCollisionsAlert","assets","assetNodes","forceLaunchpad","shiftKey","stateForObservingAssets","next","title","body","error","executionParams","Spinner","purpose","_client","_forceLaunchpad","some","x","isSource","isObservable","repoAddress","buildRepoAddress","repository","location","repoName","repoAddressAsHumanString","every","a","jobName","getCommonJob","executionParamsForAssetJob","AssetGraphJobSidebar","pipelineSelector","queryResult","useQuery","ASSET_GRAPH_JOB_SIDEBAR","partialRefetch","repositoryName","repositoryLocationName","Loading","pipelineSnapshotOrError","__typename","NonIdealPipelineQueryResult","isGraph","SidebarContainerOverview","S","container","gql","SIDEBAR_ROOT_CONTAINER_FRAGMENT","PYTHON_ERROR_FRAGMENT","LatestMaterializationMetadata","latest","liveData","latestRun","runOrError","repositoryOrigin","repo","useRepository","Box","padding","top","bottom","NonIdealState","description","latestEvent","latestAssetLineage","assetLineage","MetadataTable","runId","timestamp","titleForRun","isHiddenAssetGroupJob","pipelineName","left","PipelineReference","showIcon","pipelineHrefContext","snapshotId","pipelineSnapshotId","isJob","isThisThingAJob","Group","direction","spacing","alignItems","linkToRunEvent","stepKey","partition","flex","gap","Timestamp","ms","Number","StaleTag","AssetLineageElements","elements","metadataEntries","entry","MetadataEntry","expandSmallValues","repoLocation","styled","Table","METADATA_ENTRY_FRAGMENT","AssetSidebarActivitySummary","assetKey","assetLastMaterializedAt","assetHasDefinedPartitions","useRecentAssetEvents","materializations","observations","loadedPartitionKeys","loading","refetch","xAxis","grouped","useGroupedEvents","vertical","FailedRunsSinceMaterializationBanner","border","side","width","CurrentRunsBanner","freshnessPolicy","margin","horizontal","CurrentMinutesLateTag","freshnessPolicyDescription","style","maxWidth","overflowX","fontSize","AssetMaterializationGraphs","asSidebarSection","groups","columnCount","SidebarAssetInfo","assetNode","partitionHealthData","usePartitionHealthData","SIDEBAR_ASSET_QUERY","lastMaterialization","asset","assetNodeOrError","Header","metadataForAssetNode","assetMetadata","assetType","hasAssetMetadata","assetConfigSchema","configField","configType","OpMetadataPlugin","op","metadata","pluginForMetadata","opName","AssetDefinedInMultipleReposNotice","loadedFromRepo","padded","partitionDefinition","borderBottom","nodeDependsOnSelf","DependsOnSelfBanner","SidebarComponent","Description","definition","opVersion","Version","ConfigTypeSchema","typesInScope","recursiveConfigTypes","AssetMetadata","TypeSidebarSection","PartitionHealthSummary","DagsterType","displayName","displayNameForAssetKey","right","marginBottom","display","justifyContent","flexWrap","opacity","size","undefined","AssetCatalogLink","assetDetailsPathForKey","Link","SIDEBAR_ASSET_FRAGMENT","ASSET_NODE_CONFIG_FRAGMENT","ASSET_NODE_OP_METADATA_FRAGMENT","ASSET_FOR_NAVIGATION_QUERY","MINIMAL_SCALE","GROUPS_ONLY_SCALE","AssetGraphExplorer","props","useAssetGraphData","explorerPath","opsQuery","fetchOptions","fetchResult","assetGraphData","graphQueryItems","graphAssetKeys","allAssetKeys","applyingEmptyDefault","useLiveDataForAssetKeys","liveDataByNode","liveDataRefreshState","runWatchers","allowStaleData","graphHasCycles","AssetGraphExplorerWithData","options","setOptions","onChangeExplorerPath","onNavigateToSourceAssetNode","fetchOptionFilters","findAssetLocation","apollo","key","assetOrError","def","opNames","jobNames","find","groupName","useFindAssetLocation","useAssetLayout","layout","async","viewportEl","setHighlighted","selectedAssetValues","split","selectedGraphNodes","Object","values","nodes","node","includes","tokenForAssetKey","lastSelectedNode","selectedDefinitions","allDefinitionsForMaterialize","onSelectNode","stopPropagation","token","nodeIsInDisplayedGraph","nextOpsNameSelection","metaKey","tokensToAdd","tokensInRange","opsInRange","graph","existing","without","uniq","join","nextCenter","current","zoomToSVGCoords","bounds","y","lastRenderedLayout","setLastRenderedLayout","renderingNewLayout","focus","autocenter","allowGroupsOnlyZoomLevel","keys","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","nodeType","SVGViewport","ref","r","interactor","graphWidth","graphHeight","height","graphHasNoMinimumZoom","onArrowKeyDown","dir","layoutWithoutExternalLinks","pickBy","nextId","closestNodeInDirection","zoomToSVGBox","onDoubleClick","maxZoom","maxAutocenterZoom","scale","SVGContainer","Math","max","sort","b","group","targetScale","scaleForSVGBounds","AssetGroupNode","graphNode","JSON","parse","onMouseEnter","onMouseLeave","overflow","AssetNode","selected","Checkbox","format","checked","preferAssetRendering","onChange","position","QueryRefresh","refreshState","dataDescription","n","LaunchAssetExecutionButton","liveDataForStale","scope","all","GraphQueryInput","items","value","placeholder","popoverPosition","second","graphDirectionOf","stack","pop","downstream","Boolean","push","seen","ledToTarget","repositoryDisambiguationRequired","fontWeight","userSelect","workspacePath","GroupRepoName","withMiddleTruncation","buildRepoPathForHuman","maxLength","GroupOutline","inset","background","fontFamily","FontFamily","Remark","remark","use","gfm","toPlainText","markdownCache","LRUCache","markdownToPlaintext","md","cached","get","str","processSync","toString","replaceAll","trim","set","AssetInsetForHoverEffect","AssetNodeContainer","$selected","AssetNodeBox","$isSource","Name","marginTop","textOverflow","ASSET_NODE_NAME_MAX_LENGTH","$color","Stats","StatsRow","lastObservation","textAlign","event","TimestampDisplay","timeFormat","showSeconds","showTimezone","AssetNodeStatusRow","paddingTop","isEqual","AssetNodeStatusBox","children","borderBottomLeftRadius","borderBottomRightRadius","whiteSpace","lineHeight","runWhichFailedToMaterialize","inProgressRunIds","unstartedRunIds","materializingRunId","late","isAssetLate","lastMaterializationLink","humanizedLateString","freshnessInfo","currentMinutesLate","endTime","isAssetStale","AssetNodeMinimal","MinimalAssetNodeContainer","MinimalAssetNodeBox","$background","$border","MinimalName","ASSET_NODE_LIVE_FRAGMENT","ASSET_NODE_FRAGMENT","AssetNodeShowOnHover","p","AssetLatestRunSpinner","stopped","AssetLatestRunWithNotices","includeFreshness","includeRunStatus","MISSING_LIVE_DATA","runTagContent","AssetRunLink","policyOnHover","rel","AssetNodeLink","AssetNodeLinkContainer","className","ASSET_LINK_NAME_MAX_LENGTH","ASSET_GRAPH_QUERY","notifyOnNetworkStatusChange","groupSelector","matching","hideNodesMatching","reject","buildGraphQueryItems","filterByQuery","buildGraphData","hideEdgesToNodesOutsideQuery","removeEdgesToHiddenAssets","inputs","dependencyKeys","dependsOn","solid","outputs","dependedByKeys","dependedBy","graphData","allNodes","allNodesById","groupBy","toGraphId","notSourceAsset","upstream","calculateGraphDistances","keyBy","g","start","dfsUpstream","depth","flatMap","i","dname","dfsDownstream","SUBSCRIPTION_MAX_POLL_RATE","liveResult","ASSETS_GRAPH_LIVE_QUERY","skip","buildLiveData","fetching","NetworkStatus","networkStatus","timerRef","onRefreshDebounced","setTimeout","fire","clearTimeout","useQueryRefreshAtInterval","useDidLaunchEvent","assetKeyTokens","Set","assetStepKeys","runInProgressId","slice","RunLogObserver","callback","counter","console","log","useSubscription","ASSET_LIVE_RUN_LOGS_SUBSCRIPTION","fetchPolicy","onSubscriptionData","logs","subscriptionData","pipelineRunLogs","messages","m","has","ASSET_LATEST_INFO_FRAGMENT","CONFIG_TYPE_SCHEMA_FRAGMENT","MULTIPLE_DEFINITIONS_WARNING","ASSET_DEFINITION_COLLISION_QUERY","collision","allReposWithAsset","repositories","underline","addr","AssetLineageInfoElement","lineage_info","partition_list_label","partitions","partition_list_str","asOf","modifiers","offset","placement","reduce","accum","curr","ii","collapsed","setCollapsed","info","ASSET_LINEAGE_FRAGMENT","xHover","setXHover","reversed","reverse","graphDataByMetadataLabel","extractNumericData","graphLabels","gridTemplateColumns","repeat","onHoverX","shrinkable","action","href","datapoints","series","numericMetadataLabels","k","append","minX","maxX","minY","maxY","existingForPartition","v","isNaN","xNumeric","l","NaN","intValue","parseInt","intRepr","floatValue","serie","xs","ys","minXNumeric","min","maxXNumeric","AssetMetadataTable","rows","DAGSTER_TYPE_FRAGMENT","dayjs","duration","relativeTime","minLate","humanize","cronSchedule","maximumLagMinutes","cronDesc","humanCronString","replace","lagDesc","RunningBackfillsNotice","partitionSetName","RUNNING_BACKFILLS_NOTICE_QUERY","runningBackfillCount","partitionBackfillsOrError","results","LaunchAssetChoosePartitionsDialog","Dialog","isOpen","open","canEscapeKeyClose","canOutsideClickClose","onClose","setOpen","LaunchAssetChoosePartitionsDialogBody","assetJobName","upstreamAssetKeys","partitionedAssets","canLaunchPartitionBackfill","usePermissionsForLocation","launching","setLaunching","tagEditorOpen","setTagEditorOpen","tags","setTags","previewCount","setPreviewCount","morePreviewsCount","assetHealth","mergedHealth","mergedAssetHealth","knownDimensions","dimensionTypes","usePartitionDimensionSelections","knownDimensionNames","modifyQueryString","selections","setSelections","PartitionState","stateFilters","setStateFilters","keysInSelection","explodePartitionKeysInSelection","dimensionKeys","stateForKey","keysFiltered","history","useHistory","instance","LAUNCH_ASSET_CHOOSE_PARTITIONS_QUERY","usePartitionNameForPipeline","partitionSet","partitionSetError","onLaunch","PythonErrorInfo","CONFIG_PARTITION_SELECTION_QUERY","repositorySelector","partitionName","partitionKey","tagAndConfigData","partitionSetOrError","tagsOrError","runConfigOrError","allTags","runConfigData","yaml","mode","selectorUnlessGraph","mutate","mutation","LAUNCH_PARTITION_BACKFILL_MUTATION","backfillParams","selector","assetSelection","partitionNames","fromFailure","launchBackfillData","launchPartitionBackfill","showBackfillSuccessToast","backfillId","showBackfillErrorToast","range","DimensionRangeWizard","partitionKeys","dimension","partitionStateForKey","dimensionKey","stateForSingleDimension","selectedKeys","setSelected","PartitionStateCheckboxes","partitionKeysForCounts","allowed","marginLeft","marginRight","overflowY","maxHeight","showAssetKey","ButtonLink","UpstreamUnavailableWarning","TagEditor","tagsFromSession","onRequestClose","borderRadius","onRequestEdit","disabledReason","upstreamAssetHealth","upstreamUnavailable","singleDimensionKey","upstreamUnavailableSpans","assembleIntoSpans","s","status","Alert","span","stringForSpan","Error","DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT","USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT","countOrBlank","isAnyPartitioned","isPartitioned","useMaterializationAction","launchpadElement","setIsOpen","skipAllTerm","missingOrStale","isAssetMissing","optionsForButton","firstOption","MaterializeButton","useDisabledButtonTooltipFix","borderTopRightRadius","borderRight","Popover","onInteraction","nextOpen","Menu","option","text","role","minWidth","borderTopLeftRadius","confirm","useConfirmation","stateForLaunchingAssets","upstreamAssetsWithNoMaterializations","missing","sessionPresets","LAUNCH_ASSET_LOADER_RESOURCE_QUERY","resourceResult","pipeline","pipelineOrError","message","partitionSets","partitionSetsOrError","requiredResourceKeys","requiredResources","resourceKey","resources","modes","anyResourcesHaveRequiredConfig","isRequired","anyAssetsHaveRequiredConfig","assumeConfigPresent","assetOpNames","flattenGraphs","solidSelectionQuery","base","partitionsSetName","getUpstreamAssetKeys","jobsInCommon","stringify","LAUNCH_ASSET_CHECK_UPSTREAM_QUERY","assetMaterializations","executionMetadata","t","pick","DagsterTag","o","ridx","LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT","isTimeseriesDimension","isTimeseriesPartition","aPartitionKey","test","dimensions","stateForPartialKey","h","dim","mergedStates","health","dimensionIdx","otherDimensionSelectedKeys","states","subkey","placeholderDimensionSelection","selectedRanges","assetData","minHeight","keysForTotals","total","success","combinations","dkeys","toLocaleString","small","splitPartitions","currentLogicalVersion","projectedLogicalVersion","fillColor","textColor","interactive","NO_PARTITION_KEY","sortByEventTimestamp","events","definedPartitionKeys","orderedPartitionKeys","sorted","groupByPartition","serializer","defaults","encode","fromEntries","rangeText","decode","qs","entries","endsWith","opts","useQueryPersistedState","setQuery","local","setLocal","knownDimensionNamesJSON","saved","spanTextToSelections","allPartitionsRange","ranges","partitionsToText","allPartitionsSpan","buildPartitionHealthData","loadKey","partitionKeysByDimension","counts","partitionMaterializationCounts","materializationCounts","stateByKey","materializationCountsGrouped","dim0","idx0","idx1","setResult","assetKeyJSONs","assetKeyJSON","missingKeyJSON","fetchedAt","run","PARTITION_HEALTH_QUERY","loaded","partitionSetsData","ASSET_JOB_PARTITION_SETS_QUERY","params","before","xAxisDefault","time","loadUsingPartitionKeys","ASSET_EVENTS_QUERY","partitionInLast","limit","assetObservations","allPartitionKeys","ASSET_MATERIALIZATION_FRAGMENT","ASSET_OBSERVATION_FRAGMENT","ConfigEditorConfigPicker","onSaveSession","onSelectPreset","onSelectPartition","presets","configGenerators","localeCompare","PickerContainer","ConfigEditorConfigGeneratorPicker","presetName","onSelect","item","ConfigEditorPartitionPicker","basePath","AppContext","repoAddressToSelector","CONFIG_PARTITIONS_QUERY","sortOrderKey","useStateWithStorage","sortOrder","setSortOrder","retrieved","partitionsOrError","onClickSort","preventDefault","order","rightElement","SortButton","onMouseDown","inputProps","Intent","itemRenderer","noResults","inputValueRenderer","selectedItem","onItemSelect","defaultSelectedItem","itemPredicate","active","handleClick","button","shortcutLabel","shortcutFilter","code","altKey","onShortcut","click","configGenerator","itemListRenderer","itemsParentRef","renderItem","filteredItems","renderedPresetItems","renderedPartitionSetItems","bothTypesPresent","ulRef","solidSelection","rightIcon","IconWrapper","CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT","CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT","CodeMirrorInDialogStyle","createGlobalStyle","LaunchpadTransientSessionContainer","launchpadType","initialData","useInitialDataForMode","initialSessionComplete","createSingleSession","runConfigYaml","session","setSession","LaunchpadSession","onSave","changes","newSession","LaunchpadStoredSessionsContainer","AssetLaunchpad","LaunchpadAllowedRoot","pipelinePath","JobLaunchpad","useParams","repoPath","useTrackPageView","explorerPathFromString","useJobTitle","useStripSnapshotFromPath","PIPELINE_EXECUTION_ROOT_QUERY","LaunchpadSessionLoading","LaunchpadSessionError","fallback","GUTTER_ID","rm","elt","parentNode","removeChild","showTooltipFor","tooltip","tt","document","createElement","nodeRect","getBoundingClientRect","appendChild","cloneNode","clientHeight","showTooltip","hide","CodeMirror","poll","setInterval","host","clearInterval","clearMarks","cm","lint","hasGutter","clearGutter","marked","clear","makeMarker","labels","severity","multiple","tooltips","marker","inner","annotationTooltip","ann","tip","messageHTML","innerHTML","createTextNode","updateLinting","annotationsNotSorted","annotations","lines","line","groupByLine","anns","maxSeverity","tipLabel","createDocumentFragment","formatAnnotation","markText","__annotation","setGutterMarker","onUpdateLinting","startLinting","passOptions","getAnnotations","getHelper","waitingFor","abort","off","on","getValue","arg2","operation","lintAsync","then","issues","timeout","delay","onMouseOver","box","srcElement","pos","coordsChar","spans","findMarksAt","docs","getDocs","docsEl","textContent","paddingBottom","popupTooltip","LintState","this","val","old","lintOnChange","getWrapperElement","gutters","getOption","hasLintGutter","Function","AUTO_COMPLETE_AFTER_KEY","performLint","debounce","editor","ConfigEditorStyle","ConfigEditor","_editor","moveCursor","ch","setCursor","scroll","getScrollInfo","cursorCoords","scrollIntoView","moveCursorToPath","codeMirrorDoc","getDoc","yamlDoc","configCode","findRangeInDocumentFromPath","posFromIndex","prevProps","configSchema","performInitialPass","readOnly","context","expandAutocompletionContextAtCursor","onHelpContextChange","closestMappingType","theme","lineNumbers","indentUnit","smartIndent","showCursorWhenSelecting","checkConfig","hintOptions","completeSingle","closeOnUnfocus","schema","keyMap","extraKeys","showHint","execCommand","Tab","foldGutter","editorDidMount","onBeforeChange","onConfigChange","onCursorActivity","getSelection","onBlur","onKeyUp","isHelpContextEqual","prev","ConfigEditorHelp","allInnerTypes","Container","ConfigScrollWrap","maxDepth","AutocompletionsNote","CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT","CONFIG_EDITOR_VALIDATION_FRAGMENT","errorStackToYamlPath","fieldName","listIndex","mapKey","responseToYamlValidationResult","configYaml","response","isValid","errors","err","reason","parsed","topLevelKey","forEach","ConfigEditorModePicker","resolvedMode","modeName","onModeChange","singleMode","valid","modeError","Select","activeItem","filterable","SOLID_SELECTOR_QUERY","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","OpSelector","serverProvidedSubsetError","onFlattenGraphsChange","focused","setFocused","inputRef","requestScopeHandleID","ops","explodeCompositesInHandleGraph","solidHandles","flattenGraphsEnabled","f","opsFetchError","queryResultOps","errorMessage","PopoverErrorWrap","ShortcutHandler","nextQuery","onFocus","linkToPreview","setFlattenGraphs","isValidationError","stateToHint","invalid","present","none","RemoveExtraConfigButton","onRemoveExtraPaths","extraNodes","knownKeyExtraPaths","otherPaths","parts","ScaffoldConfigButton","onScaffoldMissingConfig","missingNodes","confirmationMessage","RunPreview","validation","onHighlightPath","runConfigSchema","errorsOnly","setErrorsOnly","rootCompositeChildren","allConfigTypes","rootConfigType","root","fields","field","allConfigVersion","configTypeKey","errorsAndPaths","pathKey","fieldNames","solids","rest","hasOps","itemsIn","parents","boxes","pathErrors","startsWith","isPresent","pathExistsInObject","containsMissing","missingNode","isInvalid","isMissing","_","Tag","ItemsEmptyNotice","axis","ErrorListContainer","Section","SectionTitle","ErrorRow","onHighlight","RuntimeAndResourcesSection","ItemSet","RUN_PREVIEW_VALIDATION_FRAGMENT","ErrorRowContainer","hoverable","displayed","indexOf","substr","truncateErrorMessage","paddingRight","object","scaffoldType","typeLookup","isSelector","config","typeParamKeys","scalarTypeKey","String","Int","Float","Bool","Any","assertUnreachable","scaffoldPipelineConfig","createTypeLookup","YAML_SYNTAX_INVALID","reducer","previewLoading","payload","preview","previewedDocument","configLoading","editorHelpContext","LaunchButtonContainer","flexGrow","zIndex","initialState","currentSession","dispatch","mounted","editorSplitPanelContainer","previewCounter","configResult","PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY","configSchemaOrError","runConfigSchemaOrError","launchButtonTitle","launchButtonWarning","currentPreviewCount","configYamlOrEmpty","sanitizeConfigYamlString","PREVIEW_CONFIG_QUERY","isLatestRequest","isPipelineConfigValid","tagsApplyingNewBaseTags","newBaseTags","preservedUserTags","bt","preset","onlyKeyAndValue","needsRefresh","sessionSolidSelection","onConfigLoading","onConfigLoaded","assign","onRefreshConfig","matchingPreset","openTagEditor","refreshableSessionBase","LaunchRootExecutionButton","LoadingOverlay","isLoading","SessionSettingsBar","SessionSettingsSpacer","TextInput","tagsFromDefinition","tagDict","toSave","tag","paths","deletePropertyPath","updatedRunConfigData","merge","warning","getVariables","uniqBy","behavior","obj","lastKey","yamlString","LoadingOverlayContainer","editState","setEditState","toError","onTagEdit","TagList","editable","flexDirection","onRemove","TagContainer","sessionTag","BackfillPartitionSelector","onCancel","onSubmit","partitionData","_setRange","reexecute","BACKFILL_SELECTOR_QUERY","pipelineSnapshot","solidsFiltered","stepRows","buildLayout","GanttChartMode","isFailed","failedPartitions","selection","selectionSet","autoApplyChanges","LaunchBackfillButton","reexecutionSteps","step","onSuccess","onError","useMutation","launchBackfill","reexecutionCount","buttonTitle","runCount","DimensionRangeInput","isTimeseries","valueString","setValueString","partitionNameJSON","partitionNameArr","names","placeholderForPartitions","tryCommit","currentTarget","onKeyDown","ClearButton","C","PartitionStatus","byState","partitionStatusToText","useDocumentTitle"],"sourceRoot":""}